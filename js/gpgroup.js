/* Generated by the Nim Compiler v1.4.8 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI1194621 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194643 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194645 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI10625632 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9625037 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI9630015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1188044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI2285020 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI9655015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1194408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1188015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1194723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1194617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194641 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1188013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI1194641 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194641.node = NNI1194641;
var NNI1194619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194619.node = NNI1194619;
NTI1194723.base = NTI1194617;
NTI1194728.base = NTI1194617;
var NNI1194617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1194723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1188015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1188013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1188013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1194728, name: "up", sons: null}]};
NTI1194617.node = NNI1194617;
var NNI1194408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194408.node = NNI1194408;
NTI1194617.base = NTI1194408;
NTI1194619.base = NTI1194617;
NTI1194641.base = NTI1194619;
NTI9655015.base = NTI1188013;
var NNI2285020 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI1188044, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1188044, name: "b", sons: null}]};
NTI2285020.node = NNI2285020;
NTI9630015.base = NTI1188013;
NTI9625037.base = NTI1188013;
NTI10625632.base = NTI1188013;
var NNI1194645 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194645.node = NNI1194645;
var NNI1194643 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194643.node = NNI1194643;
var NNI1194621 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194621.node = NNI1194621;
NTI1194621.base = NTI1194617;
NTI1194643.base = NTI1194621;
NTI1194645.base = NTI1194643;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(13, 10);
function nimMax(a_1460821, b_1460822) {
    var Tmp1;

  var result_1460823 = 0;

  BeforeRet: do {
    if ((b_1460822 <= a_1460821)) {
    Tmp1 = a_1460821;
    }
    else {
    Tmp1 = b_1460822;
    }
    
    result_1460823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1460823;

}
function nimMin(a_1460803, b_1460804) {
    var Tmp1;

  var result_1460805 = 0;

  BeforeRet: do {
    if ((a_1460803 <= b_1460804)) {
    Tmp1 = a_1460803;
    }
    else {
    Tmp1 = b_1460804;
    }
    
    result_1460805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1460805;

}
function mnewString(len_1460044) {
        return new Array(len_1460044);
  

  
}
var ConstSet2 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1470023, src_1470024, ti_1470025) {
  var result_1475219 = null;

    switch (ti_1470025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_1465401(ti_1470025))) {
      result_1475219 = src_1470024;
      }
      else {
        result_1475219 = [src_1470024[0], src_1470024[1]];
      }
      
      break;
    case 19:
            if (dest_1470023 === null || dest_1470023 === undefined) {
        dest_1470023 = {};
      }
      else {
        for (var key in dest_1470023) { delete dest_1470023[key]; }
      }
      for (var key in src_1470024) { dest_1470023[key] = src_1470024[key]; }
      result_1475219 = dest_1470023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1470025.base == null))) {
      result_1475219 = nimCopy(dest_1470023, src_1470024, ti_1470025.base);
      }
      else {
      if ((ti_1470025.kind == 17)) {
      result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {m_type: ti_1470025} : dest_1470023;
      }
      else {
        result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {} : dest_1470023;
      }
      }
      nimCopyAux(result_1475219, src_1470024, ti_1470025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1470024 === null) {
        result_1475219 = null;
      }
      else {
        if (dest_1470023 === null || dest_1470023 === undefined) {
          dest_1470023 = new Array(src_1470024.length);
        }
        else {
          dest_1470023.length = src_1470024.length;
        }
        result_1475219 = dest_1470023;
        for (var i = 0; i < src_1470024.length; ++i) {
          result_1475219[i] = nimCopy(result_1475219[i], src_1470024[i], ti_1470025.base);
        }
      }
    
      break;
    case 28:
            if (src_1470024 !== null) {
        result_1475219 = src_1470024.slice(0);
      }
    
      break;
    default: 
      result_1475219 = src_1470024;
      break;
    }

  return result_1475219;

}
function makeNimstrLit(c_1455062) {
      var ln = c_1455062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1455062.charCodeAt(i);
  }
  return result;
  

  
}
function toJSStr(s_1455096) {
                    var Tmp5;
            var Tmp7;

  var result_1455097 = null;

    var res_1455170 = newSeq_1455128((s_1455096).length);
    var i_1455172 = 0;
    var j_1455174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1455172 < (s_1455096).length)) break L2;
          var c_1455175 = s_1455096[i_1455172];
          if ((c_1455175 < 128)) {
          res_1455170[j_1455174] = String.fromCharCode(c_1455175);
          i_1455172 += 1;
          }
          else {
            var helper_1455198 = newSeq_1455128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1455199 = c_1455175.toString(16);
                  if ((((code_1455199) == null ? 0 : (code_1455199).length) == 1)) {
                  helper_1455198.push("%0");;
                  }
                  else {
                  helper_1455198.push("%");;
                  }
                  
                  helper_1455198.push(code_1455199);;
                  i_1455172 += 1;
                    if (((s_1455096).length <= i_1455172)) Tmp5 = true; else {                      Tmp5 = (s_1455096[i_1455172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1455175 = s_1455096[i_1455172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1455170[j_1455174] = decodeURIComponent(helper_1455198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1455170[j_1455174] = helper_1455198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1455174 += 1;
        }
    } while(false);
    if (res_1455170.length < j_1455174) { for (var i=res_1455170.length;i<j_1455174;++i) res_1455170.push(null); }
               else { res_1455170.length = j_1455174; };
    result_1455097 = res_1455170.join("");

  return result_1455097;

}
function raiseException(e_1420218, ename_1420219) {
    e_1420218.name = ename_1420219;
    if ((excHandler == 0)) {
    unhandledException(e_1420218);
    }
    
    throw e_1420218;

  
}
function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}
function eqStrings(a_1460222, b_1460223) {
        if (a_1460222 == b_1460223) return true;
    if (a_1460222 === null && b_1460223.length == 0) return true;
    if (b_1460223 === null && a_1460222.length == 0) return true;
    if ((!a_1460222) || (!b_1460223)) return false;
    var alen = a_1460222.length;
    if (alen != b_1460223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_1460222[i] != b_1460223[i]) return false;
    return true;
  

  
}
function cstrToNimstr(c_1455079) {
      var ln = c_1455079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1455079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1455079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
var ConstSet3 = setConstr(13, 10);
var ConstSet4 = setConstr([97, 122]);
var ConstSet5 = setConstr(32, 9, 11, 13, 10, 12);
      var loci_10830038 = [makeNimstrLit("A"), makeNimstrLit("B"), makeNimstrLit("C"), makeNimstrLit("DRA1"), makeNimstrLit("DRB1"), makeNimstrLit("DQA1"), makeNimstrLit("DQB1"), makeNimstrLit("DPA1"), makeNimstrLit("DPB1"), makeNimstrLit("DRB3"), makeNimstrLit("DRB4"), makeNimstrLit("DRB5"), makeNimstrLit("E"), makeNimstrLit("F"), makeNimstrLit("G")];
function addChar(x_1505031, c_1505032) {
    x_1505031.push(c_1505032);

  
}
var ConstSet6 = setConstr([48, 57]);
var ConstSet7 = setConstr(0, 125);
var ConstSet8 = setConstr([48, 57]);
var ConstSet9 = setConstr([65, 90]);
var ConstSet10 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_10370031 = [0];
function nextPowerOfTwo_2480014(x_2480016) {
  var result_2480017 = 0;

    result_2480017 = (x_2480016 - 1);
    result_2480017 = (result_2480017 | (result_2480017 >> 16));
    result_2480017 = (result_2480017 | (result_2480017 >> 8));
    result_2480017 = (result_2480017 | (result_2480017 >> 4));
    result_2480017 = (result_2480017 | (result_2480017 >> 2));
    result_2480017 = (result_2480017 | (result_2480017 >> 1));
    result_2480017 += (1 + ((x_2480016 <= 0) ? 1:0));

  return result_2480017;

}
function slotsNeeded_10445048(count_10445050) {
  var result_10445051 = 0;

    result_10445051 = nextPowerOfTwo_2480014((Math.trunc((count_10445050 * 3) / 2) + 4));

  return result_10445051;

}
function initTable_10619016(initialSize_10619020) {
  var result_10619036 = ({data: [], counter: 0});

    var correctSizeHEX60gensym0_10620001 = slotsNeeded_10445048(initialSize_10619020);
    result_10619036.counter = 0;
    result_10619036.data = new Array(correctSizeHEX60gensym0_10620001); for (var i=0;i<correctSizeHEX60gensym0_10620001;++i) {result_10619036.data[i]={Field0: 0, Field1: [], Field2: []};}
  return result_10619036;

}
function initTable_10625634(initialSize_10625638) {
  var result_10625654 = ({data: [], counter: 0});

    var correctSizeHEX60gensym2_10630001 = slotsNeeded_10445048(initialSize_10625638);
    result_10625654.counter = 0;
    result_10625654.data = new Array(correctSizeHEX60gensym2_10630001); for (var i=0;i<correctSizeHEX60gensym2_10630001;++i) {result_10625654.data[i]={Field0: 0, Field1: [], Field2: []};}
  return result_10625654;

}
var galleles_10625629 = [initTable_10619016(32)];
var ggroups_10635629 = [initTable_10625634(32)];
var palleles_10635638 = [initTable_10619016(32)];
var pgroups_10635649 = [initTable_10625634(32)];
var alleleIDs_10635658 = [initTable_10619016(32)];
function newSeq_1840232(len_1840235) {
  var result_1840237 = [];

    result_1840237 = new Array(len_1840235); for (var i=0;i<len_1840235;++i) {result_1840237[i]=[];}
  return result_1840237;

}
function isFatPointer_1465401(ti_1465403) {
  var result_1465404 = false;

  BeforeRet: do {
    result_1465404 = !((ConstSet2[ti_1465403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1465404;

}
function nimCopyAux(dest_1470028, src_1470029, n_1470031) {
    switch (n_1470031.kind) {
    case 0:
      break;
    case 1:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1470031.sons.length; i++) {
      nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i]);
    }
    
      break;
    case 3:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
      for (var i = 0; i < n_1470031.sons.length; ++i) {
        nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i][1]);
      }
    
      break;
    }

  
}
function substr_1571022(s_1571024, first_1571025, last_1571026) {
  var result_1571027 = [];

    var first_1571028 = nimMax(first_1571025, 0);
    var L_1571030 = nimMax(((nimMin(last_1571026, (s_1571024).length - 1) - first_1571028) + 1), 0);
    result_1571027 = nimCopy(null, mnewString(L_1571030), NTI1188013);
    L1: do {
      var i_1571039 = 0;
      var colontmp__10785093 = 0;
      colontmp__10785093 = (L_1571030 - 1);
      var res_10785094 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10785094 <= colontmp__10785093)) break L3;
            i_1571039 = res_10785094;
            result_1571027[i_1571039] = s_1571024[(i_1571039 + first_1571028)];
            res_10785094 += 1;
          }
      } while(false);
    } while(false);

  return result_1571027;

}
function startsWith_9965248(s_9965250, prefix_9965251) {
    var Tmp1;

  var result_9965252 = false;

    if (!(0 < (s_9965250).length)) Tmp1 = false; else {      Tmp1 = (s_9965250[0] == prefix_9965251);    }    result_9965252 = Tmp1;

  return result_9965252;

}
function add_1357211(x_1357214, x_1357214_Idx, y_1357215) {
          if (x_1357214[x_1357214_Idx] === null) { x_1357214[x_1357214_Idx] = []; }
      var off = x_1357214[x_1357214_Idx].length;
      x_1357214[x_1357214_Idx].length += y_1357215.length;
      for (var i = 0; i < y_1357215.length; ++i) {
        x_1357214[x_1357214_Idx][off+i] = y_1357215.charCodeAt(i);
      }
    

  
}
function newSeq_1455128(len_1455131) {
  var result_1455133 = [];

    result_1455133 = new Array(len_1455131); for (var i=0;i<len_1455131;++i) {result_1455133[i]=null;}
  return result_1455133;

}
function unhandledException(e_1415059) {
    var buf_1415060 = [[]];
    if (!(((e_1415059.message).length == 0))) {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_1415060[0].push.apply(buf_1415060[0], e_1415059.message);;
    }
    else {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit(" ["));;
    add_1357211(buf_1415060, 0, e_1415059.name);
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("]\x0A"));;
    var cbuf_1420201 = toJSStr(buf_1415060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1420201);
  }
  else {
    throw cbuf_1420201;
  }
  

  
}
function sysFatal_1305418(message_1305422) {
    raiseException({message: nimCopy(null, message_1305422, NTI1188013), m_type: NTI1194641, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}
function raiseAssert_1305414(msg_1305416) {
    sysFatal_1305418(msg_1305416);

  
}
function failedAssertImpl_1305480(msg_1305482) {
    raiseAssert_1305414(msg_1305482);

  
}
function substrEq_9460026(s_9460028, pos_9460029, substr_9460030) {
  var result_9460031 = false;

  BeforeRet: do {
    var i_9460033 = 0;
    var length_9460034 = (substr_9460030).length;
    L1: do {
        L2: while (true) {
        if (!(((i_9460033 < length_9460034) && ((pos_9460029 + i_9460033) < (s_9460028).length)) && (s_9460028[(pos_9460029 + i_9460033)] == substr_9460030[i_9460033]))) break L2;
          i_9460033 += 1;
        }
    } while(false);
    result_9460031 = (i_9460033 == length_9460034);
    break BeforeRet;
  } while (false);

  return result_9460031;

}
function nsuSplitString(s_9635040, sep_9635041, maxsplit_9635042) {
  var result_9635044 = [];

    if (!((0 < (sep_9635041).length))) {
    failedAssertImpl_1305480(makeNimstrLit("strutils.nim(779, 11) `sep.len > 0` "));
    }
    
    result_9635044 = nimCopy(null, [], NTI9655015);
    L1: do {
      var xHEX60gensym64_9655016 = [];
      var lastHEX60gensym33_10785102 = 0;
      var splitsHEX60gensym33_10785103 = maxsplit_9635042;
      L2: do {
          L3: while (true) {
          if (!(lastHEX60gensym33_10785102 <= (s_9635040).length)) break L3;
            var firstHEX60gensym33_10785105 = lastHEX60gensym33_10785102;
            L4: do {
                L5: while (true) {
                if (!((lastHEX60gensym33_10785102 < (s_9635040).length) && !(substrEq_9460026(s_9635040, lastHEX60gensym33_10785102, sep_9635041)))) break L5;
                  lastHEX60gensym33_10785102 += 1;
                }
            } while(false);
            if ((splitsHEX60gensym33_10785103 == 0)) {
            lastHEX60gensym33_10785102 = (s_9635040).length;
            }
            
            xHEX60gensym64_9655016 = substr_1571022(s_9635040, firstHEX60gensym33_10785105, (lastHEX60gensym33_10785102 - 1));
            var Tmp6 = nimCopy(null, xHEX60gensym64_9655016, NTI1188013);
            result_9635044.push(Tmp6);;
            if ((splitsHEX60gensym33_10785103 == 0)) {
            break L2;
            }
            
            splitsHEX60gensym33_10785103 -= 1;
            lastHEX60gensym33_10785102 += (sep_9635041).length;
          }
      } while(false);
    } while(false);

  return result_9635044;

}
function HEX5BHEX5D_3390283(s_3390287, x_3390289) {
  var result_3390290 = [];

    var a_3390401 = x_3390289.a;
    var L_3390601 = ((x_3390289.b - a_3390401) + 1);
    result_3390290 = nimCopy(null, mnewString(L_3390601), NTI1188013);
    L1: do {
      var i_3390609 = 0;
      var i_10785115 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10785115 < L_3390601)) break L3;
            i_3390609 = i_10785115;
            result_3390290[i_3390609] = s_3390287[(i_3390609 + a_3390401)];
            i_10785115 += 1;
          }
      } while(false);
    } while(false);

  return result_3390290;

}
function HEX2EHEX2E_3390220(a_3390225, b_3390227) {
  var result_3390229 = ({a: 0, b: 0});

    nimCopy(result_3390229, {a: a_3390225, b: b_3390227}, NTI2285020);

  return result_3390229;

}
function nsuRepeatChar(c_9890124, count_9890125) {
  var result_9890126 = [];

    result_9890126 = nimCopy(null, mnewString(count_9890125), NTI1188013);
    L1: do {
      var i_9890135 = 0;
      var colontmp__10785120 = 0;
      colontmp__10785120 = (count_9890125 - 1);
      var res_10785121 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10785121 <= colontmp__10785120)) break L3;
            i_9890135 = res_10785121;
            result_9890126[i_9890135] = c_9890124;
            res_10785121 += 1;
          }
      } while(false);
    } while(false);

  return result_9890126;

}
function spaces_9890176(n_9890178) {
  var result_9890179 = [];

    result_9890179 = nimCopy(null, nsuRepeatChar(32, n_9890178), NTI1188013);

  return result_9890179;

}
function outputMeta_10635702(line_10635704) {
    var fields_10635705 = nsuSplitString(line_10635704, makeNimstrLit(": "), 1);
    var key_10640241 = HEX5BHEX5D_3390283(fields_10635705[0], HEX2EHEX2E_3390220(2, ((fields_10635705[0]).length - 1)));
    var value_10640242 = nimCopy(null, fields_10635705[1], NTI1188013);
    rawEcho(key_10640241, spaces_9890176((20 - (key_10640241).length)), value_10640242);

  
}
function nsuSplitChar(s_9625034, sep_9625035, maxsplit_9625036) {
  var result_9625038 = [];

    result_9625038 = nimCopy(null, [], NTI9630015);
    L1: do {
      var xHEX60gensym59_9630016 = [];
      var lastHEX60gensym26_10785129 = 0;
      var splitsHEX60gensym26_10785130 = maxsplit_9625036;
      L2: do {
          L3: while (true) {
          if (!(lastHEX60gensym26_10785129 <= (s_9625034).length)) break L3;
            var firstHEX60gensym26_10785132 = lastHEX60gensym26_10785129;
            L4: do {
                L5: while (true) {
                if (!((lastHEX60gensym26_10785129 < (s_9625034).length) && !((s_9625034[lastHEX60gensym26_10785129] == sep_9625035)))) break L5;
                  lastHEX60gensym26_10785129 += 1;
                }
            } while(false);
            if ((splitsHEX60gensym26_10785130 == 0)) {
            lastHEX60gensym26_10785129 = (s_9625034).length;
            }
            
            xHEX60gensym59_9630016 = substr_1571022(s_9625034, firstHEX60gensym26_10785132, (lastHEX60gensym26_10785129 - 1));
            var Tmp6 = nimCopy(null, xHEX60gensym59_9630016, NTI1188013);
            result_9625038.push(Tmp6);;
            if ((splitsHEX60gensym26_10785130 == 0)) {
            break L2;
            }
            
            splitsHEX60gensym26_10785130 -= 1;
            lastHEX60gensym26_10785129 += 1;
          }
      } while(false);
    } while(false);

  return result_9625038;

}
function imul_10381082(a_10381084, b_10381085) {
  var result_10381086 = 0;

    var mask_10381087 = 65535;
    var aHi_10381096 = (((a_10381084 >>> 0) >>> 16) & mask_10381087);
    var aLo_10381097 = (a_10381084 & mask_10381087);
    var bHi_10381106 = (((b_10381085 >>> 0) >>> 16) & mask_10381087);
    var bLo_10381107 = (b_10381085 & mask_10381087);
    result_10381086 = ((((aLo_10381097 * bLo_10381107) >>> 0) + (((((aHi_10381096 * bLo_10381107) >>> 0) + ((aLo_10381097 * bHi_10381106) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_10381086;

}
function rotl32_10381201(x_10381203, r_10381204) {
  var result_10381205 = 0;

    result_10381205 = ((x_10381203 << r_10381204) | ((x_10381203 >>> 0) >>> (32 - r_10381204)));

  return result_10381205;

}
function murmurHash_10381229(x_10381232) {
  var result_10381233 = 0;

  BeforeRet: do {
    var size_10381243 = (x_10381232).length;
    var stepSize_10381245 = 4;
    var n_10381246 = Math.trunc(size_10381243 / stepSize_10381245);
    var h1_10381247 = 0;
    var i_10381249 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_10381249 < (n_10381246 * stepSize_10381245))) break L2;
          var k1_10381250 = 0;
          var j_10381251 = stepSize_10381245;
          L3: do {
              L4: while (true) {
              if (!(0 < j_10381251)) break L4;
                j_10381251 -= 1;
                k1_10381250 = ((k1_10381250 << 8) | x_10381232[(i_10381249 + j_10381251)]);
              }
          } while(false);
          i_10381249 += stepSize_10381245;
          k1_10381250 = imul_10381082(k1_10381250, 3432918353);
          k1_10381250 = rotl32_10381201(k1_10381250, 15);
          k1_10381250 = imul_10381082(k1_10381250, 461845907);
          h1_10381247 = (h1_10381247 ^ k1_10381250);
          h1_10381247 = rotl32_10381201(h1_10381247, 13);
          h1_10381247 = ((((h1_10381247 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while(false);
    var k1_10385207 = 0;
    var rem_10385208 = Math.trunc(size_10381243 % stepSize_10381245);
    L5: do {
        L6: while (true) {
        if (!(0 < rem_10385208)) break L6;
          rem_10385208 -= 1;
          k1_10385207 = ((k1_10385207 << 8) | x_10381232[(i_10381249 + rem_10385208)]);
        }
    } while(false);
    k1_10385207 = imul_10381082(k1_10385207, 3432918353);
    k1_10385207 = rotl32_10381201(k1_10385207, 15);
    k1_10385207 = imul_10381082(k1_10385207, 461845907);
    h1_10381247 = (h1_10381247 ^ k1_10385207);
    h1_10381247 = (h1_10381247 ^ size_10381243);
    h1_10381247 = (h1_10381247 ^ ((h1_10381247 >>> 0) >>> 16));
    h1_10381247 = imul_10381082(h1_10381247, 2246822507);
    h1_10381247 = (h1_10381247 ^ ((h1_10381247 >>> 0) >>> 13));
    h1_10381247 = imul_10381082(h1_10381247, 3266489909);
    h1_10381247 = (h1_10381247 ^ ((h1_10381247 >>> 0) >>> 16));
    result_10381233 = (h1_10381247|0);
    break BeforeRet;
  } while (false);

  return result_10381233;

}
function hash_10420214(x_10420216) {
  var result_10420217 = 0;

    result_10420217 = murmurHash_10381229((x_10420216.slice(0, (x_10420216).length - 1+1)));

  return result_10420217;

}
function isFilled_10441218(hcode_10441220) {
  var result_10441221 = false;

    result_10441221 = !((hcode_10441220 == 0));

  return result_10441221;

}
function nextTry_10445014(h_10445016, maxHash_10445017) {
  var result_10445018 = 0;

    result_10445018 = ((h_10445016 + 1) & maxHash_10445017);

  return result_10445018;

}
function rawGet_10655602(t_10655606, key_10655607, hc_10655608, hc_10655608_Idx) {
            var Tmp3;

  var result_10655609 = 0;

  BeforeRet: do {
    hc_10655608[hc_10655608_Idx] = hash_10420214(key_10655607);
    if ((hc_10655608[hc_10655608_Idx] == 0)) {
    hc_10655608[hc_10655608_Idx] = 314159265;
    }
    
    if (((t_10655606.data).length == 0)) {
    result_10655609 = -1;
    break BeforeRet;
    }
    
    var h_10665138 = (hc_10655608[hc_10655608_Idx] & (t_10655606.data).length - 1);
    L1: do {
        L2: while (true) {
        if (!isFilled_10441218(t_10655606.data[h_10665138].Field0)) break L2;
            if (!(t_10655606.data[h_10665138].Field0 == hc_10655608[hc_10655608_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10655606.data[h_10665138].Field1, key_10655607);            }          if (Tmp3) {
          result_10655609 = h_10665138;
          break BeforeRet;
          }
          
          h_10665138 = nextTry_10445014(h_10665138, (t_10655606.data).length - 1);
        }
    } while(false);
    result_10655609 = (-1 - h_10665138);
  } while (false);

  return result_10655609;

}
function mustRehash_10680601(t_10680604) {
  var result_10680605 = false;

    result_10680605 = ((((t_10680604.data).length * 2) < (t_10680604.counter * 3)) || (((t_10680604.data).length - t_10680604.counter) < 4));

  return result_10680605;

}
function rawInsert_10706108(t_10706114, data_10706117, data_10706117_Idx, key_10706118, val_10706120, hc_10706121, h_10706122) {
    data_10706117[data_10706117_Idx][h_10706122].Field1 = nimCopy(null, key_10706118, NTI1188013);
    data_10706117[data_10706117_Idx][h_10706122].Field2 = nimCopy(null, val_10706120, NTI10625632);
    data_10706117[data_10706117_Idx][h_10706122].Field0 = hc_10706121;

  
}
function enlarge_10705161(t_10705167) {
    var n_10705175 = [];
    n_10705175 = new Array(((t_10705167.data).length * 2)); for (var i=0;i<((t_10705167.data).length * 2);++i) {n_10705175[i]={Field0: 0, Field1: [], Field2: []};}    var Tmp1 = t_10705167.data; t_10705167.data = n_10705175; n_10705175 = Tmp1;    L2: do {
      var i_10705334 = 0;
      var colontmp__10785141 = 0;
      colontmp__10785141 = (n_10705175).length - 1;
      var res_10785146 = 0;
      L3: do {
          L4: while (true) {
          if (!(res_10785146 <= colontmp__10785141)) break L4;
            i_10705334 = res_10785146;
            var eh_10705483 = n_10705175[i_10705334].Field0;
            if (isFilled_10441218(eh_10705483)) {
            var j_10705490 = (eh_10705483 & (t_10705167.data).length - 1);
            L5: do {
                L6: while (true) {
                if (!isFilled_10441218(t_10705167.data[j_10705490].Field0)) break L6;
                  j_10705490 = nextTry_10445014(j_10705490, (t_10705167.data).length - 1);
                }
            } while(false);
            rawInsert_10706108(t_10705167, t_10705167, "data", n_10705175[i_10705334].Field1, n_10705175[i_10705334].Field2, eh_10705483, j_10705490);
            }
            
            res_10785146 += 1;
          }
      } while(false);
    } while(false);

  
}
function rawGetKnownHC_10706594(t_10706598, key_10706599, hc_10706600) {
  var result_10706601 = 0;

  BeforeRet: do {
    if (((t_10706598.data).length == 0)) {
    result_10706601 = -1;
    break BeforeRet;
    }
    
    var h_10710138 = (hc_10706600 & (t_10706598.data).length - 1);
    L1: do {
        L2: while (true) {
        if (!isFilled_10441218(t_10706598.data[h_10710138].Field0)) break L2;
          if (((t_10706598.data[h_10710138].Field0 == hc_10706600) && eqStrings(t_10706598.data[h_10710138].Field1, key_10706599))) {
          result_10706601 = h_10710138;
          break BeforeRet;
          }
          
          h_10710138 = nextTry_10445014(h_10710138, (t_10706598.data).length - 1);
        }
    } while(false);
    result_10706601 = (-1 - h_10710138);
  } while (false);

  return result_10706601;

}
function HEX5BHEX5DHEX3D_10640462(t_10640468, key_10640469, val_10640471) {
    if (((t_10640468.data).length == 0)) {
    var correctSizeHEX60gensym6_10650001 = slotsNeeded_10445048(32);
    t_10640468.counter = 0;
    t_10640468.data = new Array(correctSizeHEX60gensym6_10650001); for (var i=0;i<correctSizeHEX60gensym6_10650001;++i) {t_10640468.data[i]={Field0: 0, Field1: [], Field2: []};}    }
    
    var hc_10655601 = [0];
    var index_10665620 = rawGet_10655602(t_10640468, key_10640469, hc_10655601, 0);
    if ((0 <= index_10665620)) {
    t_10640468.data[index_10665620].Field2 = nimCopy(null, val_10640471, NTI10625632);
    }
    else {
      if (((t_10640468.data).length == 0)) {
      var correctSizeHEX60gensym11_10675001 = slotsNeeded_10445048(32);
      t_10640468.counter = 0;
      t_10640468.data = new Array(correctSizeHEX60gensym11_10675001); for (var i=0;i<correctSizeHEX60gensym11_10675001;++i) {t_10640468.data[i]={Field0: 0, Field1: [], Field2: []};}      }
      
      if (mustRehash_10680601(t_10640468)) {
      enlarge_10705161(t_10640468);
      index_10665620 = rawGetKnownHC_10706594(t_10640468, key_10640469, hc_10655601[0]);
      }
      
      index_10665620 = (-1 - index_10665620);
      rawInsert_10706108(t_10640468, t_10640468, "data", key_10640469, val_10640471, hc_10655601[0], index_10665620);
      t_10640468.counter += 1;
    }
    

  
}
function rawGet_10725602(t_10725606, key_10725607, hc_10725608, hc_10725608_Idx) {
            var Tmp3;

  var result_10725609 = 0;

  BeforeRet: do {
    hc_10725608[hc_10725608_Idx] = hash_10420214(key_10725607);
    if ((hc_10725608[hc_10725608_Idx] == 0)) {
    hc_10725608[hc_10725608_Idx] = 314159265;
    }
    
    if (((t_10725606.data).length == 0)) {
    result_10725609 = -1;
    break BeforeRet;
    }
    
    var h_10735138 = (hc_10725608[hc_10725608_Idx] & (t_10725606.data).length - 1);
    L1: do {
        L2: while (true) {
        if (!isFilled_10441218(t_10725606.data[h_10735138].Field0)) break L2;
            if (!(t_10725606.data[h_10735138].Field0 == hc_10725608[hc_10725608_Idx])) Tmp3 = false; else {              Tmp3 = eqStrings(t_10725606.data[h_10735138].Field1, key_10725607);            }          if (Tmp3) {
          result_10725609 = h_10735138;
          break BeforeRet;
          }
          
          h_10735138 = nextTry_10445014(h_10735138, (t_10725606.data).length - 1);
        }
    } while(false);
    result_10725609 = (-1 - h_10735138);
  } while (false);

  return result_10725609;

}
function mustRehash_10750601(t_10750604) {
  var result_10750605 = false;

    result_10750605 = ((((t_10750604.data).length * 2) < (t_10750604.counter * 3)) || (((t_10750604.data).length - t_10750604.counter) < 4));

  return result_10750605;

}
function rawInsert_10776108(t_10776114, data_10776117, data_10776117_Idx, key_10776118, val_10776120, hc_10776121, h_10776122) {
    data_10776117[data_10776117_Idx][h_10776122].Field1 = nimCopy(null, key_10776118, NTI1188013);
    data_10776117[data_10776117_Idx][h_10776122].Field2 = nimCopy(null, val_10776120, NTI1188013);
    data_10776117[data_10776117_Idx][h_10776122].Field0 = hc_10776121;

  
}
function enlarge_10775161(t_10775167) {
    var n_10775175 = [];
    n_10775175 = new Array(((t_10775167.data).length * 2)); for (var i=0;i<((t_10775167.data).length * 2);++i) {n_10775175[i]={Field0: 0, Field1: [], Field2: []};}    var Tmp1 = t_10775167.data; t_10775167.data = n_10775175; n_10775175 = Tmp1;    L2: do {
      var i_10775334 = 0;
      var colontmp__10785155 = 0;
      colontmp__10785155 = (n_10775175).length - 1;
      var res_10785156 = 0;
      L3: do {
          L4: while (true) {
          if (!(res_10785156 <= colontmp__10785155)) break L4;
            i_10775334 = res_10785156;
            var eh_10775483 = n_10775175[i_10775334].Field0;
            if (isFilled_10441218(eh_10775483)) {
            var j_10775490 = (eh_10775483 & (t_10775167.data).length - 1);
            L5: do {
                L6: while (true) {
                if (!isFilled_10441218(t_10775167.data[j_10775490].Field0)) break L6;
                  j_10775490 = nextTry_10445014(j_10775490, (t_10775167.data).length - 1);
                }
            } while(false);
            rawInsert_10776108(t_10775167, t_10775167, "data", n_10775175[i_10775334].Field1, n_10775175[i_10775334].Field2, eh_10775483, j_10775490);
            }
            
            res_10785156 += 1;
          }
      } while(false);
    } while(false);

  
}
function rawGetKnownHC_10776594(t_10776598, key_10776599, hc_10776600) {
  var result_10776601 = 0;

  BeforeRet: do {
    if (((t_10776598.data).length == 0)) {
    result_10776601 = -1;
    break BeforeRet;
    }
    
    var h_10780138 = (hc_10776600 & (t_10776598.data).length - 1);
    L1: do {
        L2: while (true) {
        if (!isFilled_10441218(t_10776598.data[h_10780138].Field0)) break L2;
          if (((t_10776598.data[h_10780138].Field0 == hc_10776600) && eqStrings(t_10776598.data[h_10780138].Field1, key_10776599))) {
          result_10776601 = h_10780138;
          break BeforeRet;
          }
          
          h_10780138 = nextTry_10445014(h_10780138, (t_10776598.data).length - 1);
        }
    } while(false);
    result_10776601 = (-1 - h_10780138);
  } while (false);

  return result_10776601;

}
function HEX5BHEX5DHEX3D_10710768(t_10710774, key_10710775, val_10710777) {
    if (((t_10710774.data).length == 0)) {
    var correctSizeHEX60gensym20_10720001 = slotsNeeded_10445048(32);
    t_10710774.counter = 0;
    t_10710774.data = new Array(correctSizeHEX60gensym20_10720001); for (var i=0;i<correctSizeHEX60gensym20_10720001;++i) {t_10710774.data[i]={Field0: 0, Field1: [], Field2: []};}    }
    
    var hc_10725601 = [0];
    var index_10735620 = rawGet_10725602(t_10710774, key_10710775, hc_10725601, 0);
    if ((0 <= index_10735620)) {
    t_10710774.data[index_10735620].Field2 = nimCopy(null, val_10710777, NTI1188013);
    }
    else {
      if (((t_10710774.data).length == 0)) {
      var correctSizeHEX60gensym25_10745001 = slotsNeeded_10445048(32);
      t_10710774.counter = 0;
      t_10710774.data = new Array(correctSizeHEX60gensym25_10745001); for (var i=0;i<correctSizeHEX60gensym25_10745001;++i) {t_10710774.data[i]={Field0: 0, Field1: [], Field2: []};}      }
      
      if (mustRehash_10750601(t_10710774)) {
      enlarge_10775161(t_10710774);
      index_10735620 = rawGetKnownHC_10776594(t_10710774, key_10710775, hc_10725601[0]);
      }
      
      index_10735620 = (-1 - index_10735620);
      rawInsert_10776108(t_10710774, t_10710774, "data", key_10710775, val_10710777, hc_10725601[0], index_10735620);
      t_10710774.counter += 1;
    }
    

  
}
function HEX5BHEX5D_10780794(t_10780800, key_10780801) {
  var result_10780803 = null;
  var result_10780803_Idx = 0;

    var hcHEX60gensym22_10780804 = [0];
    var indexHEX60gensym22_10780813 = rawGet_10655602(t_10780800, key_10780801, hcHEX60gensym22_10780804, 0);
    if ((0 <= indexHEX60gensym22_10780813)) {
    result_10780803 = t_10780800.data[indexHEX60gensym22_10780813]; result_10780803_Idx = "Field2";
    }
    else {
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_10780801 || []), parent: null, m_type: NTI1194645, name: null, trace: [], up: null}, "KeyError");
    }
    

  return [result_10780803, result_10780803_Idx];

}
function parseGroup(data_10640281, alleles_10640290, groups_10640301) {
            var Tmp6;
              var Tmp8;
                      var Tmp12;

    var fields_10640318 = newSeq_1840232(0);
    L1: do {
      var line_10640319 = [];
      var first_10785087 = 0;
      var last_10785088 = 0;
      var eolpos_10785089 = 0;
      L2: do {
          L3: while (true) {
          if (!true) break L3;
            L4: do {
                L5: while (true) {
                if (!((last_10785088 < (data_10640281).length) && !((ConstSet1[data_10640281[last_10785088]] != undefined)))) break L5;
                  last_10785088 += 1;
                }
            } while(false);
            eolpos_10785089 = last_10785088;
            if ((last_10785088 < (data_10640281).length)) {
            if ((data_10640281[last_10785088] == 10)) {
            last_10785088 += 1;
            }
            else {
            if ((data_10640281[last_10785088] == 13)) {
            last_10785088 += 1;
            if (((last_10785088 < (data_10640281).length) && (data_10640281[last_10785088] == 10))) {
            last_10785088 += 1;
            }
            
            }
            }
            }
            
            if (false) {
            Tmp6 = (last_10785088 - 1);
            }
            else {
            Tmp6 = (eolpos_10785089 - 1);
            }
            
            line_10640319 = substr_1571022(data_10640281, first_10785087, Tmp6);
            L7: do {
              if (startsWith_9965248(line_10640319, 35)) {
              outputMeta_10635702(line_10640319);
              break L7;
              }
              
              fields_10640318 = nimCopy(null, nsuSplitChar(line_10640319, 59, -1), NTI9625037);
              if (((fields_10640318).length < 3)) {
              break L7;
              }
              
              var locus_10640325 = nimCopy(null, fields_10640318[0], NTI1188013);
              var members_10640326 = nsuSplitChar(fields_10640318[1], 47, -1);
              if (((fields_10640318[2]).length == 0)) {
              Tmp8 = (locus_10640325 || []).concat(members_10640326[0] || []);
              }
              else {
              Tmp8 = (locus_10640325 || []).concat(fields_10640318[2] || []);
              }
              
              var group_10640327 = nimCopy(null, Tmp8, NTI1188013);
              HEX5BHEX5DHEX3D_10640462(groups_10640301, group_10640327, []);
              L9: do {
                var allele_10710657 = null;
                var allele_10710657_Idx = 0;
                var i_10785082 = 0;
                var L_10785083 = (members_10640326).length;
                L10: do {
                    L11: while (true) {
                    if (!(i_10785082 < L_10785083)) break L11;
                      allele_10710657 = members_10640326; allele_10710657_Idx = i_10785082;
                      var name_10710658 = (locus_10640325 || []).concat(allele_10710657[allele_10710657_Idx] || []);
                      HEX5BHEX5DHEX3D_10710768(alleles_10640290, name_10710658, group_10640327);
                      var Tmp13 = nimCopy(null, name_10710658, NTI1188013);
                      (Tmp12 = HEX5BHEX5D_10780794(groups_10640301, group_10640327), Tmp12)[0][Tmp12[1]].push(Tmp13);;
                      i_10785082 += 1;
                    }
                } while(false);
              } while(false);
            } while(false);
            if ((eolpos_10785089 == last_10785088)) {
            break L2;
            }
            
            first_10785087 = last_10785088;
          }
      } while(false);
    } while(false);

  
}
function initGgroupData(gdata_10785165) {
    parseGroup(cstrToNimstr(gdata_10785165), galleles_10625629[0], ggroups_10635629[0]);

  
}
function initPgroupData(pdata_10785183) {
    parseGroup(cstrToNimstr(pdata_10785183), palleles_10635638[0], pgroups_10635649[0]);

  
}
function nsuStartsWith(s_9970016, prefix_9970017) {
            var Tmp3;

  var result_9970018 = false;

  BeforeRet: do {
    var i_9970020 = 0;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          if (((prefix_9970017).length <= i_9970020)) {
          result_9970018 = true;
          break BeforeRet;
          }
          
            if (((s_9970016).length <= i_9970020)) Tmp3 = true; else {              Tmp3 = !((s_9970016[i_9970020] == prefix_9970017[i_9970020]));            }          if (Tmp3) {
          result_9970018 = false;
          break BeforeRet;
          }
          
          i_9970020 += 1;
        }
    } while(false);
  } while (false);

  return result_9970018;

}
function initAlleleIdData(alleleData_10785201) {
            var Tmp6;

    var fields_10785203 = [];
    L1: do {
      var line_10785204 = [];
      var colontmp__10790141 = [];
      colontmp__10790141 = cstrToNimstr(alleleData_10785201);
      var first_10790142 = 0;
      var last_10790143 = 0;
      var eolpos_10790144 = 0;
      L2: do {
          L3: while (true) {
          if (!true) break L3;
            L4: do {
                L5: while (true) {
                if (!((last_10790143 < (colontmp__10790141).length) && !((ConstSet3[colontmp__10790141[last_10790143]] != undefined)))) break L5;
                  last_10790143 += 1;
                }
            } while(false);
            eolpos_10790144 = last_10790143;
            if ((last_10790143 < (colontmp__10790141).length)) {
            if ((colontmp__10790141[last_10790143] == 10)) {
            last_10790143 += 1;
            }
            else {
            if ((colontmp__10790141[last_10790143] == 13)) {
            last_10790143 += 1;
            if (((last_10790143 < (colontmp__10790141).length) && (colontmp__10790141[last_10790143] == 10))) {
            last_10790143 += 1;
            }
            
            }
            }
            }
            
            if (false) {
            Tmp6 = (last_10790143 - 1);
            }
            else {
            Tmp6 = (eolpos_10790144 - 1);
            }
            
            line_10785204 = substr_1571022(colontmp__10790141, first_10790142, Tmp6);
            L7: do {
              if (nsuStartsWith(line_10785204, makeNimstrLit("#"))) {
              outputMeta_10635702(line_10785204);
              break L7;
              }
              
              if (nsuStartsWith(line_10785204, makeNimstrLit("AlleleID"))) {
              break L7;
              }
              
              fields_10785203 = nimCopy(null, nsuSplitChar(line_10785204, 44, -1), NTI9625037);
              if (!(((fields_10785203).length == 2))) {
              break L7;
              }
              
              HEX5BHEX5DHEX3D_10710768(alleleIDs_10635658[0], fields_10785203[1], fields_10785203[0]);
            } while(false);
            if ((eolpos_10790144 == last_10790143)) {
            break L2;
            }
            
            first_10790142 = last_10790143;
          }
      } while(false);
    } while(false);

  
}
function nsuStrip(s_10315118, leading_10315119, trailing_10315120, chars_10315122) {
          var Tmp5;

  var result_10315123 = [];

    var first_10315125 = 0;
    var last_10315126 = ((s_10315118).length - 1);
    if (leading_10315119) {
    L1: do {
        L2: while (true) {
        if (!((first_10315125 <= last_10315126) && (chars_10315122[s_10315118[first_10315125]] != undefined))) break L2;
          first_10315125 += 1;
        }
    } while(false);
    }
    
    if (trailing_10315120) {
    L3: do {
        L4: while (true) {
          if (!(0 <= last_10315126)) Tmp5 = false; else {            Tmp5 = (chars_10315122[s_10315118[last_10315126]] != undefined);          }        if (!Tmp5) break L4;
          last_10315126 -= 1;
        }
    } while(false);
    }
    
    result_10315123 = nimCopy(null, substr_1571022(s_10315118, first_10315125, last_10315126), NTI1188013);

  return result_10315123;

}
function nsuToUpperAsciiChar(c_9380016) {
  var result_9380017 = 0;

    if ((ConstSet4[c_9380016] != undefined)) {
    result_9380017 = (c_9380016 - 32);
    }
    else {
      result_9380017 = c_9380016;
    }
    

  return result_9380017;

}
function nsuToUpperAsciiStr(s_9385037) {
  var result_9385038 = [];

    result_9385038 = nimCopy(null, mnewString((s_9385037).length), NTI1188013);
    L1: do {
      var iHEX60gensym11_9390009 = 0;
      var colontmp__11000043 = 0;
      colontmp__11000043 = ((s_9385037).length - 1);
      var res_11000044 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_11000044 <= colontmp__11000043)) break L3;
            iHEX60gensym11_9390009 = res_11000044;
            result_9385038[iHEX60gensym11_9390009] = nsuToUpperAsciiChar(s_9385037[iHEX60gensym11_9390009]);
            res_11000044 += 1;
          }
      } while(false);
    } while(false);

  return result_9385038;

}
function hasKey_10915127(t_10915132, key_10915133) {
  var result_10915134 = false;

    var hc_10915135 = [0];
    result_10915134 = (0 <= rawGet_10725602(t_10915132, key_10915133, hc_10915135, 0));

  return result_10915134;

}
function contains_10915117(t_10915122, key_10915123) {
  var result_10915124 = false;

  BeforeRet: do {
    result_10915124 = hasKey_10915127(t_10915122, key_10915123);
    break BeforeRet;
  } while (false);

  return result_10915124;

}
function clearForm_10790165() {
    document.getElementById("alleleinfo").innerHTML = "";
    document.getElementById("helptext").innerHTML = "";
    document.getElementById("pgroup").innerHTML = "";
    document.getElementById("pgrouplen").innerHTML = "";
    document.getElementById("pother").innerHTML = "";
    document.getElementById("ggroup").innerHTML = "";
    document.getElementById("ggrouplen").innerHTML = "";
    document.getElementById("gother").innerHTML = "";

  
}
function HEX5BHEX5D_10925145(t_10925151, key_10925152) {
  var result_10925154 = null;
  var result_10925154_Idx = 0;

    var hcHEX60gensym22_10925155 = [0];
    var indexHEX60gensym22_10925164 = rawGet_10725602(t_10925151, key_10925152, hcHEX60gensym22_10925155, 0);
    if ((0 <= indexHEX60gensym22_10925164)) {
    result_10925154 = t_10925151.data[indexHEX60gensym22_10925164]; result_10925154_Idx = "Field2";
    }
    else {
      raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_10925152 || []), parent: null, m_type: NTI1194645, name: null, trace: [], up: null}, "KeyError");
    }
    

  return [result_10925154, result_10925154_Idx];

}
function find_10835009(a_10835013, item_10835014) {
  var result_10835015 = 0;

  BeforeRet: do {
    result_10835015 = 0;
    L1: do {
      var i_10835046 = 0;
      var i_11000068 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11000068 < (a_10835013).length)) break L3;
            i_10835046 = a_10835013[i_11000068];
            if ((i_10835046 == item_10835014)) {
            break BeforeRet;
            }
            
            result_10835015 += 1;
            i_11000068 += 1;
          }
      } while(false);
    } while(false);
    result_10835015 = -1;
  } while (false);

  return result_10835015;

}
function contains_10835002(a_10835006, item_10835007) {
  var result_10835008 = false;

  BeforeRet: do {
    result_10835008 = (0 <= find_10835009(a_10835006, item_10835007));
    break BeforeRet;
  } while (false);

  return result_10835008;

}
function find_9890009(a_9890013, item_9890014) {
  var result_9890015 = 0;

  BeforeRet: do {
    result_9890015 = 0;
    L1: do {
      var i_9890022 = null;
      var i_9890022_Idx = 0;
      var i_11000072 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_11000072 < (a_9890013).length)) break L3;
            i_9890022 = a_9890013; i_9890022_Idx = i_11000072;
            if (eqStrings(i_9890022[i_9890022_Idx], item_9890014)) {
            break BeforeRet;
            }
            
            result_9890015 += 1;
            i_11000072 += 1;
          }
      } while(false);
    } while(false);
    result_9890015 = -1;
  } while (false);

  return result_9890015;

}
function contains_9890002(a_9890006, item_9890007) {
  var result_9890008 = false;

  BeforeRet: do {
    result_9890008 = (0 <= find_9890009(a_9890006, item_9890007));
    break BeforeRet;
  } while (false);

  return result_9890008;

}
function invalidFormatString_10265046() {
    raiseException({message: makeNimstrLit("invalid format string"), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");

  
}
function nsuToLowerAsciiChar(c_9360023) {
  var result_9360024 = 0;

    if ((ConstSet9[c_9360023] != undefined)) {
    result_9360024 = (c_9360023 + 32);
    }
    else {
      result_9360024 = c_9360023;
    }
    

  return result_9360024;

}
function nsuCmpIgnoreStyle(a_9440022, b_9440023) {
          var Tmp7;
          var Tmp8;

  var result_9440024 = 0;

  BeforeRet: do {
    var i_9440026 = 0;
    var j_9440028 = 0;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          L3: do {
              L4: while (true) {
              if (!((i_9440026 < (a_9440022).length) && (a_9440022[i_9440026] == 95))) break L4;
                i_9440026 += 1;
              }
          } while(false);
          L5: do {
              L6: while (true) {
              if (!((j_9440028 < (b_9440023).length) && (b_9440023[j_9440028] == 95))) break L6;
                j_9440028 += 1;
              }
          } while(false);
          if ((i_9440026 < (a_9440022).length)) {
          Tmp7 = nsuToLowerAsciiChar(a_9440022[i_9440026]);
          }
          else {
          Tmp7 = 0;
          }
          
          var aa_9440041 = Tmp7;
          if ((j_9440028 < (b_9440023).length)) {
          Tmp8 = nsuToLowerAsciiChar(b_9440023[j_9440028]);
          }
          else {
          Tmp8 = 0;
          }
          
          var bb_9440042 = Tmp8;
          result_9440024 = (aa_9440041 - bb_9440042);
          if (!((result_9440024 == 0))) {
          break BeforeRet;
          }
          
          if (((a_9440022).length <= i_9440026)) {
          if (((b_9440023).length <= j_9440028)) {
          result_9440024 = 0;
          break BeforeRet;
          }
          
          result_9440024 = -1;
          break BeforeRet;
          }
          else {
          if (((b_9440023).length <= j_9440028)) {
          result_9440024 = 1;
          break BeforeRet;
          }
          }
          i_9440026 += 1;
          j_9440028 += 1;
        }
    } while(false);
  } while (false);

  return result_9440024;

}
function findNormalized_10265014(x_10265016, inArray_10265018) {
  var result_10265019 = 0;

  BeforeRet: do {
    var i_10265021 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_10265021 < (inArray_10265018).length - 1)) break L2;
          if ((nsuCmpIgnoreStyle(x_10265016, inArray_10265018[i_10265021]) == 0)) {
          result_10265019 = i_10265021;
          break BeforeRet;
          }
          
          i_10265021 += 2;
        }
    } while(false);
    result_10265019 = -1;
    break BeforeRet;
  } while (false);

  return result_10265019;

}
function nsuAddf(s_10270018, s_10270018_Idx, formatstr_10270019, a_10270021) {
                  var Tmp5;
            var Tmp6;
              var Tmp7;
            var Tmp10;
              var Tmp11;
                var Tmp12;
                  var Tmp15;
              var Tmp16;

    var i_10270025 = 0;
    var num_10270027 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_10270025 < (formatstr_10270019).length)) break L2;
          if (((formatstr_10270019[i_10270025] == 36) && ((i_10270025 + 1) < (formatstr_10270019).length))) {
          switch (formatstr_10270019[(i_10270025 + 1)]) {
          case 35:
            if (((a_10270021).length - 1 < num_10270027)) {
            invalidFormatString_10265046();
            }
            
            s_10270018[s_10270018_Idx].push.apply(s_10270018[s_10270018_Idx], a_10270021[num_10270027]);;
            i_10270025 += 2;
            num_10270027 += 1;
            break;
          case 36:
            addChar(s_10270018[s_10270018_Idx], 36);;
            i_10270025 += 2;
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            var j_10275025 = 0;
            i_10270025 += 1;
            var negative_10275032 = (formatstr_10270019[i_10270025] == 45);
            if (negative_10275032) {
            i_10270025 += 1;
            }
            
            L3: do {
                L4: while (true) {
                  if (!(i_10270025 < (formatstr_10270019).length)) Tmp5 = false; else {                    Tmp5 = (ConstSet6[formatstr_10270019[i_10270025]] != undefined);                  }                if (!Tmp5) break L4;
                  j_10275025 = (((j_10275025 * 10) + formatstr_10270019[i_10270025]) - 48);
                  i_10270025 += 1;
                }
            } while(false);
            if (!(negative_10275032)) {
            Tmp6 = (j_10275025 - 1);
            }
            else {
            Tmp6 = ((a_10270021).length - j_10275025);
            }
            
            var idx_10280025 = Tmp6;
              if ((idx_10280025 < 0)) Tmp7 = true; else {                Tmp7 = ((a_10270021).length - 1 < idx_10280025);              }            if (Tmp7) {
            invalidFormatString_10265046();
            }
            
            s_10270018[s_10270018_Idx].push.apply(s_10270018[s_10270018_Idx], a_10270021[idx_10280025]);;
            break;
          case 123:
            var j_10285006 = (i_10270025 + 2);
            var k_10285008 = 0;
            var negative_10285009 = (formatstr_10270019[j_10285006] == 45);
            if (negative_10285009) {
            j_10285006 += 1;
            }
            
            var isNumber_10285017 = 0;
            L8: do {
                L9: while (true) {
                if (!((j_10285006 < (formatstr_10270019).length) && !((ConstSet7[formatstr_10270019[j_10285006]] != undefined)))) break L9;
                  if ((ConstSet8[formatstr_10270019[j_10285006]] != undefined)) {
                  k_10285008 = (((k_10285008 * 10) + formatstr_10270019[j_10285006]) - 48);
                  if ((isNumber_10285017 == 0)) {
                  isNumber_10285017 = 1;
                  }
                  
                  }
                  else {
                    isNumber_10285017 = -1;
                  }
                  
                  j_10285006 += 1;
                }
            } while(false);
            if ((isNumber_10285017 == 1)) {
            if (!(negative_10285009)) {
            Tmp10 = (k_10285008 - 1);
            }
            else {
            Tmp10 = ((a_10270021).length - k_10285008);
            }
            
            var idx_10295025 = Tmp10;
              if ((idx_10295025 < 0)) Tmp11 = true; else {                Tmp11 = ((a_10270021).length - 1 < idx_10295025);              }            if (Tmp11) {
            invalidFormatString_10265046();
            }
            
            s_10270018[s_10270018_Idx].push.apply(s_10270018[s_10270018_Idx], a_10270021[idx_10295025]);;
            }
            else {
              var x_10300006 = findNormalized_10265014(substr_1571022(formatstr_10270019, (i_10270025 + 2), (j_10285006 - 1)), a_10270021);
                if (!(0 <= x_10300006)) Tmp12 = false; else {                  Tmp12 = (x_10300006 < (a_10270021).length - 1);                }              if (Tmp12) {
              s_10270018[s_10270018_Idx].push.apply(s_10270018[s_10270018_Idx], a_10270021[(x_10300006 + 1)]);;
              }
              else {
              invalidFormatString_10265046();
              }
              
            }
            
            i_10270025 = (j_10285006 + 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            var j_10305006 = (i_10270025 + 1);
            L13: do {
                L14: while (true) {
                  if (!(j_10305006 < (formatstr_10270019).length)) Tmp15 = false; else {                    Tmp15 = (ConstSet10[formatstr_10270019[j_10305006]] != undefined);                  }                if (!Tmp15) break L14;
                  j_10305006 += 1;
                }
            } while(false);
            var x_10310013 = findNormalized_10265014(substr_1571022(formatstr_10270019, (i_10270025 + 1), (j_10305006 - 1)), a_10270021);
              if (!(0 <= x_10310013)) Tmp16 = false; else {                Tmp16 = (x_10310013 < (a_10270021).length - 1);              }            if (Tmp16) {
            s_10270018[s_10270018_Idx].push.apply(s_10270018[s_10270018_Idx], a_10270021[(x_10310013 + 1)]);;
            }
            else {
            invalidFormatString_10265046();
            }
            
            i_10270025 = j_10305006;
            break;
          default: 
            invalidFormatString_10265046();
            break;
          }
          }
          else {
            addChar(s_10270018[s_10270018_Idx], formatstr_10270019[i_10270025]);;
            i_10270025 += 1;
          }
          
        }
    } while(false);

  
}
function nsuFormatOpenArray(formatstr_10315027, a_10315029) {
  var result_10315030 = [[]];

    result_10315030[0] = nimCopy(null, mnewString(0), NTI1188013);
    nsuAddf(result_10315030, 0, formatstr_10315027, a_10315029);

  return result_10315030[0];

}
function nsuJoinSep(a_10055018, sep_10055019) {
  var result_10055020 = [];

    if ((0 < (a_10055018).length)) {
    var L_10060009 = ((sep_10055019).length * ((a_10055018).length - 1));
    L1: do {
      var i_10060023 = 0;
      var colontmp__11000084 = 0;
      colontmp__11000084 = (a_10055018).length - 1;
      var res_11000085 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_11000085 <= colontmp__11000084)) break L3;
            i_10060023 = res_11000085;
            L_10060009 += (a_10055018[i_10060023]).length;
            res_11000085 += 1;
          }
      } while(false);
    } while(false);
    result_10055020 = nimCopy(null, mnewString(0), NTI1188013);
    result_10055020.push.apply(result_10055020, a_10055018[0]);;
    L4: do {
      var i_10060043 = 0;
      var colontmp__11000091 = 0;
      colontmp__11000091 = (a_10055018).length - 1;
      var res_11000092 = 1;
      L5: do {
          L6: while (true) {
          if (!(res_11000092 <= colontmp__11000091)) break L6;
            i_10060043 = res_11000092;
            result_10055020.push.apply(result_10055020, sep_10055019);;
            result_10055020.push.apply(result_10055020, a_10055018[i_10060043]);;
            res_11000092 += 1;
          }
      } while(false);
    } while(false);
    }
    else {
      result_10055020 = nimCopy(null, [], NTI1188013);
    }
    

  return result_10055020;

}
function len_10860151(t_10860156) {
  var result_10860157 = 0;

    result_10860157 = t_10860156.counter;

  return result_10860157;

}
function lookForAlternateAllele_10830033(allele_10830035) {
    var Tmp1;
    var Tmp7;

  BeforeRet: do {
    clearForm_10790165();
    if (!(contains_10835002(allele_10830035, 42))) {
    document.getElementById("helptext").innerHTML = "<br>\nAnge locus i allelnamn, t.ex. A*01:01:01:01";
    break BeforeRet;
    }
    
    var locus_10845001 = nimCopy(null, (Tmp1 = nsuSplitChar(allele_10830035, 42, -1), Tmp1)[0], NTI1188013);
    if (!(contains_9890002(loci_10830038, locus_10845001))) {
    document.getElementById("helptext").innerHTML = toJSStr((makeNimstrLit("<br>\x0A") || []).concat(nsuFormatOpenArray(makeNimstrLit("Ok\xC3\xA4nt locus \'$#\', k\xC3\xA4nda loci \xC3\xA4r:<br>\x0A$#"), [nimCopy(null, locus_10845001, NTI1188013), nsuJoinSep(loci_10830038, makeNimstrLit(", "))]) || []));
    break BeforeRet;
    }
    
    var cand_10860018 = newSeq_1840232(0);
    L2: do {
      var key_10870214 = [];
      var L_11000058 = len_10860151(galleles_10625629[0]);
      L3: do {
        var h_11000060 = 0;
        var colontmp__11000061 = 0;
        colontmp__11000061 = (galleles_10625629[0].data).length - 1;
        var res_11000062 = 0;
        L4: do {
            L5: while (true) {
            if (!(res_11000062 <= colontmp__11000061)) break L5;
              h_11000060 = res_11000062;
              if (isFilled_10441218(galleles_10625629[0].data[h_11000060].Field0)) {
              key_10870214 = galleles_10625629[0].data[h_11000060].Field1;
              if (nsuStartsWith(key_10870214, allele_10830035)) {
              var Tmp6 = nimCopy(null, key_10870214, NTI1188013);
              cand_10860018.push(Tmp6);;
              if ((10 < (cand_10860018).length)) {
              break L2;
              }
              
              }
              
              }
              
              res_11000062 += 1;
            }
        } while(false);
      } while(false);
    } while(false);
    if ((0 < (cand_10860018).length)) {
    if ((10 < (cand_10860018).length)) {
    Tmp7 = makeNimstrLit("...");
    }
    else {
    Tmp7 = [];
    }
    
    document.getElementById("helptext").innerHTML = toJSStr((makeNimstrLit("<br>\x0A") || []).concat(nsuFormatOpenArray(makeNimstrLit("Mer specifik fr\xC3\xA5ga beh\xC3\xB6vs, ange t.ex. n\xC3\xA5gon av:<br>\x0A$#\x0A<br>$#"), [nsuJoinSep(cand_10860018, makeNimstrLit("<br>\x0A")), nimCopy(null, Tmp7, NTI1188013)]) || []));
    break BeforeRet;
    }
    
    document.getElementById("helptext").innerHTML = "<br>\nOkänd allel, ange alleler som t.ex. A*01:01:01:01";
  } while (false);

  
}
function lookupAllele() {
    var Tmp1;
    var Tmp2;
    var Tmp3;
      var Tmp5;
            var Tmp8;
    var Tmp10;
    var Tmp11;
      var Tmp13;
            var Tmp16;

  BeforeRet: do {
    var allele_10910001 = nsuStrip(nsuToUpperAsciiStr(cstrToNimstr(document.getElementById("allele").value)), true, true, ConstSet5);
    if ((contains_10915117(galleles_10625629[0], allele_10910001) || contains_10915117(palleles_10635638[0], allele_10910001))) {
    clearForm_10790165();
    var alleleIDHEX60gensym61_10930028 = nimCopy(null, (Tmp1 = HEX5BHEX5D_10925145(alleleIDs_10635658[0], allele_10910001), Tmp1)[0][Tmp1[1]], NTI1188013);
    document.getElementById("alleleinfo").innerHTML = toJSStr((makeNimstrLit("<a href=\"https://www.ebi.ac.uk/ipd/imgt/hla/alleles/allele/?accession=") || []).concat(alleleIDHEX60gensym61_10930028 || [],makeNimstrLit("\">") || [],allele_10910001 || [],makeNimstrLit("</a>") || []));
    }
    else {
      lookForAlternateAllele_10830033(allele_10910001);
      break BeforeRet;
    }
    
    if (contains_10915117(palleles_10635638[0], allele_10910001)) {
    var pgroup_10945278 = nimCopy(null, (Tmp2 = HEX5BHEX5D_10925145(palleles_10635638[0], allele_10910001), Tmp2)[0][Tmp2[1]], NTI1188013);
    document.getElementById("pgroup").innerHTML = toJSStr(pgroup_10945278);
    document.getElementById("pgrouplen").innerHTML = toJSStr(cstrToNimstr((((Tmp3 = HEX5BHEX5D_10780794(pgroups_10635649[0], pgroup_10945278), Tmp3)[0][Tmp3[1]]).length)+""));
    var alleleLinks_10955017 = newSeq_1840232(0);
    L4: do {
      var otherAllele_10955179 = null;
      var otherAllele_10955179_Idx = 0;
      var colontmp__11000031 = [];
      colontmp__11000031 = (Tmp5 = HEX5BHEX5D_10780794(pgroups_10635649[0], pgroup_10945278), Tmp5)[0][Tmp5[1]];
      var i_11000032 = 0;
      var L_11000033 = (colontmp__11000031).length;
      L6: do {
          L7: while (true) {
          if (!(i_11000032 < L_11000033)) break L7;
            otherAllele_10955179 = colontmp__11000031; otherAllele_10955179_Idx = i_11000032;
            var alleleIDHEX60gensym67_10960155 = nimCopy(null, (Tmp8 = HEX5BHEX5D_10925145(alleleIDs_10635658[0], otherAllele_10955179[otherAllele_10955179_Idx]), Tmp8)[0][Tmp8[1]], NTI1188013);
            var Tmp9 = nimCopy(null, (makeNimstrLit("<a href=\"https://www.ebi.ac.uk/ipd/imgt/hla/alleles/allele/?accession=") || []).concat(alleleIDHEX60gensym67_10960155 || [],makeNimstrLit("\">") || [],otherAllele_10955179[otherAllele_10955179_Idx] || [],makeNimstrLit("</a>") || []), NTI1188013);
            alleleLinks_10955017.push(Tmp9);;
            i_11000032 += 1;
          }
      } while(false);
    } while(false);
    document.getElementById("pother").innerHTML = toJSStr(nsuJoinSep(alleleLinks_10955017, makeNimstrLit(" ")));
    }
    
    if (contains_10915117(galleles_10625629[0], allele_10910001)) {
    var ggroup_10975278 = nimCopy(null, (Tmp10 = HEX5BHEX5D_10925145(galleles_10625629[0], allele_10910001), Tmp10)[0][Tmp10[1]], NTI1188013);
    document.getElementById("ggroup").innerHTML = toJSStr(ggroup_10975278);
    document.getElementById("ggrouplen").innerHTML = toJSStr(cstrToNimstr((((Tmp11 = HEX5BHEX5D_10780794(ggroups_10635629[0], ggroup_10975278), Tmp11)[0][Tmp11[1]]).length)+""));
    var alleleLinks_10985017 = newSeq_1840232(0);
    L12: do {
      var otherAllele_10985179 = null;
      var otherAllele_10985179_Idx = 0;
      var colontmp__11000036 = [];
      colontmp__11000036 = (Tmp13 = HEX5BHEX5D_10780794(ggroups_10635629[0], ggroup_10975278), Tmp13)[0][Tmp13[1]];
      var i_11000037 = 0;
      var L_11000038 = (colontmp__11000036).length;
      L14: do {
          L15: while (true) {
          if (!(i_11000037 < L_11000038)) break L15;
            otherAllele_10985179 = colontmp__11000036; otherAllele_10985179_Idx = i_11000037;
            var alleleIDHEX60gensym72_10990155 = nimCopy(null, (Tmp16 = HEX5BHEX5D_10925145(alleleIDs_10635658[0], otherAllele_10985179[otherAllele_10985179_Idx]), Tmp16)[0][Tmp16[1]], NTI1188013);
            var Tmp17 = nimCopy(null, (makeNimstrLit("<a href=\"https://www.ebi.ac.uk/ipd/imgt/hla/alleles/allele/?accession=") || []).concat(alleleIDHEX60gensym72_10990155 || [],makeNimstrLit("\">") || [],otherAllele_10985179[otherAllele_10985179_Idx] || [],makeNimstrLit("</a>") || []), NTI1188013);
            alleleLinks_10985017.push(Tmp17);;
            i_11000037 += 1;
          }
      } while(false);
    } while(false);
    document.getElementById("gother").innerHTML = toJSStr(nsuJoinSep(alleleLinks_10985017, makeNimstrLit(" ")));
    }
    
  } while (false);

  
}
