/* Generated by the Nim Compiler v0.17.2 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI3448 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3450 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI59214 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI36161 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI36179 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI36224 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3506 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3501 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3446.node = NNI3446;
NTI3501.base = NTI3424;
NTI3506.base = NTI3424;
var NNI3424 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3501, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3506, name: "up", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3446.base = NTI3424;
NTI36224.base = NTI138;
NTI36179.base = NTI138;
NTI36161.base = NTI138;
NTI59214.base = NTI138;
var NNI3450 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3450.node = NNI3450;
var NNI3448 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3448.node = NNI3448;
NTI3448.base = NTI3424;
NTI3450.base = NTI3448;

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(0, 13, 10);
var ConstSet2 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_19817, src_19818, ti_19819) {
	var result_20229 = null;

		switch (ti_19819.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_19801(ti_19819))) {
			result_20229 = src_19818;
			}
			else {
				result_20229 = [src_19818[0], src_19818[1]];
			}
			
			break;
		case 19:
			      if (dest_19817 === null || dest_19817 === undefined) {
        dest_19817 = {};
      }
      else {
        for (var key in dest_19817) { delete dest_19817[key]; }
      }
      for (var key in src_19818) { dest_19817[key] = src_19818[key]; }
      result_20229 = dest_19817;
    
			break;
		case 18:
		case 17:
			if (!((ti_19819.base == null))) {
			result_20229 = nimCopy(dest_19817, src_19818, ti_19819.base);
			}
			else {
			if ((ti_19819.kind == 17)) {
			result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {m_type: ti_19819} : dest_19817;
			}
			else {
				result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {} : dest_19817;
			}
			}
			nimCopyAux(result_20229, src_19818, ti_19819.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_19818 === null) {
        result_20229 = null;
      }
      else {
        if (dest_19817 === null || dest_19817 === undefined) {
          dest_19817 = new Array(src_19818.length);
        }
        else {
          dest_19817.length = src_19818.length;
        }
        result_20229 = dest_19817;
        for (var i = 0; i < src_19818.length; ++i) {
          result_20229[i] = nimCopy(result_20229[i], src_19818[i], ti_19819.base);
        }
      }
    
			break;
		case 28:
			      if (src_19818 !== null) {
        result_20229 = src_19818.slice(0);
      }
    
			break;
		default: 
			result_20229 = src_19818;
			break;
		}

	return result_20229;

}

function makeNimstrLit(c_14603) {
		    var ln = c_14603.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14603.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function eqStrings(a_17203, b_17204) {
		    if (a_17203 == b_17204) return true;
    if ((!a_17203) || (!b_17204)) return false;
    var alen = a_17203.length;
    if (alen != b_17204.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17203[i] != b_17204[i]) return false;
    return true;
  

	
}

function toJSStr(s_15003) {
		    var len = s_15003.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15003[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15003[i] < 128)
        asciiPart[i] = fcc(s_15003[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14006, ename_14007) {
		e_14006.name = ename_14007;
		if ((excHandler == 0)) {
		unhandledException(e_14006);
		}
		
		throw e_14006;

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}

function mnewString(len_15203) {
		      var result = new Array(len_15203+1);
      result[0] = 0;
      result[len_15203] = 0;
      return result;
    

	
}

function cstrToNimstr(c_14803) {
		  var ln = c_14803.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14803.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_14803.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}
var ConstSet3 = setConstr([97, 122]);
var ConstSet4 = setConstr(32, 9, 11, 13, 10, 12);

function addChar(x_20506, c_20507) {
		    x_20506[x_20506.length-1] = c_20507; x_20506.push(0);
  

	
}
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr(0, 125);
var ConstSet7 = setConstr([65, 90]);
var ConstSet8 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
var nimvm_6119 = false;
var nim_program_result = 0;
var globalRaiseHook_11605 = [null];
var localRaiseHook_11610 = [null];
var outOfMemHook_11613 = [null];
var objectID_42232 = [0];

function initTable_59004(initialSize_59009) {
	var result_59030 = {data: null, counter: 0};

		result_59030.counter = 0;
		result_59030.data = new Array(initialSize_59009); for (var i=0;i<initialSize_59009;++i) {result_59030.data[i]={Field0: 0, Field1: null, Field2: null};}
	return result_59030;

}

function initTable_59217(initialSize_59222) {
	var result_59243 = {data: null, counter: 0};

		result_59243.counter = 0;
		result_59243.data = new Array(initialSize_59222); for (var i=0;i<initialSize_59222;++i) {result_59243.data[i]={Field0: 0, Field1: null, Field2: null};}
	return result_59243;

}
var galleles_59211 = [initTable_59004(64)];
var ggroups_59411 = [initTable_59217(64)];
var palleles_59422 = [initTable_59004(64)];
var pgroups_59435 = [initTable_59217(64)];

function newSeq_59480(len_59484) {
	var result_59486 = null;

		result_59486 = new Array(len_59484); for (var i=0;i<len_59484;++i) {result_59486[i]=null;}
	return result_59486;

}

function startsWith_37524(s_37526, prefix_37527) {
	var result_37528 = false;

		result_37528 = (s_37526[0] == prefix_37527);

	return result_37528;

}

function isFatPointer_19801(ti_19803) {
	var result_19804 = false;

	BeforeRet: do {
		result_19804 = !((ConstSet2[ti_19803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_19804;

}

function nimCopyAux(dest_19822, src_19823, n_19825) {
		switch (n_19825.kind) {
		case 0:
			break;
		case 1:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
    
			break;
		case 2:
			L1: do {
				var i_20215 = 0;
				var colontmp__20217 = 0;
				colontmp__20217 = (n_19825.len - 1);
				var res_20220 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20220 <= colontmp__20217)) break L3;
							i_20215 = res_20220;
							nimCopyAux(dest_19822, src_19823, n_19825.sons[i_20215]);
							res_20220 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
      for (var i = 0; i < n_19825.sons.length; ++i) {
        nimCopyAux(dest_19822, src_19823, n_19825.sons[i][1]);
      }
    
			break;
		}

	
}

function add_11629(x_11632, x_11632_Idx, y_11633) {
		        var len = x_11632[0].length-1;
        for (var i = 0; i < y_11633.length; ++i) {
          x_11632[0][len] = y_11633.charCodeAt(i);
          ++len;
        }
        x_11632[0][len] = 0
      

	
}

function unhandledException(e_13853) {
			var Tmp1;

		var buf_13854 = [makeNimstrLit("")];
			if (!!(eqStrings(e_13853.message, null))) Tmp1 = false; else {				Tmp1 = !((e_13853.message[0] == 0));			}		if (Tmp1) {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(e_13853.message); } else { buf_13854[0] = e_13853.message;};
		}
		else {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_13854[0] = makeNimstrLit(" [");};
		add_11629(buf_13854, 0, e_13853.name);
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_13854[0] = makeNimstrLit("]\x0A");};
		var cbuf_14001 = toJSStr(buf_13854[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14001);
  }
  else {
    throw cbuf_14001;
  }
  

	
}

function sysFatal_22421(message_22427) {
		var e_22429 = null;
		e_22429 = {m_type: NTI3446, parent: null, name: null, message: null, trace: null, up: null};
		e_22429.message = nimCopy(null, message_22427, NTI138);
		raiseException(e_22429, "AssertionError");

	
}

function raiseAssert_22416(msg_22418) {
		sysFatal_22421(msg_22418);

	
}

function substrEq_35232(s_35234, pos_35235, substr_35236) {
	var result_35237 = false;

	BeforeRet: do {
		var i_35238 = 0;
		var length_35239 = (substr_35236 != null ? substr_35236.length-1 : 0);
		L1: do {
				L2: while (true) {
				if (!((i_35238 < length_35239) && (s_35234[(pos_35235 + i_35238)] == substr_35236[i_35238]))) break L2;
					i_35238 += 1;
				}
		} while(false);
		result_35237 = (i_35238 == length_35239);
		break BeforeRet;
	} while (false);

	return result_35237;

}

function nsuSplitString(s_36203, sep_36204, maxsplit_36205) {
	var result_36207 = null;

		if (!((0 < (sep_36204 != null ? sep_36204.length-1 : 0)))) {
		raiseAssert_22416(makeNimstrLit("\x0D\x0A  0 < len(sep) "));
		}
		
		result_36207 = nimCopy(null, [], NTI36224);
		L1: do {
			var x_36226 = null;
			var last_36241 = 0;
			var splits_36243 = maxsplit_36205;
			if ((0 < (s_36203 != null ? s_36203.length-1 : 0))) {
			L2: do {
					L3: while (true) {
					if (!(last_36241 <= (s_36203 != null ? s_36203.length-1 : 0))) break L3;
						var first_36245 = last_36241;
						L4: do {
								L5: while (true) {
								if (!((last_36241 < (s_36203 != null ? s_36203.length-1 : 0)) && !(substrEq_35232(s_36203, last_36241, sep_36204)))) break L5;
									last_36241 += 1;
								}
						} while(false);
						if ((splits_36243 == 0)) {
						last_36241 = (s_36203 != null ? s_36203.length-1 : 0);
						}
						
						x_36226 = (s_36203.slice(first_36245, ((last_36241 - 1))+1).concat(0));
						var Tmp6 = nimCopy(null, x_36226, NTI138);
						if (result_36207 != null) { result_36207.push(Tmp6); } else { result_36207 = [Tmp6]; };
						if ((splits_36243 == 0)) {
						break L2;
						}
						
						splits_36243 -= 1;
						last_36241 += (sep_36204 != null ? sep_36204.length-1 : 0);
					}
			} while(false);
			}
			
		} while(false);

	return result_36207;

}

function X5BX5D__21642(s_21644, x_21654) {
	var result_21655 = null;

		result_21655 = nimCopy(null, (s_21644.slice(x_21654.a, (x_21654.b)+1).concat(0)), NTI138);

	return result_21655;

}

function dotdot__37462(a_37466, b_37468) {
	var result_37470 = {a: 0, b: 0};

		result_37470.a = a_37466;
		result_37470.b = b_37468;

	return result_37470;

}

function nsuRepeatChar(c_36977, count_36978) {
	var result_36979 = null;

		result_36979 = nimCopy(null, mnewString(count_36978), NTI138);
		L1: do {
			var i_37014 = 0;
			var colontmp__37016 = 0;
			colontmp__37016 = (count_36978 - 1);
			var res_37019 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_37019 <= colontmp__37016)) break L3;
						i_37014 = res_37019;
						result_36979[i_37014] = c_36977;
						res_37019 += 1;
					}
			} while(false);
		} while(false);

	return result_36979;

}

function outputMeta_59436(line_59438) {
		var fields_59439 = nsuSplitString(line_59438, makeNimstrLit(": "), 1);
		var key_59456 = X5BX5D__21642(fields_59439[0], dotdot__37462(2, (fields_59439[0] != null ? fields_59439[0].length-1 : 0) - 1));
		var value_59457 = nimCopy(null, fields_59439[1], NTI138);
		rawEcho(key_59456, nsuRepeatChar(32, (20 - (key_59456 != null ? key_59456.length-1 : 0))), value_59457);

	
}

function nsuSplitChar(s_36158, sep_36159, maxsplit_36160) {
	var result_36162 = null;

		result_36162 = nimCopy(null, [], NTI36179);
		L1: do {
			var x_36181 = null;
			var last_36196 = 0;
			var splits_36198 = maxsplit_36160;
			if ((0 < (s_36158 != null ? s_36158.length-1 : 0))) {
			L2: do {
					L3: while (true) {
					if (!(last_36196 <= (s_36158 != null ? s_36158.length-1 : 0))) break L3;
						var first_36200 = last_36196;
						L4: do {
								L5: while (true) {
								if (!((last_36196 < (s_36158 != null ? s_36158.length-1 : 0)) && !((s_36158[last_36196] == sep_36159)))) break L5;
									last_36196 += 1;
								}
						} while(false);
						if ((splits_36198 == 0)) {
						last_36196 = (s_36158 != null ? s_36158.length-1 : 0);
						}
						
						x_36181 = (s_36158.slice(first_36200, ((last_36196 - 1))+1).concat(0));
						var Tmp6 = nimCopy(null, x_36181, NTI138);
						if (result_36162 != null) { result_36162.push(Tmp6); } else { result_36162 = [Tmp6]; };
						if ((splits_36198 == 0)) {
						break L2;
						}
						
						splits_36198 -= 1;
						last_36196 += 1;
					}
			} while(false);
			}
			
		} while(false);

	return result_36162;

}

function emarkamp__42007(h_42009, val_42010) {
	var result_42011 = 0;

		result_42011 = ((h_42009 + val_42010) >>> 0);
		result_42011 = ((result_42011 + (result_42011 << 10)) >>> 0);
		result_42011 = (result_42011 ^ ((result_42011 >>> 0) >>> 6));

	return result_42011;

}

function emarkdollar__42044(h_42046) {
	var result_42047 = 0;

		result_42047 = ((h_42046 + (h_42046 << 3)) >>> 0);
		result_42047 = (result_42047 ^ ((result_42047 >>> 0) >>> 11));
		result_42047 = ((result_42047 + (result_42047 << 15)) >>> 0);

	return result_42047;

}

function hash_42836(x_42838) {
	var result_42839 = 0;

		var h_42840 = 0;
		L1: do {
			var i_42850 = 0;
			var colontmp__42860 = 0;
			colontmp__42860 = ((x_42838 != null ? x_42838.length-1 : 0) - 1);
			var res_42863 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_42863 <= colontmp__42860)) break L3;
						i_42850 = res_42863;
						h_42840 = emarkamp__42007(h_42840, x_42838[i_42850]);
						res_42863 += 1;
					}
			} while(false);
		} while(false);
		result_42839 = emarkdollar__42044(h_42840);

	return result_42839;

}

function isFilled_45465(hcode_45467) {
	var result_45468 = false;

		result_45468 = !((hcode_45467 == 0));

	return result_45468;

}

function nextTry_45601(h_45603, maxHash_45604) {
	var result_45605 = 0;

		result_45605 = ((h_45603 + 1) & maxHash_45604);

	return result_45605;

}

function rawGet_59702(t_59707, key_59709, hc_59711, hc_59711_Idx) {
						var Tmp3;

	var result_59712 = 0;

	BeforeRet: do {
		hc_59711[hc_59711_Idx] = hash_42836(key_59709);
		if ((hc_59711[hc_59711_Idx] == 0)) {
		hc_59711[hc_59711_Idx] = 314159265;
		}
		
		var h_59724 = (hc_59711[hc_59711_Idx] & (t_59707.data != null ? (t_59707.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_45465(t_59707.data[h_59724].Field0)) break L2;
						if (!(t_59707.data[h_59724].Field0 == hc_59711[hc_59711_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_59707.data[h_59724].Field1, key_59709);						}					if (Tmp3) {
					result_59712 = h_59724;
					break BeforeRet;
					}
					
					h_59724 = nextTry_45601(h_59724, (t_59707.data != null ? (t_59707.data.length-1) : -1));
				}
		} while(false);
		result_59712 = (-1 - h_59724);
	} while (false);

	return result_59712;

}

function mustRehash_45470(length_45472, counter_45473) {
	var result_45474 = false;

		result_45474 = (((length_45472 * 2) < (counter_45473 * 3)) || ((length_45472 - counter_45473) < 4));

	return result_45474;

}

function rawInsert_61880(t_61887, data_61891, data_61891_Idx, key_61893, val_61895, hc_61897, h_61899) {
		data_61891[data_61891_Idx][h_61899].Field1 = nimCopy(null, key_61893, NTI138);
		data_61891[data_61891_Idx][h_61899].Field2 = nimCopy(null, val_61895, NTI59214);
		data_61891[data_61891_Idx][h_61899].Field0 = hc_61897;

	
}

function enlarge_60777(t_60784) {
		var n_60788 = null;
		n_60788 = new Array(((t_60784.data != null ? t_60784.data.length : 0) * 2)); for (var i=0;i<((t_60784.data != null ? t_60784.data.length : 0) * 2);++i) {n_60788[i]={Field0: 0, Field1: null, Field2: null};}		var Tmp1 = t_60784.data; t_60784.data = n_60788; n_60788 = Tmp1;		L2: do {
			var i_60994 = 0;
			var colontmp__62544 = 0;
			colontmp__62544 = (n_60788 != null ? (n_60788.length-1) : -1);
			var res_62547 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_62547 <= colontmp__62544)) break L4;
						i_60994 = res_62547;
						var eh_61208 = n_60788[i_60994].Field0;
						if (isFilled_45465(eh_61208)) {
						var j_61217 = (eh_61208 & (t_60784.data != null ? (t_60784.data.length-1) : -1));
						L5: do {
								L6: while (true) {
								if (!isFilled_45465(t_60784.data[j_61217].Field0)) break L6;
									j_61217 = nextTry_45601(j_61217, (t_60784.data != null ? (t_60784.data.length-1) : -1));
								}
						} while(false);
						rawInsert_61880(t_60784, t_60784, "data", n_60788[i_60994].Field1, n_60788[i_60994].Field2, eh_61208, j_61217);
						}
						
						res_62547 += 1;
					}
			} while(false);
		} while(false);

	
}

function rawGetKnownHC_62552(t_62557, key_62559, hc_62561) {
	var result_62562 = 0;

	BeforeRet: do {
		var h_62571 = (hc_62561 & (t_62557.data != null ? (t_62557.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_45465(t_62557.data[h_62571].Field0)) break L2;
					if (((t_62557.data[h_62571].Field0 == hc_62561) && eqStrings(t_62557.data[h_62571].Field1, key_62559))) {
					result_62562 = h_62571;
					break BeforeRet;
					}
					
					h_62571 = nextTry_45601(h_62571, (t_62557.data != null ? (t_62557.data.length-1) : -1));
				}
		} while(false);
		result_62562 = (-1 - h_62571);
	} while (false);

	return result_62562;

}

function X5BX5Deq__59688(t_59695, key_59697, val_59699) {
		var hc_59700 = [0];
		var index_60375 = rawGet_59702(t_59695, key_59697, hc_59700, 0);
		if ((0 <= index_60375)) {
		t_59695.data[index_60375].Field2 = nimCopy(null, val_59699, NTI59214);
		}
		else {
			if (mustRehash_45470((t_59695.data != null ? t_59695.data.length : 0), t_59695.counter)) {
			enlarge_60777(t_59695);
			index_60375 = rawGetKnownHC_62552(t_59695, key_59697, hc_59700[0]);
			}
			
			index_60375 = (-1 - index_60375);
			rawInsert_61880(t_59695, t_59695, "data", key_59697, val_59699, hc_59700[0], index_60375);
			t_59695.counter += 1;
		}
		

	
}

function rawGet_63437(t_63442, key_63444, hc_63446, hc_63446_Idx) {
						var Tmp3;

	var result_63447 = 0;

	BeforeRet: do {
		hc_63446[hc_63446_Idx] = hash_42836(key_63444);
		if ((hc_63446[hc_63446_Idx] == 0)) {
		hc_63446[hc_63446_Idx] = 314159265;
		}
		
		var h_63459 = (hc_63446[hc_63446_Idx] & (t_63442.data != null ? (t_63442.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_45465(t_63442.data[h_63459].Field0)) break L2;
						if (!(t_63442.data[h_63459].Field0 == hc_63446[hc_63446_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_63442.data[h_63459].Field1, key_63444);						}					if (Tmp3) {
					result_63447 = h_63459;
					break BeforeRet;
					}
					
					h_63459 = nextTry_45601(h_63459, (t_63442.data != null ? (t_63442.data.length-1) : -1));
				}
		} while(false);
		result_63447 = (-1 - h_63459);
	} while (false);

	return result_63447;

}

function rawInsert_65615(t_65622, data_65626, data_65626_Idx, key_65628, val_65630, hc_65632, h_65634) {
		data_65626[data_65626_Idx][h_65634].Field1 = nimCopy(null, key_65628, NTI138);
		data_65626[data_65626_Idx][h_65634].Field2 = nimCopy(null, val_65630, NTI138);
		data_65626[data_65626_Idx][h_65634].Field0 = hc_65632;

	
}

function enlarge_64512(t_64519) {
		var n_64523 = null;
		n_64523 = new Array(((t_64519.data != null ? t_64519.data.length : 0) * 2)); for (var i=0;i<((t_64519.data != null ? t_64519.data.length : 0) * 2);++i) {n_64523[i]={Field0: 0, Field1: null, Field2: null};}		var Tmp1 = t_64519.data; t_64519.data = n_64523; n_64523 = Tmp1;		L2: do {
			var i_64729 = 0;
			var colontmp__66279 = 0;
			colontmp__66279 = (n_64523 != null ? (n_64523.length-1) : -1);
			var res_66282 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_66282 <= colontmp__66279)) break L4;
						i_64729 = res_66282;
						var eh_64943 = n_64523[i_64729].Field0;
						if (isFilled_45465(eh_64943)) {
						var j_64952 = (eh_64943 & (t_64519.data != null ? (t_64519.data.length-1) : -1));
						L5: do {
								L6: while (true) {
								if (!isFilled_45465(t_64519.data[j_64952].Field0)) break L6;
									j_64952 = nextTry_45601(j_64952, (t_64519.data != null ? (t_64519.data.length-1) : -1));
								}
						} while(false);
						rawInsert_65615(t_64519, t_64519, "data", n_64523[i_64729].Field1, n_64523[i_64729].Field2, eh_64943, j_64952);
						}
						
						res_66282 += 1;
					}
			} while(false);
		} while(false);

	
}

function rawGetKnownHC_66287(t_66292, key_66294, hc_66296) {
	var result_66297 = 0;

	BeforeRet: do {
		var h_66306 = (hc_66296 & (t_66292.data != null ? (t_66292.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_45465(t_66292.data[h_66306].Field0)) break L2;
					if (((t_66292.data[h_66306].Field0 == hc_66296) && eqStrings(t_66292.data[h_66306].Field1, key_66294))) {
					result_66297 = h_66306;
					break BeforeRet;
					}
					
					h_66306 = nextTry_45601(h_66306, (t_66292.data != null ? (t_66292.data.length-1) : -1));
				}
		} while(false);
		result_66297 = (-1 - h_66306);
	} while (false);

	return result_66297;

}

function X5BX5Deq__63423(t_63430, key_63432, val_63434) {
		var hc_63435 = [0];
		var index_64110 = rawGet_63437(t_63430, key_63432, hc_63435, 0);
		if ((0 <= index_64110)) {
		t_63430.data[index_64110].Field2 = nimCopy(null, val_63434, NTI138);
		}
		else {
			if (mustRehash_45470((t_63430.data != null ? t_63430.data.length : 0), t_63430.counter)) {
			enlarge_64512(t_63430);
			index_64110 = rawGetKnownHC_66287(t_63430, key_63432, hc_63435[0]);
			}
			
			index_64110 = (-1 - index_64110);
			rawInsert_65615(t_63430, t_63430, "data", key_63432, val_63434, hc_63435[0], index_64110);
			t_63430.counter += 1;
		}
		

	
}

function X5BX5D__67216(t_67223, key_67225) {
	var result_67227 = [null, 0];
	var result_67227_Idx = 0;

		var hc_67229 = [0];
		var index_67243 = rawGet_59702(t_67223, key_67225, hc_67229, 0);
		if ((0 <= index_67243)) {
		result_67227 = t_67223.data[index_67243]; result_67227_Idx = "Field2";
		}
		else {
			var e_67606 = null;
			e_67606 = {m_type: NTI3450, parent: null, name: null, message: null, trace: null, up: null};
			e_67606.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(key_67225), NTI138);
			e_67606.parent = null;
			raiseException(e_67606, "KeyError");
		}
		

	return [result_67227, result_67227_Idx];

}

function parseGroup(data_59463, alleles_59468, groups_59475) {
							var Tmp7;
											var Tmp11;

		var fields_59514 = newSeq_59480(0);
		L1: do {
			var line_59515 = null;
			var first_67638 = 0;
			var last_67640 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!!((ConstSet1[data_59463[last_67640]] != undefined))) break L5;
									last_67640 += 1;
								}
						} while(false);
						line_59515 = (data_59463.slice(first_67638, ((last_67640 - 1))+1).concat(0));
						L6: do {
							if (startsWith_37524(line_59515, 35)) {
							outputMeta_59436(line_59515);
							break L6;
							}
							
							fields_59514 = nimCopy(null, nsuSplitChar(line_59515, 59, -1), NTI36161);
							if (((fields_59514 != null ? fields_59514.length : 0) < 3)) {
							break L6;
							}
							
							var locus_59523 = nimCopy(null, fields_59514[0], NTI138);
							var members_59524 = nsuSplitChar(fields_59514[1], 47, -1);
							if (((fields_59514[2] != null ? fields_59514[2].length-1 : 0) == 0)) {
							Tmp7 = (locus_59523.slice(0,-1)).concat(members_59524[0]);
							}
							else {
							Tmp7 = (locus_59523.slice(0,-1)).concat(fields_59514[2]);
							}
							
							var group_59525 = nimCopy(null, Tmp7, NTI138);
							X5BX5Deq__59688(groups_59475, group_59525, []);
							L8: do {
								var allele_63275 = null;
								var i_67632 = 0;
								var L_67634 = (members_59524 != null ? members_59524.length : 0);
								L9: do {
										L10: while (true) {
										if (!(i_67632 < L_67634)) break L10;
											allele_63275 = members_59524[i_67632];
											var name_63276 = (locus_59523.slice(0,-1)).concat(allele_63275);
											X5BX5Deq__63423(alleles_59468, name_63276, group_59525);
											var Tmp12 = nimCopy(null, name_63276, NTI138);
											if ((Tmp11 = X5BX5D__67216(groups_59475, group_59525), Tmp11[0])[Tmp11[1]] != null) { (Tmp11 = X5BX5D__67216(groups_59475, group_59525), Tmp11[0])[Tmp11[1]].push(Tmp12); } else { (Tmp11 = X5BX5D__67216(groups_59475, group_59525), Tmp11[0])[Tmp11[1]] = [Tmp12]; };
											i_67632 += 1;
										}
								} while(false);
							} while(false);
						} while(false);
						if ((data_59463[last_67640] == 10)) {
						last_67640 += 1;
						}
						else {
						if ((data_59463[last_67640] == 13)) {
						last_67640 += 1;
						if ((data_59463[last_67640] == 10)) {
						last_67640 += 1;
						}
						
						}
						else {
							break L2;
						}
						}
						first_67638 = last_67640;
					}
			} while(false);
		} while(false);

	
}

function initGgroupData(gdata_67643) {
		parseGroup(cstrToNimstr(gdata_67643), galleles_59211[0], ggroups_59411[0]);

	
}

function initPgroupData(pdata_67648) {
		parseGroup(cstrToNimstr(pdata_67648), palleles_59422[0], pgroups_59435[0]);

	
}

function nsuStrip(s_35130, leading_35131, trailing_35132, chars_35134) {
					var Tmp5;

	var result_35135 = null;

		var first_35136 = 0;
		var last_35137 = ((s_35130 != null ? s_35130.length-1 : 0) - 1);
		if (leading_35131) {
		L1: do {
				L2: while (true) {
				if (!(chars_35134[s_35130[first_35136]] != undefined)) break L2;
					first_35136 += 1;
				}
		} while(false);
		}
		
		if (trailing_35132) {
		L3: do {
				L4: while (true) {
					if (!(0 <= last_35137)) Tmp5 = false; else {						Tmp5 = (chars_35134[s_35130[last_35137]] != undefined);					}				if (!Tmp5) break L4;
					last_35137 -= 1;
				}
		} while(false);
		}
		
		result_35135 = nimCopy(null, (s_35130.slice(first_35136, (last_35137)+1).concat(0)), NTI138);

	return result_35135;

}

function nsuToUpperAsciiChar(c_34846) {
	var result_34847 = 0;

		if ((ConstSet3[c_34846] != undefined)) {
		result_34847 = (c_34846 - 32);
		}
		else {
			result_34847 = c_34846;
		}
		

	return result_34847;

}

function nsuToUpperAsciiStr(s_34884) {
	var result_34885 = null;

		result_34885 = nimCopy(null, mnewString((s_34884 != null ? s_34884.length-1 : 0)), NTI138);
		L1: do {
			var i_34895 = 0;
			var colontmp__34897 = 0;
			colontmp__34897 = ((s_34884 != null ? s_34884.length-1 : 0) - 1);
			var res_34900 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_34900 <= colontmp__34897)) break L3;
						i_34895 = res_34900;
						result_34885[i_34895] = nsuToUpperAsciiChar(s_34884[i_34895]);
						res_34900 += 1;
					}
			} while(false);
		} while(false);

	return result_34885;

}

function hasKey_68591(t_68597, key_68599) {
	var result_68600 = false;

		var hc_68601 = [0];
		result_68600 = (0 <= rawGet_63437(t_68597, key_68599, hc_68601, 0));

	return result_68600;

}

function contains_68578(t_68584, key_68586) {
	var result_68587 = false;

	BeforeRet: do {
		result_68587 = hasKey_68591(t_68584, key_68586);
		break BeforeRet;
	} while (false);

	return result_68587;

}

function clearForm_67665() {
		document.getElementById("alleleinfo").innerHTML = "";
		document.getElementById("helptext").innerHTML = "";
		document.getElementById("pgroup").innerHTML = "";
		document.getElementById("pgrouplen").innerHTML = "";
		document.getElementById("pother").innerHTML = "";
		document.getElementById("ggroup").innerHTML = "";
		document.getElementById("ggrouplen").innerHTML = "";
		document.getElementById("gother").innerHTML = "";

	
}

function nsuFindChar(s_38015, sub_38016, start_38017, last_38018) {
		var Tmp1;

	var result_38019 = 0;

	BeforeRet: do {
		if ((last_38018 == 0)) {
		Tmp1 = (s_38015 != null ? (s_38015.length-2) : -1);
		}
		else {
		Tmp1 = last_38018;
		}
		
		var last_38021 = Tmp1;
		L2: do {
			var i_38610 = 0;
			var res_38811 = start_38017;
			L3: do {
					L4: while (true) {
					if (!(res_38811 <= last_38021)) break L4;
						i_38610 = res_38811;
						if ((sub_38016 == s_38015[i_38610])) {
						result_38019 = i_38610;
						break BeforeRet;
						}
						
						res_38811 += 1;
					}
			} while(false);
		} while(false);
		result_38019 = -1;
		break BeforeRet;
	} while (false);

	return result_38019;

}

function contains_39072(s_39074, c_39075) {
	var result_39076 = false;

	BeforeRet: do {
		result_39076 = (0 <= nsuFindChar(s_39074, c_39075, 0, 0));
		break BeforeRet;
	} while (false);

	return result_39076;

}

function find_67845(a_67850, item_67852) {
	var result_67853 = 0;

	BeforeRet: do {
		L1: do {
			var i_67878 = null;
			var i_67891 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_67891 < (a_67850 != null ? a_67850.length : 0))) break L3;
						i_67878 = a_67850[i_67891];
						if (eqStrings(i_67878, item_67852)) {
						break BeforeRet;
						}
						
						result_67853 += 1;
						i_67891 += 1;
					}
			} while(false);
		} while(false);
		result_67853 = -1;
	} while (false);

	return result_67853;

}

function contains_67835(a_67840, item_67842) {
	var result_67843 = false;

	BeforeRet: do {
		result_67843 = (0 <= find_67845(a_67840, item_67842));
		break BeforeRet;
	} while (false);

	return result_67843;

}

function invalidFormatString_40795() {
		var e_40803 = null;
		e_40803 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null, up: null};
		e_40803.message = nimCopy(null, makeNimstrLit("invalid format string"), NTI138);
		e_40803.parent = null;
		raiseException(e_40803, "ValueError");

	
}

function nsuToLowerAsciiChar(c_34785) {
	var result_34786 = 0;

		if ((ConstSet7[c_34785] != undefined)) {
		result_34786 = (c_34785 + 32);
		}
		else {
			result_34786 = c_34785;
		}
		

	return result_34786;

}

function nsuCmpIgnoreStyle(a_35068, b_35069) {
						var Tmp7;

	var result_35070 = 0;

		var i_35071 = 0;
		var j_35072 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!(a_35068[i_35071] == 95)) break L4;
								i_35071 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!(b_35069[j_35072] == 95)) break L6;
								j_35072 += 1;
							}
					} while(false);
					var aa_35091 = nsuToLowerAsciiChar(a_35068[i_35071]);
					var bb_35092 = nsuToLowerAsciiChar(b_35069[j_35072]);
					result_35070 = (aa_35091 - bb_35092);
						if (!((result_35070 == 0))) Tmp7 = true; else {							Tmp7 = (aa_35091 == 0);						}					if (Tmp7) {
					break L1;
					}
					
					i_35071 += 1;
					j_35072 += 1;
				}
		} while(false);

	return result_35070;

}

function findNormalized_40771(x_40773, inArray_40775) {
	var result_40776 = 0;

	BeforeRet: do {
		var i_40777 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_40777 < (inArray_40775 != null ? (inArray_40775.length-1) : -1))) break L2;
					if ((nsuCmpIgnoreStyle(x_40773, inArray_40775[i_40777]) == 0)) {
					result_40776 = i_40777;
					break BeforeRet;
					}
					
					i_40777 += 2;
				}
		} while(false);
		result_40776 = -1;
		break BeforeRet;
	} while (false);

	return result_40776;

}

function nsuAddf(s_40816, s_40816_Idx, formatstr_40817, a_40819) {
						var Tmp5;
							var Tmp8;
							var Tmp11;

		var i_40822 = 0;
		var num_40823 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_40822 < (formatstr_40817 != null ? formatstr_40817.length-1 : 0))) break L2;
					if ((formatstr_40817[i_40822] == 36)) {
					switch (formatstr_40817[(i_40822 + 1)]) {
					case 35:
						if (((a_40819 != null ? (a_40819.length-1) : -1) < num_40823)) {
						invalidFormatString_40795();
						}
						
						if (s_40816[s_40816_Idx] != null) { s_40816[s_40816_Idx] = (s_40816[s_40816_Idx].slice(0, -1)).concat(a_40819[num_40823]); } else { s_40816[s_40816_Idx] = a_40819[num_40823];};
						i_40822 += 2;
						num_40823 += 1;
						break;
					case 36:
						if (s_40816[s_40816_Idx] != null) { addChar(s_40816[s_40816_Idx], 36); } else { s_40816[s_40816_Idx] = [36, 0]; };
						i_40822 += 2;
						break;
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57:
					case 45:
						var j_40866 = 0;
						i_40822 += 1;
						var negative_40876 = (formatstr_40817[i_40822] == 45);
						if (negative_40876) {
						i_40822 += 1;
						}
						
						L3: do {
								L4: while (true) {
								if (!(ConstSet5[formatstr_40817[i_40822]] != undefined)) break L4;
									j_40866 = (((j_40866 * 10) + formatstr_40817[i_40822]) - 48);
									i_40822 += 1;
								}
						} while(false);
						if (!(negative_40876)) {
						Tmp5 = (j_40866 - 1);
						}
						else {
						Tmp5 = ((a_40819 != null ? a_40819.length : 0) - j_40866);
						}
						
						var idx_40924 = Tmp5;
						if (((a_40819 != null ? (a_40819.length-1) : -1) < idx_40924)) {
						invalidFormatString_40795();
						}
						
						if (s_40816[s_40816_Idx] != null) { s_40816[s_40816_Idx] = (s_40816[s_40816_Idx].slice(0, -1)).concat(a_40819[idx_40924]); } else { s_40816[s_40816_Idx] = a_40819[idx_40924];};
						break;
					case 123:
						var j_40940 = (i_40822 + 1);
						L6: do {
								L7: while (true) {
								if (!!((ConstSet6[formatstr_40817[j_40940]] != undefined))) break L7;
									j_40940 += 1;
								}
						} while(false);
						var x_40960 = findNormalized_40771((formatstr_40817.slice((i_40822 + 2), ((j_40940 - 1))+1).concat(0)), a_40819);
							if (!(0 <= x_40960)) Tmp8 = false; else {								Tmp8 = (x_40960 < (a_40819 != null ? (a_40819.length-1) : -1));							}						if (Tmp8) {
						if (s_40816[s_40816_Idx] != null) { s_40816[s_40816_Idx] = (s_40816[s_40816_Idx].slice(0, -1)).concat(a_40819[(x_40960 + 1)]); } else { s_40816[s_40816_Idx] = a_40819[(x_40960 + 1)];};
						}
						else {
						invalidFormatString_40795();
						}
						
						i_40822 = (j_40940 + 1);
						break;
					case 97:
					case 98:
					case 99:
					case 100:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 114:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 120:
					case 121:
					case 122:
					case 65:
					case 66:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 78:
					case 79:
					case 80:
					case 81:
					case 82:
					case 83:
					case 84:
					case 85:
					case 86:
					case 87:
					case 88:
					case 89:
					case 90:
					case 128:
					case 129:
					case 130:
					case 131:
					case 132:
					case 133:
					case 134:
					case 135:
					case 136:
					case 137:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 144:
					case 145:
					case 146:
					case 147:
					case 148:
					case 149:
					case 150:
					case 151:
					case 152:
					case 153:
					case 154:
					case 155:
					case 156:
					case 157:
					case 158:
					case 159:
					case 160:
					case 161:
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 183:
					case 184:
					case 185:
					case 186:
					case 187:
					case 188:
					case 189:
					case 190:
					case 191:
					case 192:
					case 193:
					case 194:
					case 195:
					case 196:
					case 197:
					case 198:
					case 199:
					case 200:
					case 201:
					case 202:
					case 203:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 240:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 253:
					case 254:
					case 255:
					case 95:
						var j_40968 = (i_40822 + 1);
						L9: do {
								L10: while (true) {
								if (!(ConstSet8[formatstr_40817[j_40968]] != undefined)) break L10;
									j_40968 += 1;
								}
						} while(false);
						var x_40987 = findNormalized_40771((formatstr_40817.slice((i_40822 + 1), ((j_40968 - 1))+1).concat(0)), a_40819);
							if (!(0 <= x_40987)) Tmp11 = false; else {								Tmp11 = (x_40987 < (a_40819 != null ? (a_40819.length-1) : -1));							}						if (Tmp11) {
						if (s_40816[s_40816_Idx] != null) { s_40816[s_40816_Idx] = (s_40816[s_40816_Idx].slice(0, -1)).concat(a_40819[(x_40987 + 1)]); } else { s_40816[s_40816_Idx] = a_40819[(x_40987 + 1)];};
						}
						else {
						invalidFormatString_40795();
						}
						
						i_40822 = j_40968;
						break;
					default: 
						invalidFormatString_40795();
						break;
					}
					}
					else {
						if (s_40816[s_40816_Idx] != null) { addChar(s_40816[s_40816_Idx], formatstr_40817[i_40822]); } else { s_40816[s_40816_Idx] = [formatstr_40817[i_40822], 0]; };
						i_40822 += 1;
					}
					
				}
		} while(false);

	
}

function nsuFormatOpenArray(formatstr_41010, a_41012) {
	var result_41013 = [null];

		result_41013[0] = nimCopy(null, mnewString(0), NTI138);
		nsuAddf(result_41013, 0, formatstr_41010, a_41012);

	return result_41013[0];

}

function nsuJoinSep(a_37640, sep_37641) {
	var result_37642 = null;

		if ((0 < (a_37640 != null ? a_37640.length : 0))) {
		var L_37655 = ((sep_37641 != null ? sep_37641.length-1 : 0) * ((a_37640 != null ? a_37640.length : 0) - 1));
		L1: do {
			var i_37672 = 0;
			var colontmp__37700 = 0;
			colontmp__37700 = (a_37640 != null ? (a_37640.length-1) : -1);
			var res_37703 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_37703 <= colontmp__37700)) break L3;
						i_37672 = res_37703;
						L_37655 += (a_37640[i_37672] != null ? a_37640[i_37672].length-1 : 0);
						res_37703 += 1;
					}
			} while(false);
		} while(false);
		result_37642 = nimCopy(null, mnewString(0), NTI138);
		if (result_37642 != null) { result_37642 = (result_37642.slice(0, -1)).concat(a_37640[0]); } else { result_37642 = a_37640[0];};
		L4: do {
			var i_37698 = 0;
			var colontmp__37708 = 0;
			colontmp__37708 = (a_37640 != null ? (a_37640.length-1) : -1);
			var res_37711 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_37711 <= colontmp__37708)) break L6;
						i_37698 = res_37711;
						if (result_37642 != null) { result_37642 = (result_37642.slice(0, -1)).concat(sep_37641); } else { result_37642 = sep_37641;};
						if (result_37642 != null) { result_37642 = (result_37642.slice(0, -1)).concat(a_37640[i_37698]); } else { result_37642 = a_37640[i_37698];};
						res_37711 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			result_37642 = nimCopy(null, makeNimstrLit(""), NTI138);
		}
		

	return result_37642;

}

function nsuStartsWith(s_37510, prefix_37511) {
	var result_37512 = false;

	BeforeRet: do {
		var i_37513 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if ((prefix_37511[i_37513] == 0)) {
					result_37512 = true;
					break BeforeRet;
					}
					
					if (!((s_37510[i_37513] == prefix_37511[i_37513]))) {
					result_37512 = false;
					break BeforeRet;
					}
					
					i_37513 += 1;
				}
		} while(false);
	} while (false);

	return result_37512;

}

function lookForAlternateAllele_67672(allele_67674) {
	BeforeRet: do {
		clearForm_67665();
		if (!(contains_39072(allele_67674, 42))) {
		document.getElementById("helptext").innerHTML = "<br>\nAnge locus i allelnamn, t.ex. A*01:01:01:01";
		break BeforeRet;
		}
		
		var locus_67679 = nimCopy(null, nsuSplitChar(allele_67674, 42, -1)[0], NTI138);
		if (!(contains_67835([makeNimstrLit("A"), makeNimstrLit("B"), makeNimstrLit("C"), makeNimstrLit("DRA1"), makeNimstrLit("DRB1"), makeNimstrLit("DQA1"), makeNimstrLit("DQB1"), makeNimstrLit("DPA1"), makeNimstrLit("DPB1"), makeNimstrLit("DRB3"), makeNimstrLit("DRB4"), makeNimstrLit("DRB5"), makeNimstrLit("E"), makeNimstrLit("F"), makeNimstrLit("G")], locus_67679))) {
		document.getElementById("helptext").innerHTML = toJSStr((makeNimstrLit("<br>\x0A").slice(0,-1)).concat(nsuFormatOpenArray(makeNimstrLit("Ok\xC3\xA4nt locus \'$#\', k\xC3\xA4nda loci \xC3\xA4r:<br>\x0A$#"), [locus_67679, nsuJoinSep([makeNimstrLit("A"), makeNimstrLit("B"), makeNimstrLit("C"), makeNimstrLit("DRA1"), makeNimstrLit("DRB1"), makeNimstrLit("DQA1"), makeNimstrLit("DQB1"), makeNimstrLit("DPA1"), makeNimstrLit("DPB1"), makeNimstrLit("DRB3"), makeNimstrLit("DRB4"), makeNimstrLit("DRB5"), makeNimstrLit("E"), makeNimstrLit("F"), makeNimstrLit("G")], makeNimstrLit(", "))])));
		break BeforeRet;
		}
		
		var cand_67922 = newSeq_59480(0);
		L1: do {
			var key_68383 = null;
			L2: do {
				var h_68414 = 0;
				var colontmp__68416 = 0;
				colontmp__68416 = (galleles_59211[0].data != null ? (galleles_59211[0].data.length-1) : -1);
				var res_68418 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_68418 <= colontmp__68416)) break L4;
							h_68414 = res_68418;
							if (isFilled_45465(galleles_59211[0].data[h_68414].Field0)) {
							key_68383 = galleles_59211[0].data[h_68414].Field1;
							if (nsuStartsWith(key_68383, allele_67674)) {
							var Tmp5 = nimCopy(null, key_68383, NTI138);
							if (cand_67922 != null) { cand_67922.push(Tmp5); } else { cand_67922 = [Tmp5]; };
							if ((10 < (cand_67922 != null ? cand_67922.length : 0))) {
							break L1;
							}
							
							}
							
							}
							
							res_68418 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		if ((0 < (cand_67922 != null ? cand_67922.length : 0))) {
		document.getElementById("helptext").innerHTML = toJSStr((makeNimstrLit("<br>\x0A").slice(0,-1)).concat(nsuFormatOpenArray(makeNimstrLit("Mer specifik fr\xC3\xA5ga beh\xC3\xB6vs, ange t.ex. n\xC3\xA5gon av:<br>\x0A$#\x0A<br>..."), [nsuJoinSep(cand_67922, makeNimstrLit("<br>\x0A"))])));
		break BeforeRet;
		}
		
		document.getElementById("helptext").innerHTML = "<br>\nOkänd allel, ange alleler som t.ex. A*01:01:01:01";
	} while (false);

	
}

function X5BX5D__69158(t_69165, key_69167) {
	var result_69169 = [null, 0];
	var result_69169_Idx = 0;

		var hc_69171 = [0];
		var index_69185 = rawGet_63437(t_69165, key_69167, hc_69171, 0);
		if ((0 <= index_69185)) {
		result_69169 = t_69165.data[index_69185]; result_69169_Idx = "Field2";
		}
		else {
			var e_69606 = null;
			e_69606 = {m_type: NTI3450, parent: null, name: null, message: null, trace: null, up: null};
			e_69606.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(key_69167), NTI138);
			e_69606.parent = null;
			raiseException(e_69606, "KeyError");
		}
		

	return [result_69169, result_69169_Idx];

}

function lookupAllele() {
		var Tmp1;
		var Tmp2;
<<<<<<< HEAD
			var Tmp4;
		var Tmp8;
		var Tmp9;
			var Tmp11;
=======
		var Tmp3;
		var Tmp4;
		var Tmp5;
		var Tmp6;
>>>>>>> 12ba5854e3520e061756feb3cae45465ad6ab964

	BeforeRet: do {
		var allele_68423 = nsuStrip(nsuToUpperAsciiStr(cstrToNimstr(document.getElementById("allele").value)), true, true, ConstSet4);
		if ((contains_68578(galleles_59211[0], allele_68423) || contains_68578(palleles_59422[0], allele_68423))) {
		clearForm_67665();
		document.getElementById("alleleinfo").innerHTML = toJSStr((makeNimstrLit("<a href=\"https://www.ebi.ac.uk/cgi-bin/ipd/imgt/hla/get_allele.cgi?").slice(0,-1)).concat(allele_68423.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_68423.slice(0,-1),makeNimstrLit("</a>")));
		}
		else {
			lookForAlternateAllele_67672(allele_68423);
			break BeforeRet;
		}
		
		if (contains_68578(palleles_59422[0], allele_68423)) {
		var pgroup_69618 = nimCopy(null, (Tmp1 = X5BX5D__69158(palleles_59422[0], allele_68423), Tmp1[0])[Tmp1[1]], NTI138);
		document.getElementById("pgroup").innerHTML = toJSStr(pgroup_69618);
		document.getElementById("pgrouplen").innerHTML = toJSStr(cstrToNimstr((((Tmp2 = X5BX5D__67216(pgroups_59435[0], pgroup_69618), Tmp2[0])[Tmp2[1]] != null ? (Tmp2 = X5BX5D__67216(pgroups_59435[0], pgroup_69618), Tmp2[0])[Tmp2[1]].length : 0))+""));
<<<<<<< HEAD
		var alleleLinks_69879 = newSeq_59480(0);
		L3: do {
			var otherAllele_70114 = null;
			var colontmp__71029 = null;
			colontmp__71029 = (Tmp4 = X5BX5D__67216(pgroups_59435[0], pgroup_69618), Tmp4[0])[Tmp4[1]];
			var i_71032 = 0;
			var L_71034 = (colontmp__71029 != null ? colontmp__71029.length : 0);
			L5: do {
					L6: while (true) {
					if (!(i_71032 < L_71034)) break L6;
						otherAllele_70114 = colontmp__71029[i_71032];
						var Tmp7 = nimCopy(null, (makeNimstrLit("<a href=\"https://www.ebi.ac.uk/cgi-bin/ipd/imgt/hla/get_allele.cgi?").slice(0,-1)).concat(otherAllele_70114.slice(0,-1),makeNimstrLit("\">").slice(0,-1),otherAllele_70114.slice(0,-1),makeNimstrLit("</a>")), NTI138);
						if (alleleLinks_69879 != null) { alleleLinks_69879.push(Tmp7); } else { alleleLinks_69879 = [Tmp7]; };
						i_71032 += 1;
					}
			} while(false);
		} while(false);
		document.getElementById("pother").innerHTML = toJSStr(nsuJoinSep(alleleLinks_69879, makeNimstrLit(" ")));
		}
		
		if (contains_68578(galleles_59211[0], allele_68423)) {
		var ggroup_70517 = nimCopy(null, (Tmp8 = X5BX5D__69158(galleles_59211[0], allele_68423), Tmp8[0])[Tmp8[1]], NTI138);
		document.getElementById("ggroup").innerHTML = toJSStr(ggroup_70517);
		document.getElementById("ggrouplen").innerHTML = toJSStr(cstrToNimstr((((Tmp9 = X5BX5D__67216(ggroups_59411[0], ggroup_70517), Tmp9[0])[Tmp9[1]] != null ? (Tmp9 = X5BX5D__67216(ggroups_59411[0], ggroup_70517), Tmp9[0])[Tmp9[1]].length : 0))+""));
		var alleleLinks_70778 = newSeq_59480(0);
		L10: do {
			var otherAllele_71013 = null;
			var colontmp__71036 = null;
			colontmp__71036 = (Tmp11 = X5BX5D__67216(ggroups_59411[0], ggroup_70517), Tmp11[0])[Tmp11[1]];
			var i_71039 = 0;
			var L_71041 = (colontmp__71036 != null ? colontmp__71036.length : 0);
			L12: do {
					L13: while (true) {
					if (!(i_71039 < L_71041)) break L13;
						otherAllele_71013 = colontmp__71036[i_71039];
						var Tmp14 = nimCopy(null, (makeNimstrLit("<a href=\"https://www.ebi.ac.uk/cgi-bin/ipd/imgt/hla/get_allele.cgi?").slice(0,-1)).concat(otherAllele_71013.slice(0,-1),makeNimstrLit("\">").slice(0,-1),otherAllele_71013.slice(0,-1),makeNimstrLit("</a>")), NTI138);
						if (alleleLinks_70778 != null) { alleleLinks_70778.push(Tmp14); } else { alleleLinks_70778 = [Tmp14]; };
						i_71039 += 1;
					}
			} while(false);
		} while(false);
		document.getElementById("gother").innerHTML = toJSStr(nsuJoinSep(alleleLinks_70778, makeNimstrLit(" ")));
=======
		document.getElementById("pother").innerHTML = toJSStr(nsuJoinSep((Tmp3 = X5BX5D__67216(pgroups_59435[0], pgroup_69618), Tmp3[0])[Tmp3[1]], makeNimstrLit(" ")));
		}
		
		if (contains_68578(galleles_59211[0], allele_68423)) {
		var ggroup_70467 = nimCopy(null, (Tmp4 = X5BX5D__69158(galleles_59211[0], allele_68423), Tmp4[0])[Tmp4[1]], NTI138);
		document.getElementById("ggroup").innerHTML = toJSStr(ggroup_70467);
		document.getElementById("ggrouplen").innerHTML = toJSStr(cstrToNimstr((((Tmp5 = X5BX5D__67216(ggroups_59411[0], ggroup_70467), Tmp5[0])[Tmp5[1]] != null ? (Tmp5 = X5BX5D__67216(ggroups_59411[0], ggroup_70467), Tmp5[0])[Tmp5[1]].length : 0))+""));
		document.getElementById("gother").innerHTML = toJSStr(nsuJoinSep((Tmp6 = X5BX5D__67216(ggroups_59411[0], ggroup_70467), Tmp6[0])[Tmp6[1]], makeNimstrLit(" ")));
>>>>>>> 12ba5854e3520e061756feb3cae45465ad6ab964
		}
		
	} while (false);

	
}
