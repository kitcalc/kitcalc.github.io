/* Generated by the Nim Compiler v1.6.10 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI486539267 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI486539268 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555126 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI486539295 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620757319 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI620757330 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI687865917 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI620757366 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
NTI620757366.base = NTI33554439;
var NNI687865917 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI687865917.node = NNI687865917;
NTI620757330.base = NTI33554439;
NTI620757319.base = NTI33554439;
NTI486539295.base = NTI33554439;
var NNI33555126 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555126.node = NNI33555126;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
NTI33555126.base = NTI33555125;
var NNI486539267 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI486539267, name: "\"Unambiguous\"", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI486539267, name: "\"Possible\"", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI486539267, name: "\"Assumed\"", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI486539267, name: "\"Expert assigned\"", len: 0, sons: null}}};
NTI486539267.node = NNI486539267;
var NNI486539268 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI486539267, name: "kind", sons: null}, 
{kind: 1, offset: "isExpert", len: 0, typ: NTI33554466, name: "isExpert", sons: null}, 
{kind: 1, offset: "antigen", len: 0, typ: NTI33554439, name: "antigen", sons: null}, 
{kind: 1, offset: "expertAntigen", len: 0, typ: NTI33554439, name: "expertAntigen", sons: null}]};
NTI486539268.node = NNI486539268;

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function divInt(a_33556952, b_33556953) {
        if (b_33556953 == 0) raiseDivByZero();
    if (b_33556953 == -1 && a_33556952 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556952 / b_33556953);
  

  
}

function mulInt(a_33556948, b_33556949) {
        var result = a_33556948 * b_33556949;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(13, 10);

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}
var ConstSet2 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}

function nimMax(a_33556998, b_33556999) {
    var Temporary1;

  var result_33557000 = 0;

  BeforeRet: do {
    if ((b_33556999 <= a_33556998)) {
    Temporary1 = a_33556998;
    }
    else {
    Temporary1 = b_33556999;
    }
    
    result_33557000 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33557000;

}

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}

function nimMin(a_33556994, b_33556995) {
    var Temporary1;

  var result_33556996 = 0;

  BeforeRet: do {
    if ((a_33556994 <= b_33556995)) {
    Temporary1 = a_33556994;
    }
    else {
    Temporary1 = b_33556995;
    }
    
    result_33556996 = Temporary1;
    break BeforeRet;
  } while (false);

  return result_33556996;

}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}

function modInt(a_33556956, b_33556957) {
        if (b_33556957 == 0) raiseDivByZero();
    if (b_33556957 == -1 && a_33556956 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556956 % b_33556957);
  

  
}

function eqStrings(a_33556931, b_33556932) {
        if (a_33556931 == b_33556932) return true;
    if (a_33556931 === null && b_33556932.length == 0) return true;
    if (b_33556932 === null && a_33556931.length == 0) return true;
    if ((!a_33556931) || (!b_33556932)) return false;
    var alen = a_33556931.length;
    if (alen != b_33556932.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33556931[i] != b_33556932[i]) return false;
    return true;
  

  
}

function cstrToNimstr(c_33556804) {
      var ln = c_33556804.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556804.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556804.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
var ConstSet3 = setConstr(13, 10);
var ConstSet4 = setConstr(13, 10);
var ConstSet5 = setConstr(42);
var ConstSet6 = setConstr([97, 122]);
var ConstSet7 = setConstr(32, 9, 11, 13, 10, 12);

function addChar(x_33557255, c_33557256) {
    x_33557255.push(c_33557256);

  
}
var ConstSet8 = setConstr([48, 57]);
var ConstSet9 = setConstr(0, 125);
var ConstSet10 = setConstr([48, 57]);
var ConstSet11 = setConstr([65, 90]);
var ConstSet12 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);

function reprEnum(e_33557385, typ_33557386) {
  var result_33557387 = [];

    var tmp_33557388 = false;
    var item_33557389 = typ_33557386.node.sons[e_33557385];
    tmp_33557388 = item_33557389 !== undefined
    if (tmp_33557388) {
    result_33557387 = nimCopy(null, makeNimstrLit(item_33557389.name), NTI33554439);
    }
    else {
      result_33557387 = nimCopy(null, (HEX24_335544323(e_33557385) || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI33554439);
    }
    

  return result_33557387;

}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var objectID_1006633122 = [0];

function nextPowerOfTwo_671088843(x_671088844) {
  var result_671088845 = 0;

    result_671088845 = (x_671088844 - 1);
    result_671088845 = (result_671088845 | (result_671088845 >> 16));
    result_671088845 = (result_671088845 | (result_671088845 >> 8));
    result_671088845 = (result_671088845 | (result_671088845 >> 4));
    result_671088845 = (result_671088845 | (result_671088845 >> 2));
    result_671088845 = (result_671088845 | (result_671088845 >> 1));
    result_671088845 += (1 + ((x_671088844 <= 0) ? 1 : 0));

  return result_671088845;

}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function slotsNeeded_637534250(count_637534251) {
  var result_637534252 = 0;

    result_637534252 = nextPowerOfTwo_671088843(addInt(divInt(mulInt(count_637534251, 3), 2), 4));

  return result_637534252;

}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function initTable_486539282(initialSize_486539285) {
  var result_486539291 = ({data: [], counter: 0});

    var correctSizeHEX60gensym0_486539293 = slotsNeeded_637534250(chckRange(initialSize_486539285, 0, 2147483647));
    result_486539291.counter = 0;
    result_486539291.data = new Array(chckRange(correctSizeHEX60gensym0_486539293, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym0_486539293, 0, 2147483647) ; ++i) { result_486539291.data[i] = {Field0: 0, Field1: [], Field2: []}; }
  return result_486539291;

}

function initTable_486539308(initialSize_486539311) {
  var result_486539317 = ({data: [], counter: 0});

    var correctSizeHEX60gensym2_486539319 = slotsNeeded_637534250(chckRange(initialSize_486539311, 0, 2147483647));
    result_486539317.counter = 0;
    result_486539317.data = new Array(chckRange(correctSizeHEX60gensym2_486539319, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym2_486539319, 0, 2147483647) ; ++i) { result_486539317.data[i] = {Field0: 0, Field1: [], Field2: []}; }
  return result_486539317;

}

function initTable_486539349(initialSize_486539352) {
  var result_486539358 = ({data: [], counter: 0});

    var correctSizeHEX60gensym4_486539360 = slotsNeeded_637534250(chckRange(initialSize_486539352, 0, 2147483647));
    result_486539358.counter = 0;
    result_486539358.data = new Array(chckRange(correctSizeHEX60gensym4_486539360, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym4_486539360, 0, 2147483647) ; ++i) { result_486539358.data[i] = {Field0: 0, Field1: [], Field2: ({kind: 0, isExpert: false, antigen: [], expertAntigen: []})}; }
  return result_486539358;

}
var galleles_486539307 = [initTable_486539282(32)];
var ggroups_486539333 = [initTable_486539308(32)];
var palleles_486539338 = [initTable_486539282(32)];
var pgroups_486539343 = [initTable_486539308(32)];
var alleleIDs_486539348 = [initTable_486539282(32)];
var serological_486539374 = [initTable_486539349(32)];

function newSeq_452985301(len_452985303) {
  var result_452985304 = [];

    result_452985304 = new Array(len_452985303); for (var i = 0 ; i < len_452985303 ; ++i) { result_452985304[i] = []; }
  return result_452985304;

}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_486542233 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486542233 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_486542233;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_486542233 = addInt(i_486542233, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet2[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function substr_33557906(s_33557907, first_33557908, last_33557909) {
  var result_33557910 = [];

    var first_33557911 = nimMax(first_33557908, 0);
    var L_33557912 = nimMax(addInt(subInt(nimMin(last_33557909, (s_33557907).length - 1), first_33557911), 1), 0);
    result_33557910 = nimCopy(null, mnewString(chckRange(L_33557912, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_33557917 = 0;
      var colontmp__486542236 = 0;
      colontmp__486542236 = subInt(L_33557912, 1);
      var res_486542237 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_486542237 <= colontmp__486542236)) break Label3;
            i_33557917 = res_486542237;
            result_33557910[chckIndx(i_33557917, 0, (result_33557910).length - 1)] = s_33557907[chckIndx(addInt(i_33557917, first_33557911), 0, (s_33557907).length - 1)];
            res_486542237 = addInt(res_486542237, 1);
          }
      } while (false);
    } while (false);

  return result_33557910;

}

function startsWith_620758300(s_620758301, prefix_620758302) {
    var Temporary1;

  var result_620758303 = false;

    if (!(0 < (s_620758301).length)) Temporary1 = false; else {      Temporary1 = (s_620758301[chckIndx(0, 0, (s_620758301).length - 1)] == prefix_620758302);    }    result_620758303 = Temporary1;

  return result_620758303;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function substrEq_620757221(s_620757222, pos_620757223, substr_620757224) {
  var result_620757225 = false;

  BeforeRet: do {
    var i_620757226 = 0;
    var length_620757227 = (substr_620757224).length;
    Label1: do {
        Label2: while (true) {
        if (!(((i_620757226 < length_620757227) && (addInt(pos_620757223, i_620757226) < (s_620757222).length)) && (s_620757222[chckIndx(addInt(pos_620757223, i_620757226), 0, (s_620757222).length - 1)] == substr_620757224[chckIndx(i_620757226, 0, (substr_620757224).length - 1)]))) break Label2;
          i_620757226 = addInt(i_620757226, 1);
        }
    } while (false);
    result_620757225 = (i_620757226 == length_620757227);
    break BeforeRet;
  } while (false);

  return result_620757225;

}

function nsuSplitString(s_620757513, sep_620757514, maxsplit_620757515) {
  var result_620757516 = [];

    if (!((0 < (sep_620757514).length))) {
    failedAssertImpl_218103864(makeNimstrLit("strutils.nim(739, 11) `sep.len > 0` "));
    }
    
    result_620757516 = nimCopy(null, [], NTI620757366);
    Label1: do {
      var xHEX60gensym72_620757527 = [];
      var lastHEX60gensym41_486542242 = 0;
      var splitsHEX60gensym41_486542243 = maxsplit_620757515;
      Label2: do {
          Label3: while (true) {
          if (!(lastHEX60gensym41_486542242 <= (s_620757513).length)) break Label3;
            var firstHEX60gensym41_486542245 = lastHEX60gensym41_486542242;
            Label4: do {
                Label5: while (true) {
                if (!((lastHEX60gensym41_486542242 < (s_620757513).length) && !(substrEq_620757221(s_620757513, lastHEX60gensym41_486542242, sep_620757514)))) break Label5;
                  lastHEX60gensym41_486542242 = addInt(lastHEX60gensym41_486542242, 1);
                }
            } while (false);
            if ((splitsHEX60gensym41_486542243 == 0)) {
            lastHEX60gensym41_486542242 = (s_620757513).length;
            }
            
            xHEX60gensym72_620757527 = substr_33557906(s_620757513, firstHEX60gensym41_486542245, subInt(lastHEX60gensym41_486542242, 1));
            var Temporary6 = nimCopy(null, xHEX60gensym72_620757527, NTI33554439);
            result_620757516.push(Temporary6);;
            if ((splitsHEX60gensym41_486542243 == 0)) {
            break Label2;
            }
            
            splitsHEX60gensym41_486542243 = subInt(splitsHEX60gensym41_486542243, 1);
            lastHEX60gensym41_486542242 = addInt(lastHEX60gensym41_486542242, (sep_620757514).length);
          }
      } while (false);
    } while (false);

  return result_620757516;

}

function HEX5BHEX5D_939524972(s_939524975, x_939524976) {
  var result_939524977 = [];

    var a_939524979 = x_939524976.a;
    var L_939524981 = addInt(subInt(x_939524976.b, a_939524979), 1);
    result_939524977 = nimCopy(null, mnewString(chckRange(L_939524981, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_939524986 = 0;
      var i_486542249 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486542249 < L_939524981)) break Label3;
            i_939524986 = i_486542249;
            result_939524977[chckIndx(i_939524986, 0, (result_939524977).length - 1)] = s_939524975[chckIndx(addInt(i_939524986, a_939524979), 0, (s_939524975).length - 1)];
            i_486542249 = addInt(i_486542249, 1);
          }
      } while (false);
    } while (false);

  return result_939524977;

}

function HEX2EHEX2E_939524947(a_939524950, b_939524951) {
  var result_939524952 = ({a: 0, b: 0});

    result_939524952 = nimCopy(result_939524952, {a: a_939524950, b: b_939524951}, NTI687865917);

  return result_939524952;

}

function nsuRepeatChar(c_620758011, count_620758012) {
  var result_620758013 = [];

    result_620758013 = nimCopy(null, mnewString(count_620758012), NTI33554439);
    Label1: do {
      var i_620758018 = 0;
      var colontmp__486542252 = 0;
      colontmp__486542252 = subInt(count_620758012, 1);
      var res_486542253 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_486542253 <= colontmp__486542252)) break Label3;
            i_620758018 = res_486542253;
            result_620758013[chckIndx(i_620758018, 0, (result_620758013).length - 1)] = c_620758011;
            res_486542253 = addInt(res_486542253, 1);
          }
      } while (false);
    } while (false);

  return result_620758013;

}

function spaces_620758028(n_620758029) {
  var result_620758030 = [];

    result_620758030 = nimCopy(null, nsuRepeatChar(32, n_620758029), NTI33554439);

  return result_620758030;

}

function outputMeta_486539404(line_486539405) {
    var fields_486539406 = nsuSplitString(line_486539405, makeNimstrLit(": "), 1);
    var key_486539430 = HEX5BHEX5D_939524972(fields_486539406[chckIndx(0, 0, (fields_486539406).length - 1)], HEX2EHEX2E_939524947(2, subInt((fields_486539406[chckIndx(0, 0, (fields_486539406).length - 1)]).length, 1)));
    var value_486539431 = nimCopy(null, fields_486539406[chckIndx(1, 0, (fields_486539406).length - 1)], NTI33554439);
    rawEcho(key_486539430, spaces_620758028(chckRange(subInt(20, (key_486539430).length), 0, 2147483647)), value_486539431);

  
}

function nsuSplitChar(s_620757483, sep_620757484, maxsplit_620757485) {
  var result_620757486 = [];

    result_620757486 = nimCopy(null, [], NTI620757330);
    Label1: do {
      var xHEX60gensym67_620757492 = [];
      var lastHEX60gensym34_486542258 = 0;
      var splitsHEX60gensym34_486542259 = maxsplit_620757485;
      Label2: do {
          Label3: while (true) {
          if (!(lastHEX60gensym34_486542258 <= (s_620757483).length)) break Label3;
            var firstHEX60gensym34_486542261 = lastHEX60gensym34_486542258;
            Label4: do {
                Label5: while (true) {
                if (!((lastHEX60gensym34_486542258 < (s_620757483).length) && !((s_620757483[chckIndx(lastHEX60gensym34_486542258, 0, (s_620757483).length - 1)] == sep_620757484)))) break Label5;
                  lastHEX60gensym34_486542258 = addInt(lastHEX60gensym34_486542258, 1);
                }
            } while (false);
            if ((splitsHEX60gensym34_486542259 == 0)) {
            lastHEX60gensym34_486542258 = (s_620757483).length;
            }
            
            xHEX60gensym67_620757492 = substr_33557906(s_620757483, firstHEX60gensym34_486542261, subInt(lastHEX60gensym34_486542258, 1));
            var Temporary6 = nimCopy(null, xHEX60gensym67_620757492, NTI33554439);
            result_620757486.push(Temporary6);;
            if ((splitsHEX60gensym34_486542259 == 0)) {
            break Label2;
            }
            
            splitsHEX60gensym34_486542259 = subInt(splitsHEX60gensym34_486542259, 1);
            lastHEX60gensym34_486542258 = addInt(lastHEX60gensym34_486542258, 1);
          }
      } while (false);
    } while (false);

  return result_620757486;

}

function imul_1006633250(a_1006633251, b_1006633252) {
  var result_1006633253 = 0;

    var mask_1006633254 = 65535;
    var aHi_1006633259 = ((a_1006633251 >>> 16) & mask_1006633254);
    var aLo_1006633260 = (a_1006633251 & mask_1006633254);
    var bHi_1006633265 = ((b_1006633252 >>> 16) & mask_1006633254);
    var bLo_1006633266 = (b_1006633252 & mask_1006633254);
    result_1006633253 = ((((aLo_1006633260 * bLo_1006633266) >>> 0) + (((((aHi_1006633259 * bLo_1006633266) >>> 0) + ((aLo_1006633260 * bHi_1006633265) >>> 0)) >>> 0) << 16)) >>> 0);

  return result_1006633253;

}

function rotl32_1006633271(x_1006633272, r_1006633273) {
  var result_1006633274 = 0;

    result_1006633274 = ((x_1006633272 << r_1006633273) | (x_1006633272 >>> subInt(32, r_1006633273)));

  return result_1006633274;

}

function murmurHash_1006633283(x_1006633284) {
  var result_1006633285 = 0;

  BeforeRet: do {
    var size_1006633294 = (x_1006633284).length;
    var stepSize_1006633295 = 4;
    var n_1006633296 = divInt(size_1006633294, stepSize_1006633295);
    var h1_1006633297 = 0;
    var i_1006633298 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_1006633298 < mulInt(n_1006633296, stepSize_1006633295))) break Label2;
          var k1_1006633299 = 0;
          var j_1006633300 = stepSize_1006633295;
          Label3: do {
              Label4: while (true) {
              if (!(0 < j_1006633300)) break Label4;
                j_1006633300 = subInt(j_1006633300, 1);
                k1_1006633299 = ((k1_1006633299 << 8) | x_1006633284[chckIndx(addInt(i_1006633298, j_1006633300), 0, (x_1006633284).length - 1)]);
              }
          } while (false);
          i_1006633298 = addInt(i_1006633298, stepSize_1006633295);
          k1_1006633299 = imul_1006633250(k1_1006633299, 3432918353);
          k1_1006633299 = rotl32_1006633271(k1_1006633299, 15);
          k1_1006633299 = imul_1006633250(k1_1006633299, 461845907);
          h1_1006633297 = (h1_1006633297 ^ k1_1006633299);
          h1_1006633297 = rotl32_1006633271(h1_1006633297, 13);
          h1_1006633297 = ((((h1_1006633297 * 5) >>> 0) + 3864292196) >>> 0);
        }
    } while (false);
    var k1_1006633317 = 0;
    var rem_1006633318 = modInt(size_1006633294, stepSize_1006633295);
    Label5: do {
        Label6: while (true) {
        if (!(0 < rem_1006633318)) break Label6;
          rem_1006633318 = subInt(rem_1006633318, 1);
          k1_1006633317 = ((k1_1006633317 << 8) | x_1006633284[chckIndx(addInt(i_1006633298, rem_1006633318), 0, (x_1006633284).length - 1)]);
        }
    } while (false);
    k1_1006633317 = imul_1006633250(k1_1006633317, 3432918353);
    k1_1006633317 = rotl32_1006633271(k1_1006633317, 15);
    k1_1006633317 = imul_1006633250(k1_1006633317, 461845907);
    h1_1006633297 = (h1_1006633297 ^ k1_1006633317);
    h1_1006633297 = (h1_1006633297 ^ size_1006633294);
    h1_1006633297 = (h1_1006633297 ^ (h1_1006633297 >>> 16));
    h1_1006633297 = imul_1006633250(h1_1006633297, 2246822507);
    h1_1006633297 = (h1_1006633297 ^ (h1_1006633297 >>> 13));
    h1_1006633297 = imul_1006633250(h1_1006633297, 3266489909);
    h1_1006633297 = (h1_1006633297 ^ (h1_1006633297 >>> 16));
    result_1006633285 = (h1_1006633297 | 0);
    break BeforeRet;
  } while (false);

  return result_1006633285;

}

function hash_1006633382(x_1006633383) {
  var result_1006633384 = 0;

    result_1006633384 = murmurHash_1006633283((x_1006633383.slice(0, (x_1006633383).length - 1 + 1)));

  return result_1006633384;

}

function isFilled_637534239(hcode_637534240) {
  var result_637534241 = false;

    result_637534241 = !((hcode_637534240 == 0));

  return result_637534241;

}

function nextTry_637534242(h_637534243, maxHash_637534244) {
  var result_637534245 = 0;

    result_637534245 = (addInt(h_637534243, 1) & maxHash_637534244);

  return result_637534245;

}

function rawGet_486539572(t_486539575, key_486539576, hc_486539577, hc_486539577_Idx) {
            var Temporary3;

  var result_486539578 = 0;

  BeforeRet: do {
    hc_486539577[hc_486539577_Idx] = hash_1006633382(key_486539576);
    if ((hc_486539577[hc_486539577_Idx] == 0)) {
    hc_486539577[hc_486539577_Idx] = 314159265;
    }
    
    if (((t_486539575.data).length == 0)) {
    result_486539578 = -1;
    break BeforeRet;
    }
    
    var h_486539629 = (hc_486539577[hc_486539577_Idx] & (t_486539575.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_637534239(t_486539575.data[chckIndx(h_486539629, 0, (t_486539575.data).length - 1)].Field0)) break Label2;
            if (!(t_486539575.data[chckIndx(h_486539629, 0, (t_486539575.data).length - 1)].Field0 == hc_486539577[hc_486539577_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_486539575.data[chckIndx(h_486539629, 0, (t_486539575.data).length - 1)].Field1, key_486539576);            }          if (Temporary3) {
          result_486539578 = h_486539629;
          break BeforeRet;
          }
          
          h_486539629 = nextTry_637534242(h_486539629, (t_486539575.data).length - 1);
        }
    } while (false);
    result_486539578 = subInt(-1, h_486539629);
  } while (false);

  return result_486539578;

}

function mustRehash_486539908(t_486539910) {
  var result_486539911 = false;

    if (!((t_486539910.counter < (t_486539910.data).length))) {
    failedAssertImpl_218103864(makeNimstrLit("hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_486539911 = ((mulInt((t_486539910.data).length, 2) < mulInt(t_486539910.counter, 3)) || (subInt((t_486539910.data).length, t_486539910.counter) < 4));

  return result_486539911;

}

function rawInsert_486540357(t_486540361, data_486540362, data_486540362_Idx, key_486540363, val_486540364, hc_486540365, h_486540366) {
    data_486540362[data_486540362_Idx][chckIndx(h_486540366, 0, (data_486540362[data_486540362_Idx]).length - 1)].Field1 = nimCopy(null, key_486540363, NTI33554439);
    data_486540362[data_486540362_Idx][chckIndx(h_486540366, 0, (data_486540362[data_486540362_Idx]).length - 1)].Field2 = nimCopy(null, val_486540364, NTI486539295);
    data_486540362[data_486540362_Idx][chckIndx(h_486540366, 0, (data_486540362[data_486540362_Idx]).length - 1)].Field0 = hc_486540365;

  
}

function enlarge_486540063(t_486540066) {
    var n_486540069 = [];
    n_486540069 = new Array(chckRange(mulInt((t_486540066.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_486540066.data).length, 2), 0, 2147483647) ; ++i) { n_486540069[i] = {Field0: 0, Field1: [], Field2: []}; }    var Temporary1 = t_486540066.data; t_486540066.data = n_486540069; n_486540069 = Temporary1;    Label2: do {
      var i_486540133 = 0;
      var colontmp__486542269 = 0;
      colontmp__486542269 = (n_486540069).length - 1;
      var res_486542271 = 0;
      Label3: do {
          Label4: while (true) {
          if (!(res_486542271 <= colontmp__486542269)) break Label4;
            i_486540133 = res_486542271;
            var eh_486540187 = n_486540069[chckIndx(i_486540133, 0, (n_486540069).length - 1)].Field0;
            if (isFilled_637534239(eh_486540187)) {
            var j_486540191 = (eh_486540187 & (t_486540066.data).length - 1);
            Label5: do {
                Label6: while (true) {
                if (!isFilled_637534239(t_486540066.data[chckIndx(j_486540191, 0, (t_486540066.data).length - 1)].Field0)) break Label6;
                  j_486540191 = nextTry_637534242(j_486540191, (t_486540066.data).length - 1);
                }
            } while (false);
            rawInsert_486540357(t_486540066, t_486540066, "data", n_486540069[chckIndx(i_486540133, 0, (n_486540069).length - 1)].Field1, n_486540069[chckIndx(i_486540133, 0, (n_486540069).length - 1)].Field2, eh_486540187, j_486540191);
            }
            
            res_486542271 = addInt(res_486542271, 1);
          }
      } while (false);
    } while (false);

  
}

function rawGetKnownHC_486540526(t_486540529, key_486540530, hc_486540531) {
  var result_486540532 = 0;

  BeforeRet: do {
    if (((t_486540529.data).length == 0)) {
    result_486540532 = -1;
    break BeforeRet;
    }
    
    var h_486540583 = (hc_486540531 & (t_486540529.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_637534239(t_486540529.data[chckIndx(h_486540583, 0, (t_486540529.data).length - 1)].Field0)) break Label2;
          if (((t_486540529.data[chckIndx(h_486540583, 0, (t_486540529.data).length - 1)].Field0 == hc_486540531) && eqStrings(t_486540529.data[chckIndx(h_486540583, 0, (t_486540529.data).length - 1)].Field1, key_486540530))) {
          result_486540532 = h_486540583;
          break BeforeRet;
          }
          
          h_486540583 = nextTry_637534242(h_486540583, (t_486540529.data).length - 1);
        }
    } while (false);
    result_486540532 = subInt(-1, h_486540583);
  } while (false);

  return result_486540532;

}

function HEX5BHEX5DHEX3D_486539511(t_486539514, key_486539515, val_486539516) {
    if (((t_486539514.data).length == 0)) {
    var correctSizeHEX60gensym8_486539566 = slotsNeeded_637534250(32);
    t_486539514.counter = 0;
    t_486539514.data = new Array(chckRange(correctSizeHEX60gensym8_486539566, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym8_486539566, 0, 2147483647) ; ++i) { t_486539514.data[i] = {Field0: 0, Field1: [], Field2: []}; }    }
    
    var hc_486539571 = [0];
    var index_486539801 = rawGet_486539572(t_486539514, key_486539515, hc_486539571, 0);
    if ((0 <= index_486539801)) {
    t_486539514.data[chckIndx(index_486539801, 0, (t_486539514.data).length - 1)].Field2 = nimCopy(null, val_486539516, NTI486539295);
    }
    else {
      if (((t_486539514.data).length == 0)) {
      var correctSizeHEX60gensym13_486539903 = slotsNeeded_637534250(32);
      t_486539514.counter = 0;
      t_486539514.data = new Array(chckRange(correctSizeHEX60gensym13_486539903, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym13_486539903, 0, 2147483647) ; ++i) { t_486539514.data[i] = {Field0: 0, Field1: [], Field2: []}; }      }
      
      if (mustRehash_486539908(t_486539514)) {
      enlarge_486540063(t_486539514);
      index_486539801 = rawGetKnownHC_486540526(t_486539514, key_486539515, hc_486539571[0]);
      }
      
      index_486539801 = subInt(-1, index_486539801);
      rawInsert_486540357(t_486539514, t_486539514, "data", key_486539515, val_486539516, hc_486539571[0], index_486539801);
      t_486539514.counter = addInt(t_486539514.counter, 1);
    }
    

  
}

function rawGet_486540869(t_486540872, key_486540873, hc_486540874, hc_486540874_Idx) {
            var Temporary3;

  var result_486540875 = 0;

  BeforeRet: do {
    hc_486540874[hc_486540874_Idx] = hash_1006633382(key_486540873);
    if ((hc_486540874[hc_486540874_Idx] == 0)) {
    hc_486540874[hc_486540874_Idx] = 314159265;
    }
    
    if (((t_486540872.data).length == 0)) {
    result_486540875 = -1;
    break BeforeRet;
    }
    
    var h_486540926 = (hc_486540874[hc_486540874_Idx] & (t_486540872.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_637534239(t_486540872.data[chckIndx(h_486540926, 0, (t_486540872.data).length - 1)].Field0)) break Label2;
            if (!(t_486540872.data[chckIndx(h_486540926, 0, (t_486540872.data).length - 1)].Field0 == hc_486540874[hc_486540874_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_486540872.data[chckIndx(h_486540926, 0, (t_486540872.data).length - 1)].Field1, key_486540873);            }          if (Temporary3) {
          result_486540875 = h_486540926;
          break BeforeRet;
          }
          
          h_486540926 = nextTry_637534242(h_486540926, (t_486540872.data).length - 1);
        }
    } while (false);
    result_486540875 = subInt(-1, h_486540926);
  } while (false);

  return result_486540875;

}

function mustRehash_486541205(t_486541207) {
  var result_486541208 = false;

    if (!((t_486541207.counter < (t_486541207.data).length))) {
    failedAssertImpl_218103864(makeNimstrLit("hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_486541208 = ((mulInt((t_486541207.data).length, 2) < mulInt(t_486541207.counter, 3)) || (subInt((t_486541207.data).length, t_486541207.counter) < 4));

  return result_486541208;

}

function rawInsert_486541654(t_486541658, data_486541659, data_486541659_Idx, key_486541660, val_486541661, hc_486541662, h_486541663) {
    data_486541659[data_486541659_Idx][chckIndx(h_486541663, 0, (data_486541659[data_486541659_Idx]).length - 1)].Field1 = nimCopy(null, key_486541660, NTI33554439);
    data_486541659[data_486541659_Idx][chckIndx(h_486541663, 0, (data_486541659[data_486541659_Idx]).length - 1)].Field2 = nimCopy(null, val_486541661, NTI33554439);
    data_486541659[data_486541659_Idx][chckIndx(h_486541663, 0, (data_486541659[data_486541659_Idx]).length - 1)].Field0 = hc_486541662;

  
}

function enlarge_486541360(t_486541363) {
    var n_486541366 = [];
    n_486541366 = new Array(chckRange(mulInt((t_486541363.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_486541363.data).length, 2), 0, 2147483647) ; ++i) { n_486541366[i] = {Field0: 0, Field1: [], Field2: []}; }    var Temporary1 = t_486541363.data; t_486541363.data = n_486541366; n_486541366 = Temporary1;    Label2: do {
      var i_486541430 = 0;
      var colontmp__486542277 = 0;
      colontmp__486542277 = (n_486541366).length - 1;
      var res_486542278 = 0;
      Label3: do {
          Label4: while (true) {
          if (!(res_486542278 <= colontmp__486542277)) break Label4;
            i_486541430 = res_486542278;
            var eh_486541484 = n_486541366[chckIndx(i_486541430, 0, (n_486541366).length - 1)].Field0;
            if (isFilled_637534239(eh_486541484)) {
            var j_486541488 = (eh_486541484 & (t_486541363.data).length - 1);
            Label5: do {
                Label6: while (true) {
                if (!isFilled_637534239(t_486541363.data[chckIndx(j_486541488, 0, (t_486541363.data).length - 1)].Field0)) break Label6;
                  j_486541488 = nextTry_637534242(j_486541488, (t_486541363.data).length - 1);
                }
            } while (false);
            rawInsert_486541654(t_486541363, t_486541363, "data", n_486541366[chckIndx(i_486541430, 0, (n_486541366).length - 1)].Field1, n_486541366[chckIndx(i_486541430, 0, (n_486541366).length - 1)].Field2, eh_486541484, j_486541488);
            }
            
            res_486542278 = addInt(res_486542278, 1);
          }
      } while (false);
    } while (false);

  
}

function rawGetKnownHC_486541823(t_486541826, key_486541827, hc_486541828) {
  var result_486541829 = 0;

  BeforeRet: do {
    if (((t_486541826.data).length == 0)) {
    result_486541829 = -1;
    break BeforeRet;
    }
    
    var h_486541880 = (hc_486541828 & (t_486541826.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_637534239(t_486541826.data[chckIndx(h_486541880, 0, (t_486541826.data).length - 1)].Field0)) break Label2;
          if (((t_486541826.data[chckIndx(h_486541880, 0, (t_486541826.data).length - 1)].Field0 == hc_486541828) && eqStrings(t_486541826.data[chckIndx(h_486541880, 0, (t_486541826.data).length - 1)].Field1, key_486541827))) {
          result_486541829 = h_486541880;
          break BeforeRet;
          }
          
          h_486541880 = nextTry_637534242(h_486541880, (t_486541826.data).length - 1);
        }
    } while (false);
    result_486541829 = subInt(-1, h_486541880);
  } while (false);

  return result_486541829;

}

function HEX5BHEX5DHEX3D_486540808(t_486540811, key_486540812, val_486540813) {
    if (((t_486540811.data).length == 0)) {
    var correctSizeHEX60gensym22_486540863 = slotsNeeded_637534250(32);
    t_486540811.counter = 0;
    t_486540811.data = new Array(chckRange(correctSizeHEX60gensym22_486540863, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym22_486540863, 0, 2147483647) ; ++i) { t_486540811.data[i] = {Field0: 0, Field1: [], Field2: []}; }    }
    
    var hc_486540868 = [0];
    var index_486541098 = rawGet_486540869(t_486540811, key_486540812, hc_486540868, 0);
    if ((0 <= index_486541098)) {
    t_486540811.data[chckIndx(index_486541098, 0, (t_486540811.data).length - 1)].Field2 = nimCopy(null, val_486540813, NTI33554439);
    }
    else {
      if (((t_486540811.data).length == 0)) {
      var correctSizeHEX60gensym27_486541200 = slotsNeeded_637534250(32);
      t_486540811.counter = 0;
      t_486540811.data = new Array(chckRange(correctSizeHEX60gensym27_486541200, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym27_486541200, 0, 2147483647) ; ++i) { t_486540811.data[i] = {Field0: 0, Field1: [], Field2: []}; }      }
      
      if (mustRehash_486541205(t_486540811)) {
      enlarge_486541360(t_486540811);
      index_486541098 = rawGetKnownHC_486541823(t_486540811, key_486540812, hc_486540868[0]);
      }
      
      index_486541098 = subInt(-1, index_486541098);
      rawInsert_486541654(t_486540811, t_486540811, "data", key_486540812, val_486540813, hc_486540868[0], index_486541098);
      t_486540811.counter = addInt(t_486540811.counter, 1);
    }
    

  
}

function raiseKeyError_486542180(key_486542182) {
    raiseException({message: (makeNimstrLit("key not found: ") || []).concat(key_486542182 || []), parent: null, m_type: NTI33555126, name: null, trace: [], up: null}, "KeyError");

  
}

function HEX5BHEX5D_486542113(t_486542116, key_486542117) {
  var result_486542118 = null;
  var result_486542118_Idx = 0;

    var hcHEX60gensym22_486542119 = [0];
    var indexHEX60gensym22_486542126 = rawGet_486539572(t_486542116, key_486542117, hcHEX60gensym22_486542119, 0);
    if ((0 <= indexHEX60gensym22_486542126)) {
    result_486542118 = t_486542116.data[chckIndx(indexHEX60gensym22_486542126, 0, (t_486542116.data).length - 1)]; result_486542118_Idx = "Field2";
    }
    else {
    raiseKeyError_486542180(key_486542117);
    }
    

  return [result_486542118, result_486542118_Idx];

}

function parseGroup(data_486539442, alleles_486539445, groups_486539448) {
            var Temporary6;
              var Temporary8;
                      var Temporary12;

    var fields_486539456 = newSeq_452985301(0);
    Label1: do {
      var line_486539457 = [];
      var first_486542224 = 0;
      var last_486542225 = 0;
      var eolpos_486542226 = 0;
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            Label4: do {
                Label5: while (true) {
                if (!((last_486542225 < (data_486539442).length) && !((ConstSet1[data_486539442[chckIndx(last_486542225, 0, (data_486539442).length - 1)]] != undefined)))) break Label5;
                  last_486542225 = addInt(last_486542225, 1);
                }
            } while (false);
            eolpos_486542226 = last_486542225;
            if ((last_486542225 < (data_486539442).length)) {
            if ((data_486539442[chckIndx(last_486542225, 0, (data_486539442).length - 1)] == 10)) {
            last_486542225 = addInt(last_486542225, 1);
            }
            else {
            if ((data_486539442[chckIndx(last_486542225, 0, (data_486539442).length - 1)] == 13)) {
            last_486542225 = addInt(last_486542225, 1);
            if (((last_486542225 < (data_486539442).length) && (data_486539442[chckIndx(last_486542225, 0, (data_486539442).length - 1)] == 10))) {
            last_486542225 = addInt(last_486542225, 1);
            }
            
            }
            }
            }
            
            if (false) {
            Temporary6 = subInt(last_486542225, 1);
            }
            else {
            Temporary6 = subInt(eolpos_486542226, 1);
            }
            
            line_486539457 = substr_33557906(data_486539442, first_486542224, Temporary6);
            Label7: do {
              if (startsWith_620758300(line_486539457, 35)) {
              outputMeta_486539404(line_486539457);
              break Label7;
              }
              
              fields_486539456 = nimCopy(null, nsuSplitChar(line_486539457, 59, -1), NTI620757319);
              if (((fields_486539456).length < 3)) {
              break Label7;
              }
              
              var locus_486539461 = nimCopy(null, fields_486539456[chckIndx(0, 0, (fields_486539456).length - 1)], NTI33554439);
              var members_486539462 = nsuSplitChar(fields_486539456[chckIndx(1, 0, (fields_486539456).length - 1)], 47, -1);
              if (((fields_486539456[chckIndx(2, 0, (fields_486539456).length - 1)]).length == 0)) {
              Temporary8 = (locus_486539461 || []).concat(members_486539462[chckIndx(0, 0, (members_486539462).length - 1)] || []);
              }
              else {
              Temporary8 = (locus_486539461 || []).concat(fields_486539456[chckIndx(2, 0, (fields_486539456).length - 1)] || []);
              }
              
              var group_486539463 = nimCopy(null, Temporary8, NTI33554439);
              HEX5BHEX5DHEX3D_486539511(groups_486539448, group_486539463, []);
              Label9: do {
                var allele_486540766 = [];
                var i_486542219 = 0;
                var L_486542220 = (members_486539462).length;
                Label10: do {
                    Label11: while (true) {
                    if (!(i_486542219 < L_486542220)) break Label11;
                      allele_486540766 = members_486539462[chckIndx(i_486542219, 0, (members_486539462).length - 1)];
                      var name_486540767 = (locus_486539461 || []).concat(allele_486540766 || []);
                      HEX5BHEX5DHEX3D_486540808(alleles_486539445, name_486540767, group_486539463);
                      var Temporary13 = nimCopy(null, name_486540767, NTI33554439);
                      (Temporary12 = HEX5BHEX5D_486542113(groups_486539448, group_486539463), Temporary12)[0][Temporary12[1]].push(Temporary13);;
                      i_486542219 = addInt(i_486542219, 1);
                      if (!(((members_486539462).length == L_486542220))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
            } while (false);
            if ((eolpos_486542226 == last_486542225)) {
            break Label2;
            }
            
            first_486542224 = last_486542225;
          }
      } while (false);
    } while (false);

  
}

function initGgroupData(gdata_486542282) {
    parseGroup(cstrToNimstr(gdata_486542282), galleles_486539307[0], ggroups_486539333[0]);

  
}

function initPgroupData(pdata_486542284) {
    parseGroup(cstrToNimstr(pdata_486542284), palleles_486539338[0], pgroups_486539343[0]);

  
}

function nsuStartsWith(s_620758305, prefix_620758306) {
            var Temporary3;

  var result_620758307 = false;

  BeforeRet: do {
    var prefixLenHEX60gensym141_620758312 = (prefix_620758306).length;
    var sLenHEX60gensym141_620758313 = (s_620758305).length;
    var iHEX60gensym141_620758314 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          if ((prefixLenHEX60gensym141_620758312 <= iHEX60gensym141_620758314)) {
          result_620758307 = true;
          break BeforeRet;
          }
          
            if ((sLenHEX60gensym141_620758313 <= iHEX60gensym141_620758314)) Temporary3 = true; else {              Temporary3 = !((s_620758305[chckIndx(iHEX60gensym141_620758314, 0, (s_620758305).length - 1)] == prefix_620758306[chckIndx(iHEX60gensym141_620758314, 0, (prefix_620758306).length - 1)]));            }          if (Temporary3) {
          result_620758307 = false;
          break BeforeRet;
          }
          
          iHEX60gensym141_620758314 = addInt(iHEX60gensym141_620758314, 1);
        }
    } while (false);
  } while (false);

  return result_620758307;

}

function initAlleleIdData(alleleData_486542286) {
            var Temporary6;

    var fields_486542287 = [];
    Label1: do {
      var line_486542288 = [];
      var colontmp__486542340 = [];
      colontmp__486542340 = cstrToNimstr(alleleData_486542286);
      var first_486542341 = 0;
      var last_486542342 = 0;
      var eolpos_486542343 = 0;
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            Label4: do {
                Label5: while (true) {
                if (!((last_486542342 < (colontmp__486542340).length) && !((ConstSet3[colontmp__486542340[chckIndx(last_486542342, 0, (colontmp__486542340).length - 1)]] != undefined)))) break Label5;
                  last_486542342 = addInt(last_486542342, 1);
                }
            } while (false);
            eolpos_486542343 = last_486542342;
            if ((last_486542342 < (colontmp__486542340).length)) {
            if ((colontmp__486542340[chckIndx(last_486542342, 0, (colontmp__486542340).length - 1)] == 10)) {
            last_486542342 = addInt(last_486542342, 1);
            }
            else {
            if ((colontmp__486542340[chckIndx(last_486542342, 0, (colontmp__486542340).length - 1)] == 13)) {
            last_486542342 = addInt(last_486542342, 1);
            if (((last_486542342 < (colontmp__486542340).length) && (colontmp__486542340[chckIndx(last_486542342, 0, (colontmp__486542340).length - 1)] == 10))) {
            last_486542342 = addInt(last_486542342, 1);
            }
            
            }
            }
            }
            
            if (false) {
            Temporary6 = subInt(last_486542342, 1);
            }
            else {
            Temporary6 = subInt(eolpos_486542343, 1);
            }
            
            line_486542288 = substr_33557906(colontmp__486542340, first_486542341, Temporary6);
            Label7: do {
              if (startsWith_620758300(line_486542288, 35)) {
              outputMeta_486539404(line_486542288);
              break Label7;
              }
              
              if (nsuStartsWith(line_486542288, makeNimstrLit("AlleleID"))) {
              break Label7;
              }
              
              fields_486542287 = nimCopy(null, nsuSplitChar(line_486542288, 44, -1), NTI620757319);
              if (!(((fields_486542287).length == 2))) {
              break Label7;
              }
              
              HEX5BHEX5DHEX3D_486540808(alleleIDs_486539348[0], fields_486542287[chckIndx(1, 0, (fields_486542287).length - 1)], fields_486542287[chckIndx(0, 0, (fields_486542287).length - 1)]);
            } while (false);
            if ((eolpos_486542343 == last_486542342)) {
            break Label2;
            }
            
            first_486542341 = last_486542342;
          }
      } while (false);
    } while (false);

  
}

function nsuStrip(s_620759260, leading_620759261, trailing_620759262, chars_620759263) {
          var Temporary5;

  var result_620759264 = [];

    var first_620759265 = 0;
    var last_620759266 = subInt((s_620759260).length, 1);
    if (leading_620759261) {
    Label1: do {
        Label2: while (true) {
        if (!((first_620759265 <= last_620759266) && (chars_620759263[s_620759260[chckIndx(first_620759265, 0, (s_620759260).length - 1)]] != undefined))) break Label2;
          first_620759265 = addInt(first_620759265, 1);
        }
    } while (false);
    }
    
    if (trailing_620759262) {
    Label3: do {
        Label4: while (true) {
          if (!(first_620759265 <= last_620759266)) Temporary5 = false; else {            Temporary5 = (chars_620759263[s_620759260[chckIndx(last_620759266, 0, (s_620759260).length - 1)]] != undefined);          }        if (!Temporary5) break Label4;
          last_620759266 = subInt(last_620759266, 1);
        }
    } while (false);
    }
    
    result_620759264 = nimCopy(null, substr_33557906(s_620759260, first_620759265, last_620759266), NTI33554439);

  return result_620759264;

}

function antigenPrefix_486542347(locus_486542348) {
    var Temporary1;

  var result_486542349 = [];

    switch (toJSStr(locus_486542348)) {
    case "A":
    case "B":
      Temporary1 = locus_486542348;
      break;
    case "C":
      Temporary1 = makeNimstrLit("Cw");
      break;
    case "DRB1":
    case "DRB3":
    case "DRB4":
    case "DRB5":
      Temporary1 = makeNimstrLit("DR");
      break;
    case "DQB1":
      Temporary1 = makeNimstrLit("DQ");
      break;
    default: 
      Temporary1 = [];
      break;
    }
    result_486542349 = nimCopy(null, Temporary1, NTI33554439);

  return result_486542349;

}

function parseAntigen_486542350(fields_486542351) {
            var Temporary4;
            var Temporary5;

  var result_486542352 = ({kind: 0, isExpert: false, antigen: [], expertAntigen: []});

  BeforeRet: do {
    var locus_486542353 = nsuStrip(fields_486542351[chckIndx(0, 0, (fields_486542351).length - 1)], false, true, ConstSet5);
    var prefix_486542354 = antigenPrefix_486542347(locus_486542353);
    var isExpert_486542355 = !(((fields_486542351[chckIndx(5, 0, (fields_486542351).length - 1)]).length == 0));
    Label1: do {
      var field_486542421 = 0;
      var i_486543768 = 0;
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            field_486542421 = (Temporary4 = new Int32Array([2, 3, 4]), Temporary4)[chckIndx(i_486543768, 0, (Temporary4).length - 1)];
            if (!(eqStrings(fields_486542351[chckIndx(field_486542421, 0, (fields_486542351).length - 1)], []))) {
            var ag_486542422 = nimCopy(null, fields_486542351[chckIndx(field_486542421, 0, (fields_486542351).length - 1)], NTI33554439);
            switch (toJSStr(ag_486542422)) {
            case "0":
              Temporary5 = makeNimstrLit("(nullallel)");
              break;
            case "0/?":
              Temporary5 = makeNimstrLit("(nullallel/oklart)");
              break;
            case "?":
              Temporary5 = makeNimstrLit("ej tilldelat");
              break;
            default: 
              Temporary5 = (prefix_486542354 || []).concat(ag_486542422 || []);
              break;
            }
            var compound_486542423 = nimCopy(null, Temporary5, NTI33554439);
            var kind_486542424 = chckRange(field_486542421, 0, 3);
            result_486542352 = nimCopy(result_486542352, {kind: kind_486542424, isExpert: isExpert_486542355, antigen: nimCopy(null, compound_486542423, NTI33554439), expertAntigen: (prefix_486542354 || []).concat(fields_486542351[chckIndx(5, 0, (fields_486542351).length - 1)] || [])}, NTI486539268);
            break BeforeRet;
            }
            
            if ((2 <= i_486543768)) {
            break Label2;
            }
            
            i_486543768 = addInt(i_486543768, 1);
          }
      } while (false);
    } while (false);
    if (true) {
    failedAssertImpl_218103864(makeNimstrLit("gpgroup.nim(128, 10) `false` no antigen found!"));
    }
    
  } while (false);

  return result_486542352;

}

function rawGet_486542567(t_486542570, key_486542571, hc_486542572, hc_486542572_Idx) {
            var Temporary3;

  var result_486542573 = 0;

  BeforeRet: do {
    hc_486542572[hc_486542572_Idx] = hash_1006633382(key_486542571);
    if ((hc_486542572[hc_486542572_Idx] == 0)) {
    hc_486542572[hc_486542572_Idx] = 314159265;
    }
    
    if (((t_486542570.data).length == 0)) {
    result_486542573 = -1;
    break BeforeRet;
    }
    
    var h_486542624 = (hc_486542572[hc_486542572_Idx] & (t_486542570.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_637534239(t_486542570.data[chckIndx(h_486542624, 0, (t_486542570.data).length - 1)].Field0)) break Label2;
            if (!(t_486542570.data[chckIndx(h_486542624, 0, (t_486542570.data).length - 1)].Field0 == hc_486542572[hc_486542572_Idx])) Temporary3 = false; else {              Temporary3 = eqStrings(t_486542570.data[chckIndx(h_486542624, 0, (t_486542570.data).length - 1)].Field1, key_486542571);            }          if (Temporary3) {
          result_486542573 = h_486542624;
          break BeforeRet;
          }
          
          h_486542624 = nextTry_637534242(h_486542624, (t_486542570.data).length - 1);
        }
    } while (false);
    result_486542573 = subInt(-1, h_486542624);
  } while (false);

  return result_486542573;

}

function mustRehash_486542903(t_486542905) {
  var result_486542906 = false;

    if (!((t_486542905.counter < (t_486542905.data).length))) {
    failedAssertImpl_218103864(makeNimstrLit("hashcommon.nim(29, 9) `\x0At.counter < t.dataLen` "));
    }
    
    result_486542906 = ((mulInt((t_486542905.data).length, 2) < mulInt(t_486542905.counter, 3)) || (subInt((t_486542905.data).length, t_486542905.counter) < 4));

  return result_486542906;

}

function rawInsert_486543352(t_486543356, data_486543357, data_486543357_Idx, key_486543358, val_486543359, hc_486543360, h_486543361) {
    data_486543357[data_486543357_Idx][chckIndx(h_486543361, 0, (data_486543357[data_486543357_Idx]).length - 1)].Field1 = nimCopy(null, key_486543358, NTI33554439);
    data_486543357[data_486543357_Idx][chckIndx(h_486543361, 0, (data_486543357[data_486543357_Idx]).length - 1)].Field2 = nimCopy(data_486543357[data_486543357_Idx][chckIndx(h_486543361, 0, (data_486543357[data_486543357_Idx]).length - 1)].Field2, val_486543359, NTI486539268);
    data_486543357[data_486543357_Idx][chckIndx(h_486543361, 0, (data_486543357[data_486543357_Idx]).length - 1)].Field0 = hc_486543360;

  
}

function enlarge_486543058(t_486543061) {
    var n_486543064 = [];
    n_486543064 = new Array(chckRange(mulInt((t_486543061.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_486543061.data).length, 2), 0, 2147483647) ; ++i) { n_486543064[i] = {Field0: 0, Field1: [], Field2: ({kind: 0, isExpert: false, antigen: [], expertAntigen: []})}; }    var Temporary1 = t_486543061.data; t_486543061.data = n_486543064; n_486543064 = Temporary1;    Label2: do {
      var i_486543128 = 0;
      var colontmp__486543775 = 0;
      colontmp__486543775 = (n_486543064).length - 1;
      var res_486543776 = 0;
      Label3: do {
          Label4: while (true) {
          if (!(res_486543776 <= colontmp__486543775)) break Label4;
            i_486543128 = res_486543776;
            var eh_486543182 = n_486543064[chckIndx(i_486543128, 0, (n_486543064).length - 1)].Field0;
            if (isFilled_637534239(eh_486543182)) {
            var j_486543186 = (eh_486543182 & (t_486543061.data).length - 1);
            Label5: do {
                Label6: while (true) {
                if (!isFilled_637534239(t_486543061.data[chckIndx(j_486543186, 0, (t_486543061.data).length - 1)].Field0)) break Label6;
                  j_486543186 = nextTry_637534242(j_486543186, (t_486543061.data).length - 1);
                }
            } while (false);
            rawInsert_486543352(t_486543061, t_486543061, "data", n_486543064[chckIndx(i_486543128, 0, (n_486543064).length - 1)].Field1, n_486543064[chckIndx(i_486543128, 0, (n_486543064).length - 1)].Field2, eh_486543182, j_486543186);
            }
            
            res_486543776 = addInt(res_486543776, 1);
          }
      } while (false);
    } while (false);

  
}

function rawGetKnownHC_486543521(t_486543524, key_486543525, hc_486543526) {
  var result_486543527 = 0;

  BeforeRet: do {
    if (((t_486543524.data).length == 0)) {
    result_486543527 = -1;
    break BeforeRet;
    }
    
    var h_486543578 = (hc_486543526 & (t_486543524.data).length - 1);
    Label1: do {
        Label2: while (true) {
        if (!isFilled_637534239(t_486543524.data[chckIndx(h_486543578, 0, (t_486543524.data).length - 1)].Field0)) break Label2;
          if (((t_486543524.data[chckIndx(h_486543578, 0, (t_486543524.data).length - 1)].Field0 == hc_486543526) && eqStrings(t_486543524.data[chckIndx(h_486543578, 0, (t_486543524.data).length - 1)].Field1, key_486543525))) {
          result_486543527 = h_486543578;
          break BeforeRet;
          }
          
          h_486543578 = nextTry_637534242(h_486543578, (t_486543524.data).length - 1);
        }
    } while (false);
    result_486543527 = subInt(-1, h_486543578);
  } while (false);

  return result_486543527;

}

function HEX5BHEX5DHEX3D_486542506(t_486542509, key_486542510, val_486542511) {
    if (((t_486542509.data).length == 0)) {
    var correctSizeHEX60gensym43_486542561 = slotsNeeded_637534250(32);
    t_486542509.counter = 0;
    t_486542509.data = new Array(chckRange(correctSizeHEX60gensym43_486542561, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym43_486542561, 0, 2147483647) ; ++i) { t_486542509.data[i] = {Field0: 0, Field1: [], Field2: ({kind: 0, isExpert: false, antigen: [], expertAntigen: []})}; }    }
    
    var hc_486542566 = [0];
    var index_486542796 = rawGet_486542567(t_486542509, key_486542510, hc_486542566, 0);
    if ((0 <= index_486542796)) {
    t_486542509.data[chckIndx(index_486542796, 0, (t_486542509.data).length - 1)].Field2 = nimCopy(t_486542509.data[chckIndx(index_486542796, 0, (t_486542509.data).length - 1)].Field2, val_486542511, NTI486539268);
    }
    else {
      if (((t_486542509.data).length == 0)) {
      var correctSizeHEX60gensym48_486542898 = slotsNeeded_637534250(32);
      t_486542509.counter = 0;
      t_486542509.data = new Array(chckRange(correctSizeHEX60gensym48_486542898, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym48_486542898, 0, 2147483647) ; ++i) { t_486542509.data[i] = {Field0: 0, Field1: [], Field2: ({kind: 0, isExpert: false, antigen: [], expertAntigen: []})}; }      }
      
      if (mustRehash_486542903(t_486542509)) {
      enlarge_486543058(t_486542509);
      index_486542796 = rawGetKnownHC_486543521(t_486542509, key_486542510, hc_486542566[0]);
      }
      
      index_486542796 = subInt(-1, index_486542796);
      rawInsert_486543352(t_486542509, t_486542509, "data", key_486542510, val_486542511, hc_486542566[0], index_486542796);
      t_486542509.counter = addInt(t_486542509.counter, 1);
    }
    

  
}

function initSerologicalData(seroData_486542458) {
            var Temporary6;

    var fields_486542459 = [];
    Label1: do {
      var line_486542460 = [];
      var colontmp__486543760 = [];
      colontmp__486543760 = cstrToNimstr(seroData_486542458);
      var first_486543761 = 0;
      var last_486543762 = 0;
      var eolpos_486543763 = 0;
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            Label4: do {
                Label5: while (true) {
                if (!((last_486543762 < (colontmp__486543760).length) && !((ConstSet4[colontmp__486543760[chckIndx(last_486543762, 0, (colontmp__486543760).length - 1)]] != undefined)))) break Label5;
                  last_486543762 = addInt(last_486543762, 1);
                }
            } while (false);
            eolpos_486543763 = last_486543762;
            if ((last_486543762 < (colontmp__486543760).length)) {
            if ((colontmp__486543760[chckIndx(last_486543762, 0, (colontmp__486543760).length - 1)] == 10)) {
            last_486543762 = addInt(last_486543762, 1);
            }
            else {
            if ((colontmp__486543760[chckIndx(last_486543762, 0, (colontmp__486543760).length - 1)] == 13)) {
            last_486543762 = addInt(last_486543762, 1);
            if (((last_486543762 < (colontmp__486543760).length) && (colontmp__486543760[chckIndx(last_486543762, 0, (colontmp__486543760).length - 1)] == 10))) {
            last_486543762 = addInt(last_486543762, 1);
            }
            
            }
            }
            }
            
            if (false) {
            Temporary6 = subInt(last_486543762, 1);
            }
            else {
            Temporary6 = subInt(eolpos_486543763, 1);
            }
            
            line_486542460 = substr_33557906(colontmp__486543760, first_486543761, Temporary6);
            Label7: do {
              if (startsWith_620758300(line_486542460, 35)) {
              outputMeta_486539404(line_486542460);
              break Label7;
              }
              
              fields_486542459 = nimCopy(null, nsuSplitChar(line_486542460, 35, -1), NTI620757319);
              if (!(((fields_486542459).length == 6))) {
              break Label7;
              }
              
              var antigen_486542464 = parseAntigen_486542350(fields_486542459);
              var allele_486542465 = (fields_486542459[chckIndx(0, 0, (fields_486542459).length - 1)] || []).concat(fields_486542459[chckIndx(1, 0, (fields_486542459).length - 1)] || []);
              HEX5BHEX5DHEX3D_486542506(serological_486539374[0], allele_486542465, antigen_486542464);
            } while (false);
            if ((eolpos_486543763 == last_486543762)) {
            break Label2;
            }
            
            first_486543761 = last_486543762;
          }
      } while (false);
    } while (false);

  
}

function nsuToUpperAsciiChar(c_620757079) {
  var result_620757080 = 0;

    if ((ConstSet6[c_620757079] != undefined)) {
    result_620757080 = (c_620757079 ^ 32);
    }
    else {
      result_620757080 = c_620757079;
    }
    

  return result_620757080;

}

function nsuToUpperAsciiStr(s_620757086) {
  var result_620757087 = [];

    result_620757087 = nimCopy(null, mnewString(chckRange((s_620757086).length, 0, 2147483647)), NTI33554439);
    Label1: do {
      var iHEX60gensym11_620757093 = 0;
      var colontmp__486545173 = 0;
      colontmp__486545173 = subInt((s_620757086).length, 1);
      var res_486545174 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_486545174 <= colontmp__486545173)) break Label3;
            iHEX60gensym11_620757093 = res_486545174;
            result_620757087[chckIndx(iHEX60gensym11_620757093, 0, (result_620757087).length - 1)] = nsuToUpperAsciiChar(s_620757086[chckIndx(iHEX60gensym11_620757093, 0, (s_620757086).length - 1)]);
            res_486545174 = addInt(res_486545174, 1);
          }
      } while (false);
    } while (false);

  return result_620757087;

}

function hasKey_486544113(t_486544116, key_486544117) {
  var result_486544118 = false;

    var hc_486544119 = [0];
    result_486544118 = (0 <= rawGet_486540869(t_486544116, key_486544117, hc_486544119, 0));

  return result_486544118;

}

function contains_486544107(t_486544110, key_486544111) {
  var result_486544112 = false;

  BeforeRet: do {
    result_486544112 = hasKey_486544113(t_486544110, key_486544111);
    break BeforeRet;
  } while (false);

  return result_486544112;

}

function setInnerHtml_486543784(elementId_486543785, value_486543786) {
    document.getElementById(toJSStr(elementId_486543785)).innerHTML = toJSStr(value_486543786);

  
}

function clearForm_486543796() {
    setInnerHtml_486543784(makeNimstrLit("alleleinfo"), []);
    setInnerHtml_486543784(makeNimstrLit("helptext"), []);
    setInnerHtml_486543784(makeNimstrLit("pgroup"), []);
    setInnerHtml_486543784(makeNimstrLit("pgrouplen"), []);
    setInnerHtml_486543784(makeNimstrLit("pother"), []);
    setInnerHtml_486543784(makeNimstrLit("ggroup"), []);
    setInnerHtml_486543784(makeNimstrLit("ggrouplen"), []);
    setInnerHtml_486543784(makeNimstrLit("gother"), []);
    setInnerHtml_486543784(makeNimstrLit("serokind"), []);
    setInnerHtml_486543784(makeNimstrLit("seroantigen"), []);

  
}

function HEX5BHEX5D_486544227(t_486544230, key_486544231) {
  var result_486544232 = null;
  var result_486544232_Idx = 0;

    var hcHEX60gensym22_486544233 = [0];
    var indexHEX60gensym22_486544240 = rawGet_486540869(t_486544230, key_486544231, hcHEX60gensym22_486544233, 0);
    if ((0 <= indexHEX60gensym22_486544240)) {
    result_486544232 = t_486544230.data[chckIndx(indexHEX60gensym22_486544240, 0, (t_486544230.data).length - 1)]; result_486544232_Idx = "Field2";
    }
    else {
    raiseKeyError_486542180(key_486544231);
    }
    

  return [result_486544232, result_486544232_Idx];

}

function len_486543858(t_486543861) {
  var result_486543862 = 0;

    result_486543862 = t_486543861.counter;

  return result_486543862;

}

function invalidFormatString_620759118() {
    raiseException({message: makeNimstrLit("invalid format string"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");

  
}

function toLowerAscii_973078529(c_973078530) {
  var result_973078531 = 0;

    if ((ConstSet11[c_973078530] != undefined)) {
    result_973078531 = chckRange(addInt(c_973078530, 32), 0, 255);
    }
    else {
      result_973078531 = c_973078530;
    }
    

  return result_973078531;

}

function nsuCmpIgnoreStyle(a_620757182, b_620757183) {
          var Temporary7;
          var Temporary8;

  var result_620757184 = 0;

  BeforeRet: do {
    var aLenHEX60gensym25_620757193 = (a_620757182).length;
    var bLenHEX60gensym25_620757194 = (b_620757183).length;
    var iHEX60gensym25_620757195 = 0;
    var jHEX60gensym25_620757196 = 0;
    Label1: do {
        Label2: while (true) {
        if (!true) break Label2;
          Label3: do {
              Label4: while (true) {
              if (!((iHEX60gensym25_620757195 < aLenHEX60gensym25_620757193) && (a_620757182[iHEX60gensym25_620757195] == 95))) break Label4;
                iHEX60gensym25_620757195 += 1;
              }
          } while (false);
          Label5: do {
              Label6: while (true) {
              if (!((jHEX60gensym25_620757196 < bLenHEX60gensym25_620757194) && (b_620757183[jHEX60gensym25_620757196] == 95))) break Label6;
                jHEX60gensym25_620757196 += 1;
              }
          } while (false);
          if ((iHEX60gensym25_620757195 < aLenHEX60gensym25_620757193)) {
          Temporary7 = toLowerAscii_973078529(a_620757182[iHEX60gensym25_620757195]);
          }
          else {
          Temporary7 = 0;
          }
          
          var aaHEX60gensym25_620757205 = Temporary7;
          if ((jHEX60gensym25_620757196 < bLenHEX60gensym25_620757194)) {
          Temporary8 = toLowerAscii_973078529(b_620757183[jHEX60gensym25_620757196]);
          }
          else {
          Temporary8 = 0;
          }
          
          var bbHEX60gensym25_620757206 = Temporary8;
          result_620757184 = (aaHEX60gensym25_620757205 - bbHEX60gensym25_620757206);
          if (!((result_620757184 == 0))) {
          break BeforeRet;
          }
          
          if ((aLenHEX60gensym25_620757193 <= iHEX60gensym25_620757195)) {
          if ((bLenHEX60gensym25_620757194 <= jHEX60gensym25_620757196)) {
          result_620757184 = 0;
          break BeforeRet;
          }
          
          result_620757184 = -1;
          break BeforeRet;
          }
          else {
          if ((bLenHEX60gensym25_620757194 <= jHEX60gensym25_620757196)) {
          result_620757184 = 1;
          break BeforeRet;
          }
          }
          iHEX60gensym25_620757195 += 1;
          jHEX60gensym25_620757196 += 1;
        }
    } while (false);
  } while (false);

  return result_620757184;

}

function findNormalized_620759106(x_620759107, inArray_620759108) {
  var result_620759109 = 0;

  BeforeRet: do {
    var i_620759110 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_620759110 < (inArray_620759108).length - 1)) break Label2;
          if ((nsuCmpIgnoreStyle(x_620759107, inArray_620759108[chckIndx(i_620759110, 0, (inArray_620759108).length - 1)]) == 0)) {
          result_620759109 = i_620759110;
          break BeforeRet;
          }
          
          i_620759110 = addInt(i_620759110, 2);
        }
    } while (false);
    result_620759109 = -1;
    break BeforeRet;
  } while (false);

  return result_620759109;

}

function nsuAddf(s_620759121, s_620759121_Idx, formatstr_620759122, a_620759123) {
                  var Temporary5;
            var Temporary6;
              var Temporary7;
            var Temporary10;
              var Temporary11;
                var Temporary12;
                  var Temporary15;
              var Temporary16;

    var i_620759125 = 0;
    var num_620759126 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_620759125 < (formatstr_620759122).length)) break Label2;
          if (((formatstr_620759122[chckIndx(i_620759125, 0, (formatstr_620759122).length - 1)] == 36) && (addInt(i_620759125, 1) < (formatstr_620759122).length))) {
          switch (formatstr_620759122[chckIndx(addInt(i_620759125, 1), 0, (formatstr_620759122).length - 1)]) {
          case 35:
            if (((a_620759123).length - 1 < num_620759126)) {
            invalidFormatString_620759118();
            }
            
            s_620759121[s_620759121_Idx].push.apply(s_620759121[s_620759121_Idx], a_620759123[chckIndx(num_620759126, 0, (a_620759123).length - 1)]);;
            i_620759125 = addInt(i_620759125, 2);
            num_620759126 = addInt(num_620759126, 1);
            break;
          case 36:
            addChar(s_620759121[s_620759121_Idx], 36);;
            i_620759125 = addInt(i_620759125, 2);
            break;
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
          case 45:
            var j_620759142 = 0;
            i_620759125 = addInt(i_620759125, 1);
            var negative_620759147 = (formatstr_620759122[chckIndx(i_620759125, 0, (formatstr_620759122).length - 1)] == 45);
            if (negative_620759147) {
            i_620759125 = addInt(i_620759125, 1);
            }
            
            Label3: do {
                Label4: while (true) {
                  if (!(i_620759125 < (formatstr_620759122).length)) Temporary5 = false; else {                    Temporary5 = (ConstSet8[formatstr_620759122[chckIndx(i_620759125, 0, (formatstr_620759122).length - 1)]] != undefined);                  }                if (!Temporary5) break Label4;
                  j_620759142 = subInt(addInt(mulInt(j_620759142, 10), formatstr_620759122[chckIndx(i_620759125, 0, (formatstr_620759122).length - 1)]), 48);
                  i_620759125 = addInt(i_620759125, 1);
                }
            } while (false);
            if (!(negative_620759147)) {
            Temporary6 = subInt(j_620759142, 1);
            }
            else {
            Temporary6 = subInt((a_620759123).length, j_620759142);
            }
            
            var idx_620759170 = Temporary6;
              if ((idx_620759170 < 0)) Temporary7 = true; else {                Temporary7 = ((a_620759123).length - 1 < idx_620759170);              }            if (Temporary7) {
            invalidFormatString_620759118();
            }
            
            s_620759121[s_620759121_Idx].push.apply(s_620759121[s_620759121_Idx], a_620759123[chckIndx(idx_620759170, 0, (a_620759123).length - 1)]);;
            break;
          case 123:
            var j_620759174 = addInt(i_620759125, 2);
            var k_620759175 = 0;
            var negative_620759176 = (formatstr_620759122[chckIndx(j_620759174, 0, (formatstr_620759122).length - 1)] == 45);
            if (negative_620759176) {
            j_620759174 = addInt(j_620759174, 1);
            }
            
            var isNumber_620759181 = 0;
            Label8: do {
                Label9: while (true) {
                if (!((j_620759174 < (formatstr_620759122).length) && !((ConstSet9[formatstr_620759122[chckIndx(j_620759174, 0, (formatstr_620759122).length - 1)]] != undefined)))) break Label9;
                  if ((ConstSet10[formatstr_620759122[chckIndx(j_620759174, 0, (formatstr_620759122).length - 1)]] != undefined)) {
                  k_620759175 = subInt(addInt(mulInt(k_620759175, 10), formatstr_620759122[chckIndx(j_620759174, 0, (formatstr_620759122).length - 1)]), 48);
                  if ((isNumber_620759181 == 0)) {
                  isNumber_620759181 = 1;
                  }
                  
                  }
                  else {
                    isNumber_620759181 = -1;
                  }
                  
                  j_620759174 = addInt(j_620759174, 1);
                }
            } while (false);
            if ((isNumber_620759181 == 1)) {
            if (!(negative_620759176)) {
            Temporary10 = subInt(k_620759175, 1);
            }
            else {
            Temporary10 = subInt((a_620759123).length, k_620759175);
            }
            
            var idx_620759203 = Temporary10;
              if ((idx_620759203 < 0)) Temporary11 = true; else {                Temporary11 = ((a_620759123).length - 1 < idx_620759203);              }            if (Temporary11) {
            invalidFormatString_620759118();
            }
            
            s_620759121[s_620759121_Idx].push.apply(s_620759121[s_620759121_Idx], a_620759123[chckIndx(idx_620759203, 0, (a_620759123).length - 1)]);;
            }
            else {
              var x_620759207 = findNormalized_620759106(substr_33557906(formatstr_620759122, addInt(i_620759125, 2), subInt(j_620759174, 1)), a_620759123);
                if (!(0 <= x_620759207)) Temporary12 = false; else {                  Temporary12 = (x_620759207 < (a_620759123).length - 1);                }              if (Temporary12) {
              s_620759121[s_620759121_Idx].push.apply(s_620759121[s_620759121_Idx], a_620759123[chckIndx(addInt(x_620759207, 1), 0, (a_620759123).length - 1)]);;
              }
              else {
              invalidFormatString_620759118();
              }
              
            }
            
            i_620759125 = addInt(j_620759174, 1);
            break;
          case 97:
          case 98:
          case 99:
          case 100:
          case 101:
          case 102:
          case 103:
          case 104:
          case 105:
          case 106:
          case 107:
          case 108:
          case 109:
          case 110:
          case 111:
          case 112:
          case 113:
          case 114:
          case 115:
          case 116:
          case 117:
          case 118:
          case 119:
          case 120:
          case 121:
          case 122:
          case 65:
          case 66:
          case 67:
          case 68:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 128:
          case 129:
          case 130:
          case 131:
          case 132:
          case 133:
          case 134:
          case 135:
          case 136:
          case 137:
          case 138:
          case 139:
          case 140:
          case 141:
          case 142:
          case 143:
          case 144:
          case 145:
          case 146:
          case 147:
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 155:
          case 156:
          case 157:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
          case 163:
          case 164:
          case 165:
          case 166:
          case 167:
          case 168:
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
          case 175:
          case 176:
          case 177:
          case 178:
          case 179:
          case 180:
          case 181:
          case 182:
          case 183:
          case 184:
          case 185:
          case 186:
          case 187:
          case 188:
          case 189:
          case 190:
          case 191:
          case 192:
          case 193:
          case 194:
          case 195:
          case 196:
          case 197:
          case 198:
          case 199:
          case 200:
          case 201:
          case 202:
          case 203:
          case 204:
          case 205:
          case 206:
          case 207:
          case 208:
          case 209:
          case 210:
          case 211:
          case 212:
          case 213:
          case 214:
          case 215:
          case 216:
          case 217:
          case 218:
          case 219:
          case 220:
          case 221:
          case 222:
          case 223:
          case 224:
          case 225:
          case 226:
          case 227:
          case 228:
          case 229:
          case 230:
          case 231:
          case 232:
          case 233:
          case 234:
          case 235:
          case 236:
          case 237:
          case 238:
          case 239:
          case 240:
          case 241:
          case 242:
          case 243:
          case 244:
          case 245:
          case 246:
          case 247:
          case 248:
          case 249:
          case 250:
          case 251:
          case 252:
          case 253:
          case 254:
          case 255:
          case 95:
            var j_620759211 = addInt(i_620759125, 1);
            Label13: do {
                Label14: while (true) {
                  if (!(j_620759211 < (formatstr_620759122).length)) Temporary15 = false; else {                    Temporary15 = (ConstSet12[formatstr_620759122[chckIndx(j_620759211, 0, (formatstr_620759122).length - 1)]] != undefined);                  }                if (!Temporary15) break Label14;
                  j_620759211 = addInt(j_620759211, 1);
                }
            } while (false);
            var x_620759220 = findNormalized_620759106(substr_33557906(formatstr_620759122, addInt(i_620759125, 1), subInt(j_620759211, 1)), a_620759123);
              if (!(0 <= x_620759220)) Temporary16 = false; else {                Temporary16 = (x_620759220 < (a_620759123).length - 1);              }            if (Temporary16) {
            s_620759121[s_620759121_Idx].push.apply(s_620759121[s_620759121_Idx], a_620759123[chckIndx(addInt(x_620759220, 1), 0, (a_620759123).length - 1)]);;
            }
            else {
            invalidFormatString_620759118();
            }
            
            i_620759125 = j_620759211;
            break;
          default: 
            invalidFormatString_620759118();
            break;
          }
          }
          else {
            addChar(s_620759121[s_620759121_Idx], formatstr_620759122[chckIndx(i_620759125, 0, (formatstr_620759122).length - 1)]);;
            i_620759125 = addInt(i_620759125, 1);
          }
          
        }
    } while (false);

  
}

function nsuFormatOpenArray(formatstr_620759229, a_620759230) {
  var result_620759231 = [[]];

    result_620759231[0] = nimCopy(null, mnewString(0), NTI33554439);
    nsuAddf(result_620759231, 0, formatstr_620759229, a_620759230);

  return result_620759231[0];

}

function nsuJoinSep(a_620758417, sep_620758418) {
  var result_620758419 = [];

    if ((0 < (a_620758417).length)) {
    var L_620758426 = mulInt((sep_620758418).length, subInt((a_620758417).length, 1));
    Label1: do {
      var i_620758434 = 0;
      var colontmp__486545196 = 0;
      colontmp__486545196 = (a_620758417).length - 1;
      var res_486545197 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_486545197 <= colontmp__486545196)) break Label3;
            i_620758434 = res_486545197;
            L_620758426 = addInt(L_620758426, (a_620758417[chckIndx(i_620758434, 0, (a_620758417).length - 1)]).length);
            res_486545197 = addInt(res_486545197, 1);
          }
      } while (false);
    } while (false);
    result_620758419 = nimCopy(null, mnewString(0), NTI33554439);
    result_620758419.push.apply(result_620758419, a_620758417[chckIndx(0, 0, (a_620758417).length - 1)]);;
    Label4: do {
      var i_620758446 = 0;
      var colontmp__486545200 = 0;
      colontmp__486545200 = (a_620758417).length - 1;
      var res_486545201 = 1;
      Label5: do {
          Label6: while (true) {
          if (!(res_486545201 <= colontmp__486545200)) break Label6;
            i_620758446 = res_486545201;
            result_620758419.push.apply(result_620758419, sep_620758418);;
            result_620758419.push.apply(result_620758419, a_620758417[chckIndx(i_620758446, 0, (a_620758417).length - 1)]);;
            res_486545201 = addInt(res_486545201, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      result_620758419 = nimCopy(null, [], NTI33554439);
    }
    

  return result_620758419;

}

function lookForAlternateAllele_486543799(allele_486543800) {
    var Temporary6;

  BeforeRet: do {
    clearForm_486543796();
    var cand_486543809 = newSeq_452985301(0);
    Label1: do {
      var key_486544031 = [];
      var L_486545181 = len_486543858(galleles_486539307[0]);
      Label2: do {
        var h_486545183 = 0;
        var colontmp__486545184 = 0;
        colontmp__486545184 = (galleles_486539307[0].data).length - 1;
        var res_486545185 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(res_486545185 <= colontmp__486545184)) break Label4;
              h_486545183 = res_486545185;
              if (isFilled_637534239(galleles_486539307[0].data[chckIndx(h_486545183, 0, (galleles_486539307[0].data).length - 1)].Field0)) {
              key_486544031 = galleles_486539307[0].data[chckIndx(h_486545183, 0, (galleles_486539307[0].data).length - 1)]["Field1"];
              if (nsuStartsWith(key_486544031, allele_486543800)) {
              var Temporary5 = nimCopy(null, key_486544031, NTI33554439);
              cand_486543809.push(Temporary5);;
              if ((10 < (cand_486543809).length)) {
              break Label1;
              }
              
              }
              
              if (!((len_486543858(galleles_486539307[0]) == L_486545181))) {
              failedAssertImpl_218103864(makeNimstrLit("tables.nim(741, 13) `len(t) == L` the length of the table changed while iterating over it"));
              }
              
              }
              
              res_486545185 = addInt(res_486545185, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    if ((0 < (cand_486543809).length)) {
    if ((10 < (cand_486543809).length)) {
    Temporary6 = makeNimstrLit("...");
    }
    else {
    Temporary6 = [];
    }
    
    setInnerHtml_486543784(makeNimstrLit("helptext"), (makeNimstrLit("<br>\x0A") || []).concat(nsuFormatOpenArray(makeNimstrLit("Mer specifik fr\xC3\xA5ga beh\xC3\xB6vs, ange t.ex. n\xC3\xA5gon av:<br>\x0A$#\x0A<br>$#"), [nsuJoinSep(cand_486543809, makeNimstrLit("<br>\x0A")), nimCopy(null, Temporary6, NTI33554439)]) || []));
    break BeforeRet;
    }
    
    setInnerHtml_486543784(makeNimstrLit("helptext"), makeNimstrLit("<br>\x0AOk\xC3\xA4nd allel, ange alleler som t.ex. A*01:01:01:01"));
  } while (false);

  
}

function hasKey_486545001(t_486545004, key_486545005) {
  var result_486545006 = false;

    var hc_486545007 = [0];
    result_486545006 = (0 <= rawGet_486542567(t_486545004, key_486545005, hc_486545007, 0));

  return result_486545006;

}

function contains_486544995(t_486544998, key_486544999) {
  var result_486545000 = false;

  BeforeRet: do {
    result_486545000 = hasKey_486545001(t_486544998, key_486544999);
    break BeforeRet;
  } while (false);

  return result_486545000;

}

function HEX5BHEX5D_486545067(t_486545070, key_486545071) {
  var result_486545072 = null;

    var hcHEX60gensym22_486545073 = [0];
    var indexHEX60gensym22_486545080 = rawGet_486542567(t_486545070, key_486545071, hcHEX60gensym22_486545073, 0);
    if ((0 <= indexHEX60gensym22_486545080)) {
    result_486545072 = t_486545070.data[chckIndx(indexHEX60gensym22_486545080, 0, (t_486545070.data).length - 1)].Field2;
    }
    else {
    raiseKeyError_486542180(key_486545071);
    }
    

  return result_486545072;

}

function lookupAllele() {
    var Temporary1;
    var Temporary2;
    var Temporary3;
      var Temporary5;
            var Temporary8;
    var Temporary10;
    var Temporary11;
      var Temporary13;
            var Temporary16;

  BeforeRet: do {
    var allele_486544064 = nsuStrip(nsuToUpperAsciiStr(cstrToNimstr(document.getElementById("allele").value)), true, true, ConstSet7);
    if ((contains_486544107(galleles_486539307[0], allele_486544064) || contains_486544107(palleles_486539338[0], allele_486544064))) {
    clearForm_486543796();
    var alleleIDHEX60gensym66_486544306 = nimCopy(null, (Temporary1 = HEX5BHEX5D_486544227(alleleIDs_486539348[0], allele_486544064), Temporary1)[0][Temporary1[1]], NTI33554439);
    setInnerHtml_486543784(makeNimstrLit("alleleinfo"), (makeNimstrLit("<a href=\"https://www.ebi.ac.uk/ipd/imgt/hla/alleles/allele/?accession=") || []).concat(alleleIDHEX60gensym66_486544306 || [],makeNimstrLit("\">") || [],allele_486544064 || [],makeNimstrLit("</a>") || []));
    }
    else {
      lookForAlternateAllele_486543799(allele_486544064);
      break BeforeRet;
    }
    
    if (contains_486544107(palleles_486539338[0], allele_486544064)) {
    var pgroup_486544456 = nimCopy(null, (Temporary2 = HEX5BHEX5D_486544227(palleles_486539338[0], allele_486544064), Temporary2)[0][Temporary2[1]], NTI33554439);
    setInnerHtml_486543784(makeNimstrLit("pgroup"), pgroup_486544456);
    setInnerHtml_486543784(makeNimstrLit("pgrouplen"), HEX24_335544323(((Temporary3 = HEX5BHEX5D_486542113(pgroups_486539343[0], pgroup_486544456), Temporary3)[0][Temporary3[1]]).length));
    var alleleLinks_486544525 = newSeq_452985301(0);
    Label4: do {
      var otherAllele_486544587 = [];
      var colontmp__486545163 = [];
      colontmp__486545163 = (Temporary5 = HEX5BHEX5D_486542113(pgroups_486539343[0], pgroup_486544456), Temporary5)[0][Temporary5[1]];
      var i_486545164 = 0;
      var L_486545165 = (colontmp__486545163).length;
      Label6: do {
          Label7: while (true) {
          if (!(i_486545164 < L_486545165)) break Label7;
            otherAllele_486544587 = colontmp__486545163[chckIndx(i_486545164, 0, (colontmp__486545163).length - 1)];
            var alleleIDHEX60gensym68_486544647 = nimCopy(null, (Temporary8 = HEX5BHEX5D_486544227(alleleIDs_486539348[0], otherAllele_486544587), Temporary8)[0][Temporary8[1]], NTI33554439);
            var Temporary9 = nimCopy(null, (makeNimstrLit("<a href=\"https://www.ebi.ac.uk/ipd/imgt/hla/alleles/allele/?accession=") || []).concat(alleleIDHEX60gensym68_486544647 || [],makeNimstrLit("\">") || [],otherAllele_486544587 || [],makeNimstrLit("</a>") || []), NTI33554439);
            alleleLinks_486544525.push(Temporary9);;
            i_486545164 = addInt(i_486545164, 1);
            if (!(((colontmp__486545163).length == L_486545165))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    setInnerHtml_486543784(makeNimstrLit("pother"), nsuJoinSep(alleleLinks_486544525, makeNimstrLit(" ")));
    }
    
    if (contains_486544107(galleles_486539307[0], allele_486544064)) {
    var ggroup_486544757 = nimCopy(null, (Temporary10 = HEX5BHEX5D_486544227(galleles_486539307[0], allele_486544064), Temporary10)[0][Temporary10[1]], NTI33554439);
    setInnerHtml_486543784(makeNimstrLit("ggroup"), ggroup_486544757);
    setInnerHtml_486543784(makeNimstrLit("ggrouplen"), HEX24_335544323(((Temporary11 = HEX5BHEX5D_486542113(ggroups_486539333[0], ggroup_486544757), Temporary11)[0][Temporary11[1]]).length));
    var alleleLinks_486544826 = newSeq_452985301(0);
    Label12: do {
      var otherAllele_486544888 = [];
      var colontmp__486545168 = [];
      colontmp__486545168 = (Temporary13 = HEX5BHEX5D_486542113(ggroups_486539333[0], ggroup_486544757), Temporary13)[0][Temporary13[1]];
      var i_486545169 = 0;
      var L_486545170 = (colontmp__486545168).length;
      Label14: do {
          Label15: while (true) {
          if (!(i_486545169 < L_486545170)) break Label15;
            otherAllele_486544888 = colontmp__486545168[chckIndx(i_486545169, 0, (colontmp__486545168).length - 1)];
            var alleleIDHEX60gensym70_486544948 = nimCopy(null, (Temporary16 = HEX5BHEX5D_486544227(alleleIDs_486539348[0], otherAllele_486544888), Temporary16)[0][Temporary16[1]], NTI33554439);
            var Temporary17 = nimCopy(null, (makeNimstrLit("<a href=\"https://www.ebi.ac.uk/ipd/imgt/hla/alleles/allele/?accession=") || []).concat(alleleIDHEX60gensym70_486544948 || [],makeNimstrLit("\">") || [],otherAllele_486544888 || [],makeNimstrLit("</a>") || []), NTI33554439);
            alleleLinks_486544826.push(Temporary17);;
            i_486545169 = addInt(i_486545169, 1);
            if (!(((colontmp__486545168).length == L_486545170))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    setInnerHtml_486543784(makeNimstrLit("gother"), nsuJoinSep(alleleLinks_486544826, makeNimstrLit(" ")));
    }
    
    if (contains_486544995(serological_486539374[0], allele_486544064)) {
    var antigen_486545146 = nimCopy(null, HEX5BHEX5D_486545067(serological_486539374[0], allele_486544064), NTI486539268);
    if (antigen_486545146.isExpert) {
    setInnerHtml_486543784(makeNimstrLit("serokind"), (reprEnum(antigen_486545146.kind, NTI486539267) || []).concat(makeNimstrLit(" (med \"expert assigned\" till\xC3\xA4gg)") || []));
    setInnerHtml_486543784(makeNimstrLit("seroantigen"), (antigen_486545146.antigen || []).concat(makeNimstrLit(" (") || [],antigen_486545146.expertAntigen || [],makeNimstrLit(")") || []));
    }
    else {
      setInnerHtml_486543784(makeNimstrLit("serokind"), reprEnum(antigen_486545146.kind, NTI486539267));
      setInnerHtml_486543784(makeNimstrLit("seroantigen"), antigen_486545146.antigen);
    }
    
    }
    else {
    setInnerHtml_486543784(makeNimstrLit("seroantigen"), makeNimstrLit("(data saknas)"));
    }
    
  } while (false);

  
}
