/* Generated by the Nim Compiler v1.6.10 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI486539267 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI486539268 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI637534212 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
NTI637534212.base = NTI33554440;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
var NNI486539267 = {kind: 2, offset: 0, typ: null, name: null, len: 5, sons: {"0": {kind: 1, offset: 0, typ: NTI486539267, name: "missing", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI486539267, name: "unambiguous", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI486539267, name: "possible", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI486539267, name: "assumed", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI486539267, name: "expert", len: 0, sons: null}}};
NTI486539267.node = NNI486539267;
var NNI486539268 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kind", len: 0, typ: NTI486539267, name: "kind", sons: null}, 
{kind: 1, offset: "isExpert", len: 0, typ: NTI33554466, name: "isExpert", sons: null}, 
{kind: 1, offset: "antigen", len: 0, typ: NTI33554440, name: "antigen", sons: null}, 
{kind: 1, offset: "expertAntigen", len: 0, typ: NTI33554440, name: "expertAntigen", sons: null}]};
NTI486539268.node = NNI486539268;

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}

function cstrToNimstr(c_33556804) {
      var ln = c_33556804.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556804.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556804.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}
    var strSero_486539303 = ["saknas", "Unambiguous", "Possible", "Assumed", "Expert assigned"];
    var strRelation_486539304 = [" är en split av ", " är associerat med "];
      var Bw4_486539305 = ["A9", "A23", "A24", "A2403", "A25", "A32", "B5", "B5102", "B5103", "B13", "B17", "B27", "B37", "B38", "B44", "B47", "B49", "B51", "B52", "B53", "B57", "B58", "B59", "B63", "B77"];
      var Bw6_486539306 = ["B7", "B703", "B8", "B14", "B18", "B22", "B2708", "B35", "B39", "B3901", "B3902", "B40", "B4005", "B41", "B42", "B45", "B46", "B48", "B50", "B54", "B55", "B56", "B60", "B61", "B62", "B64", "B65", "B67", "B70", "B71", "B72", "B73", "B75", "B76", "B78", "B81", "B82"];
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

var galleles_486539310 = [{}];
var ggroups_486539314 = [{}];
var palleles_486539318 = [{}];
var pgroups_486539322 = [{}];
var alleleIDs_486539326 = [{}];
var serological_486539330 = [{}];
var splits_486539334 = [{}];

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_486539479 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539479 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_486539479;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_486539479 = addInt(i_486539479, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function outputMeta_486539380(line_486539381) {
    var fields_486539382 = line_486539381.split(": ");
    var key_486539383 = fields_486539382[chckIndx(0, 0, (fields_486539382).length - 1)].substr(2);
    var value_486539384 = fields_486539382[chckIndx(1, 0, (fields_486539382).length - 1)];
    rawEcho(cstrToNimstr(key_486539383), cstrToNimstr("                    ".substr(((key_486539383) == null ? 0 : (key_486539383).length))), cstrToNimstr(value_486539384));

  
}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function parseGroup(data_486539396) {
              var Temporary5;

  var result_486539397 = {Field0: null, Field1: null};

    var fields_486539398 = [];
    result_486539397.Field0 = {};
    result_486539397.Field1 = {};
    Label1: do {
      var line_486539426 = null;
      var colontmp__486539471 = [];
      colontmp__486539471 = data_486539396.split("\n");
      var i_486539472 = 0;
      var L_486539473 = (colontmp__486539471).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539472 < L_486539473)) break Label3;
            line_486539426 = colontmp__486539471[chckIndx(i_486539472, 0, (colontmp__486539471).length - 1)];
            Label4: do {
              if (line_486539426.startsWith("#")) {
              outputMeta_486539380(line_486539426);
              break Label4;
              }
              
              fields_486539398 = nimCopy(null, line_486539426.split(";"), NTI637534212);
              if (((fields_486539398).length < 3)) {
              break Label4;
              }
              
              var locus_486539430 = fields_486539398[chckIndx(0, 0, (fields_486539398).length - 1)];
              var members_486539431 = fields_486539398[chckIndx(1, 0, (fields_486539398).length - 1)].split("/");
              if ((((fields_486539398[chckIndx(2, 0, (fields_486539398).length - 1)]) == null ? 0 : (fields_486539398[chckIndx(2, 0, (fields_486539398).length - 1)]).length) == 0)) {
              Temporary5 = (locus_486539430 + members_486539431[chckIndx(0, 0, (members_486539431).length - 1)]);
              }
              else {
              Temporary5 = (locus_486539430 + fields_486539398[chckIndx(2, 0, (fields_486539398).length - 1)]);
              }
              
              var group_486539432 = Temporary5;
              var memberlist_486539433 = [];
              Label6: do {
                var allele_486539437 = null;
                var i_486539468 = 0;
                var L_486539469 = (members_486539431).length;
                Label7: do {
                    Label8: while (true) {
                    if (!(i_486539468 < L_486539469)) break Label8;
                      allele_486539437 = members_486539431[chckIndx(i_486539468, 0, (members_486539431).length - 1)];
                      var name_486539438 = (locus_486539430 + allele_486539437);
                      result_486539397.Field0[name_486539438] = group_486539432;
                      memberlist_486539433.push(name_486539438);;
                      i_486539468 = addInt(i_486539468, 1);
                      if (!(((members_486539431).length == L_486539469))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
              result_486539397.Field1[group_486539432] = memberlist_486539433;
            } while (false);
            i_486539472 = addInt(i_486539472, 1);
            if (!(((colontmp__486539471).length == L_486539473))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);

  return result_486539397;

}

function initGgroupData(gdata_486539484) {
    var data_486539485 = parseGroup(gdata_486539484);
    galleles_486539310[0] = data_486539485.Field0;
    ggroups_486539314[0] = data_486539485.Field1;

  
}

function initPgroupData(pdata_486539496) {
    var __486539497 = parseGroup(pdata_486539496);
    palleles_486539318[0] = __486539497["Field0"];
    pgroups_486539322[0] = __486539497["Field1"];

  
}

function initAlleleIdData(alleleData_486539499) {
    var fields_486539500 = [];
    Label1: do {
      var line_486539504 = null;
      var colontmp__486539516 = [];
      colontmp__486539516 = alleleData_486539499.split("\n");
      var i_486539517 = 0;
      var L_486539518 = (colontmp__486539516).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539517 < L_486539518)) break Label3;
            line_486539504 = colontmp__486539516[chckIndx(i_486539517, 0, (colontmp__486539516).length - 1)];
            Label4: do {
              if (line_486539504.startsWith("#")) {
              outputMeta_486539380(line_486539504);
              break Label4;
              }
              
              if (line_486539504.startsWith("AlleleID")) {
              break Label4;
              }
              
              fields_486539500 = nimCopy(null, line_486539504.split(","), NTI637534212);
              if (!(((fields_486539500).length == 2))) {
              break Label4;
              }
              
              alleleIDs_486539326[0][fields_486539500[chckIndx(1, 0, (fields_486539500).length - 1)]] = fields_486539500[chckIndx(0, 0, (fields_486539500).length - 1)];
            } while (false);
            i_486539517 = addInt(i_486539517, 1);
            if (!(((colontmp__486539516).length == L_486539518))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);

  
}

function find_486539530(a_486539533, item_486539534) {
  var result_486539535 = 0;

  BeforeRet: do {
    result_486539535 = 0;
    Label1: do {
      var i_486539548 = null;
      var i_486539710 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539710 < (a_486539533).length)) break Label3;
            i_486539548 = a_486539533[chckIndx(i_486539710, 0, (a_486539533).length - 1)];
            if ((i_486539548 == item_486539534)) {
            break BeforeRet;
            }
            
            result_486539535 = addInt(result_486539535, 1);
            i_486539710 = addInt(i_486539710, 1);
          }
      } while (false);
    } while (false);
    result_486539535 = -1;
  } while (false);

  return result_486539535;

}

function contains_486539525(a_486539527, item_486539528) {
  var result_486539529 = false;

  BeforeRet: do {
    result_486539529 = (0 <= find_486539530(a_486539527, item_486539528));
    break BeforeRet;
  } while (false);

  return result_486539529;

}

function antigenPrefix_486539520(locus_486539521) {
  var result_486539522 = null;

    result_486539522 = "";
    if (((locus_486539521 == "A") || (locus_486539521 == "B"))) {
    result_486539522 = locus_486539521;
    }
    else {
    if ((locus_486539521 == "C")) {
    result_486539522 = "Cw";
    }
    else {
    if (contains_486539525(["DRB1", "DRB3", "DRB4", "DRB5"], locus_486539521)) {
    result_486539522 = "DR";
    }
    else {
    if ((locus_486539521 == "DQB1")) {
    result_486539522 = "DQ";
    }
    }}}

  return result_486539522;

}

function parseAntigen_486539562(fields_486539563) {
    var Temporary1;
            var Temporary5;
                      var Temporary9;

  var result_486539564 = ({kind: 0, isExpert: false, antigen: null, expertAntigen: null});

  BeforeRet: do {
    if (fields_486539563[chckIndx(0, 0, (fields_486539563).length - 1)].endsWith("*")) {
    Temporary1 = fields_486539563[chckIndx(0, 0, (fields_486539563).length - 1)].slice(0, subInt(((fields_486539563[chckIndx(0, 0, (fields_486539563).length - 1)]) == null ? 0 : (fields_486539563[chckIndx(0, 0, (fields_486539563).length - 1)]).length), 1));
    }
    else {
    Temporary1 = fields_486539563[chckIndx(0, 0, (fields_486539563).length - 1)];
    }
    
    var locus_486539565 = Temporary1;
    var prefix_486539566 = antigenPrefix_486539520(locus_486539565);
    var isExpert_486539567 = !((((fields_486539563[chckIndx(5, 0, (fields_486539563).length - 1)]) == null ? 0 : (fields_486539563[chckIndx(5, 0, (fields_486539563).length - 1)]).length) == 0));
    Label2: do {
      var field_486539602 = 0;
      var i_486539706 = 0;
      Label3: do {
          Label4: while (true) {
          if (!true) break Label4;
            field_486539602 = (Temporary5 = new Int32Array([2, 3, 4]), Temporary5)[chckIndx(i_486539706, 0, (Temporary5).length - 1)];
            if (!((fields_486539563[chckIndx(field_486539602, 0, (fields_486539563).length - 1)] == ""))) {
            var ag_486539603 = fields_486539563[chckIndx(field_486539602, 0, (fields_486539563).length - 1)];
            var compound_486539604 = null;
            if ((ag_486539603 == "0")) {
            compound_486539604 = "(nullallel)";
            }
            else {
            if ((ag_486539603 == "0/?")) {
            compound_486539604 = "(nullallel/oklart)";
            }
            else {
            if ((ag_486539603 == "?")) {
            compound_486539604 = "oklart";
            }
            else {
            if ((ag_486539603.indexOf("/")>=0)) {
            var ags_486539605 = ag_486539603.split("/");
            Label6: do {
              var i_486539637 = 0;
              var a_486539638 = null;
              var i_486539702 = 0;
              var L_486539703 = (ags_486539605).length;
              Label7: do {
                  Label8: while (true) {
                  if (!(i_486539702 < L_486539703)) break Label8;
                    i_486539637 = i_486539702;
                    a_486539638 = ags_486539605[chckIndx(i_486539702, 0, (ags_486539605).length - 1)];
                    if ((a_486539638 == "0")) {
                    if (null != "null") { if (null == compound_486539604) compound_486539604 = "null"; else compound_486539604 += "null"; };
                    }
                    else {
                    if ((a_486539638 == "?")) {
                    if (null != "oklart") { if (null == compound_486539604) compound_486539604 = "oklart"; else compound_486539604 += "oklart"; };
                    }
                    else {
                    if (null != (Temporary9 = (prefix_486539566 + a_486539638), Temporary9)) { if (null == compound_486539604) compound_486539604 = Temporary9; else compound_486539604 += Temporary9; };
                    }
                    }
                    if ((i_486539637 < subInt((ags_486539605).length, 1))) {
                    if (null != "/") { if (null == compound_486539604) compound_486539604 = "/"; else compound_486539604 += "/"; };
                    }
                    
                    i_486539702 = addInt(i_486539702, 1);
                    if (!(((ags_486539605).length == L_486539703))) {
                    failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                    }
                    
                  }
              } while (false);
            } while (false);
            }
            else {
              compound_486539604 = (prefix_486539566 + ag_486539603);
            }
            }}}
            var kind_486539642 = chckRange(subInt(field_486539602, 1), 0, 4);
            result_486539564 = nimCopy(result_486539564, {kind: kind_486539642, isExpert: isExpert_486539567, antigen: compound_486539604, expertAntigen: (prefix_486539566 + fields_486539563[chckIndx(5, 0, (fields_486539563).length - 1)])}, NTI486539268);
            break BeforeRet;
            }
            
            if ((2 <= i_486539706)) {
            break Label3;
            }
            
            i_486539706 = addInt(i_486539706, 1);
          }
      } while (false);
    } while (false);
    if (true) {
    failedAssertImpl_218103864(makeNimstrLit("gpgroup.nim(211, 10) `false` no antigen found!"));
    }
    
  } while (false);

  return result_486539564;

}

function initSerologicalData(seroData_486539676) {
    var fields_486539677 = [];
    Label1: do {
      var line_486539681 = null;
      var colontmp__486539695 = [];
      colontmp__486539695 = seroData_486539676.split("\n");
      var i_486539696 = 0;
      var L_486539697 = (colontmp__486539695).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539696 < L_486539697)) break Label3;
            line_486539681 = colontmp__486539695[chckIndx(i_486539696, 0, (colontmp__486539695).length - 1)];
            Label4: do {
              if (line_486539681.startsWith("#")) {
              outputMeta_486539380(line_486539681);
              break Label4;
              }
              
              fields_486539677 = nimCopy(null, line_486539681.trim().split(";"), NTI637534212);
              if (!(((fields_486539677).length == 6))) {
              break Label4;
              }
              
              var antigen_486539685 = parseAntigen_486539562(fields_486539677);
              var allele_486539686 = (fields_486539677[chckIndx(0, 0, (fields_486539677).length - 1)] + fields_486539677[chckIndx(1, 0, (fields_486539677).length - 1)]);
              serological_486539330[0][allele_486539686] = antigen_486539685;
            } while (false);
            i_486539696 = addInt(i_486539696, 1);
            if (!(((colontmp__486539695).length == L_486539697))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);

  
}

function parseSplits_486539712(fields_486539713) {
    var locus_486539714 = fields_486539713[chckIndx(0, 0, (fields_486539713).length - 1)];
    var broad_486539715 = (locus_486539714 + fields_486539713[chckIndx(1, 0, (fields_486539713).length - 1)]);
    if (!((fields_486539713[chckIndx(2, 0, (fields_486539713).length - 1)] == ""))) {
    Label1: do {
      var ag_486539719 = null;
      var colontmp__486539771 = [];
      colontmp__486539771 = fields_486539713[chckIndx(2, 0, (fields_486539713).length - 1)].split("/");
      var i_486539772 = 0;
      var L_486539773 = (colontmp__486539771).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539772 < L_486539773)) break Label3;
            ag_486539719 = colontmp__486539771[chckIndx(i_486539772, 0, (colontmp__486539771).length - 1)];
            splits_486539334[0][(locus_486539714 + ag_486539719)] = {kind: 0, broad: broad_486539715};
            i_486539772 = addInt(i_486539772, 1);
            if (!(((colontmp__486539771).length == L_486539773))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    }
    
    if (!((fields_486539713[chckIndx(3, 0, (fields_486539713).length - 1)] == ""))) {
    Label4: do {
      var ag_486539729 = null;
      var colontmp__486539776 = [];
      colontmp__486539776 = fields_486539713[chckIndx(3, 0, (fields_486539713).length - 1)].split("/");
      var i_486539777 = 0;
      var L_486539778 = (colontmp__486539776).length;
      Label5: do {
          Label6: while (true) {
          if (!(i_486539777 < L_486539778)) break Label6;
            ag_486539729 = colontmp__486539776[chckIndx(i_486539777, 0, (colontmp__486539776).length - 1)];
            splits_486539334[0][(locus_486539714 + ag_486539729)] = {kind: 1, broad: broad_486539715};
            i_486539777 = addInt(i_486539777, 1);
            if (!(((colontmp__486539776).length == L_486539778))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    }
    

  
}

function initSplitData(data_486539755) {
    var fields_486539756 = [];
    Label1: do {
      var line_486539760 = null;
      var colontmp__486539766 = [];
      colontmp__486539766 = data_486539755.split("\n");
      var i_486539767 = 0;
      var L_486539768 = (colontmp__486539766).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539767 < L_486539768)) break Label3;
            line_486539760 = colontmp__486539766[chckIndx(i_486539767, 0, (colontmp__486539766).length - 1)];
            Label4: do {
              if (line_486539760.startsWith("#")) {
              outputMeta_486539380(line_486539760);
              break Label4;
              }
              
              fields_486539756 = nimCopy(null, line_486539760.trim().split(";"), NTI637534212);
              if (!(((fields_486539756).length == 4))) {
              break Label4;
              }
              
              parseSplits_486539712(fields_486539756);
            } while (false);
            i_486539767 = addInt(i_486539767, 1);
            if (!(((colontmp__486539766).length == L_486539768))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);

  
}

function setInnerHtml_486539785(elementId_486539786, value_486539787) {
    document.getElementById(elementId_486539786).innerHTML = value_486539787;

  
}

function clearForm_486539797() {
    setInnerHtml_486539785("alleleinfo", "");
    setInnerHtml_486539785("helptext", "");
    setInnerHtml_486539785("pgroup", "");
    setInnerHtml_486539785("pgrouplen", "");
    setInnerHtml_486539785("pother", "");
    setInnerHtml_486539785("ggroup", "");
    setInnerHtml_486539785("ggrouplen", "");
    setInnerHtml_486539785("gother", "");
    setInnerHtml_486539785("serokind", "");
    setInnerHtml_486539785("seroantigen", "");

  
}

function a_637534286(href_637534287, text_637534288) {
  var result_637534289 = null;

    result_637534289 = (((("<a href =\"" + href_637534287) + "\">") + text_637534288) + "</a>");

  return result_637534289;

}

function help_486539798(html_486539799) {
    setInnerHtml_486539785("helptext", ("<br>\n" + html_486539799));

  
}

function lookForAlternateAllele_486539800(allele_486539801) {
            var Temporary5;

  BeforeRet: do {
    clearForm_486539797();
    var cands_486539803 = [];
    Label1: do {
      var key_486539809 = null;
      var kkk_486540022 = null;
      for (kkk_486540022 in alleleIDs_486539326[0]) {
      key_486539809 = kkk_486540022;
      if (key_486539809.startsWith(allele_486539801)) {
      cands_486539803.push(key_486539809);;
      if ((10 < (cands_486539803).length)) {
      break Label1;
      }
      
      }
      
      }
    } while (false);
    if ((0 < (cands_486539803).length)) {
    var helpstring_486539820 = "Mer specifik fråga behövs, ange t.ex. någon av:<br>\n";
    Label2: do {
      var cand_486539824 = null;
      var i_486540024 = 0;
      var L_486540025 = (cands_486539803).length;
      Label3: do {
          Label4: while (true) {
          if (!(i_486540024 < L_486540025)) break Label4;
            cand_486539824 = cands_486539803[chckIndx(i_486540024, 0, (cands_486539803).length - 1)];
            if (null != (Temporary5 = (cand_486539824 + "<br>\n"), Temporary5)) { if (null == helpstring_486539820) helpstring_486539820 = Temporary5; else helpstring_486539820 += Temporary5; };
            i_486540024 = addInt(i_486540024, 1);
            if (!(((cands_486539803).length == L_486540025))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    if ((10 < (cands_486539803).length)) {
    if (null != "...") { if (null == helpstring_486539820) helpstring_486539820 = "..."; else helpstring_486539820 += "..."; };
    }
    
    help_486539798(helpstring_486539820);
    break BeforeRet;
    }
    
    help_486539798("Okänd allel, ange alleler som t.ex. A*01:01:01:01");
  } while (false);

  
}

function outputPgroup_486539828(allele_486539829) {
    var pgroup_486539835 = palleles_486539318[0][allele_486539829];
    setInnerHtml_486539785("pgroup", pgroup_486539835);
    setInnerHtml_486539785("pgrouplen", (((pgroups_486539322[0][pgroup_486539835]).length)+''));
    var alleleLinks_486539844 = [];
    Label1: do {
      var otherAllele_486539853 = null;
      var colontmp__486540028 = [];
      colontmp__486540028 = pgroups_486539322[0][pgroup_486539835];
      var i_486540029 = 0;
      var L_486540030 = (colontmp__486540028).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540029 < L_486540030)) break Label3;
            otherAllele_486539853 = colontmp__486540028[chckIndx(i_486540029, 0, (colontmp__486540028).length - 1)];
            var alleleIDHEX60gensym18_486539860 = alleleIDs_486539326[0][otherAllele_486539853];
            alleleLinks_486539844.push(a_637534286(("https://www.ebi.ac.uk/ipd/imgt/hla/alleles/allele/?accession=" + alleleIDHEX60gensym18_486539860), otherAllele_486539853));;
            i_486540029 = addInt(i_486540029, 1);
            if (!(((colontmp__486540028).length == L_486540030))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    var joined_486539865 = null;
    Label4: do {
      var i_486539871 = 0;
      var link_486539872 = null;
      var i_486540033 = 0;
      var L_486540034 = (alleleLinks_486539844).length;
      Label5: do {
          Label6: while (true) {
          if (!(i_486540033 < L_486540034)) break Label6;
            i_486539871 = i_486540033;
            link_486539872 = alleleLinks_486539844[chckIndx(i_486540033, 0, (alleleLinks_486539844).length - 1)];
            if (null != link_486539872) { if (null == joined_486539865) joined_486539865 = link_486539872; else joined_486539865 += link_486539872; };
            if ((i_486539871 < subInt((alleleLinks_486539844).length, 1))) {
            if (null != " ") { if (null == joined_486539865) joined_486539865 = " "; else joined_486539865 += " "; };
            }
            
            i_486540033 = addInt(i_486540033, 1);
            if (!(((alleleLinks_486539844).length == L_486540034))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    setInnerHtml_486539785("pother", joined_486539865);

  
}

function outputGgroup_486539876(allele_486539877) {
    var ggroup_486539883 = galleles_486539310[0][allele_486539877];
    setInnerHtml_486539785("ggroup", ggroup_486539883);
    setInnerHtml_486539785("ggrouplen", (((ggroups_486539314[0][ggroup_486539883]).length)+''));
    var alleleLinks_486539892 = [];
    Label1: do {
      var otherAllele_486539901 = null;
      var colontmp__486540037 = [];
      colontmp__486540037 = ggroups_486539314[0][ggroup_486539883];
      var i_486540038 = 0;
      var L_486540039 = (colontmp__486540037).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486540038 < L_486540039)) break Label3;
            otherAllele_486539901 = colontmp__486540037[chckIndx(i_486540038, 0, (colontmp__486540037).length - 1)];
            var alleleIDHEX60gensym19_486539908 = alleleIDs_486539326[0][otherAllele_486539901];
            alleleLinks_486539892.push(a_637534286(("https://www.ebi.ac.uk/ipd/imgt/hla/alleles/allele/?accession=" + alleleIDHEX60gensym19_486539908), otherAllele_486539901));;
            i_486540038 = addInt(i_486540038, 1);
            if (!(((colontmp__486540037).length == L_486540039))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    var joined_486539913 = null;
    Label4: do {
      var i_486539919 = 0;
      var link_486539920 = null;
      var i_486540042 = 0;
      var L_486540043 = (alleleLinks_486539892).length;
      Label5: do {
          Label6: while (true) {
          if (!(i_486540042 < L_486540043)) break Label6;
            i_486539919 = i_486540042;
            link_486539920 = alleleLinks_486539892[chckIndx(i_486540042, 0, (alleleLinks_486539892).length - 1)];
            if (null != link_486539920) { if (null == joined_486539913) joined_486539913 = link_486539920; else joined_486539913 += link_486539920; };
            if ((i_486539919 < subInt((alleleLinks_486539892).length, 1))) {
            if (null != " ") { if (null == joined_486539913) joined_486539913 = " "; else joined_486539913 += " "; };
            }
            
            i_486540042 = addInt(i_486540042, 1);
            if (!(((alleleLinks_486539892).length == L_486540043))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    setInnerHtml_486539785("gother", joined_486539913);

  
}

function br_637534290() {
  var result_637534291 = null;

    result_637534291 = "<br>";

  return result_637534291;

}

function outputSerological_486539924(allele_486539925) {
    var Temporary1;
    var Temporary2;
    var Temporary3;
    var Temporary4;

    var bwlink_486539926 = a_637534286("https://hla.alleles.org/antigens/bw46.html", "källa");
    var antigen_486539932 = serological_486539330[0][allele_486539925];
    var evidenceStr_486539933 = strSero_486539303[chckIndx(antigen_486539932.kind, 0, (strSero_486539303).length - 1)];
    var antigenStr_486539934 = antigen_486539932.antigen;
    if (antigen_486539932.isExpert) {
    if (null != " (med \"expert assigned\" tillägg)") { if (null == evidenceStr_486539933) evidenceStr_486539933 = " (med \"expert assigned\" tillägg)"; else evidenceStr_486539933 += " (med \"expert assigned\" tillägg)"; };
    if (null != (Temporary1 = ((" (expert " + antigen_486539932.expertAntigen) + ")"), Temporary1)) { if (null == antigenStr_486539934) antigenStr_486539934 = Temporary1; else antigenStr_486539934 += Temporary1; };
    }
    
    if (splits_486539334[0].hasOwnProperty(antigenStr_486539934)) {
    var split_486539947 = splits_486539334[0][antigenStr_486539934];
    var relation_486539948 = strRelation_486539304[chckIndx(split_486539947.kind, 0, (strRelation_486539304).length - 1)];
    if (null != (Temporary2 = (((br_637534290() + antigen_486539932.antigen) + relation_486539948) + split_486539947.broad), Temporary2)) { if (null == antigenStr_486539934) antigenStr_486539934 = Temporary2; else antigenStr_486539934 += Temporary2; };
    }
    
    if (contains_486539525(Bw4_486539305, antigen_486539932.antigen)) {
    if (null != (Temporary3 = ((((br_637534290() + antigen_486539932.antigen) + " bär Bw4 (") + bwlink_486539926) + ")"), Temporary3)) { if (null == antigenStr_486539934) antigenStr_486539934 = Temporary3; else antigenStr_486539934 += Temporary3; };
    }
    else {
    if (contains_486539525(Bw6_486539306, antigen_486539932.antigen)) {
    if (null != (Temporary4 = ((((br_637534290() + antigen_486539932.antigen) + " bär Bw6 (") + bwlink_486539926) + ")"), Temporary4)) { if (null == antigenStr_486539934) antigenStr_486539934 = Temporary4; else antigenStr_486539934 += Temporary4; };
    }
    }
    setInnerHtml_486539785("serokind", evidenceStr_486539933);
    setInnerHtml_486539785("seroantigen", antigenStr_486539934);

  
}

function lookupAllele() {
  BeforeRet: do {
    var allele_486539962 = document.getElementById("allele").value.toUpperCase().trim();
    if (((galleles_486539310[0].hasOwnProperty(allele_486539962) || palleles_486539318[0].hasOwnProperty(allele_486539962)) || alleleIDs_486539326[0].hasOwnProperty(allele_486539962))) {
    clearForm_486539797();
    var alleleIDHEX60gensym27_486539990 = alleleIDs_486539326[0][allele_486539962];
    setInnerHtml_486539785("alleleinfo", a_637534286(("https://www.ebi.ac.uk/ipd/imgt/hla/alleles/allele/?accession=" + alleleIDHEX60gensym27_486539990), allele_486539962));
    }
    else {
      lookForAlternateAllele_486539800(allele_486539962);
      break BeforeRet;
    }
    
    if (palleles_486539318[0].hasOwnProperty(allele_486539962)) {
    outputPgroup_486539828(allele_486539962);
    }
    
    if (galleles_486539310[0].hasOwnProperty(allele_486539962)) {
    outputGgroup_486539876(allele_486539962);
    }
    
    if (serological_486539330[0].hasOwnProperty(allele_486539962)) {
    outputSerological_486539924(allele_486539962);
    }
    
  } while (false);

  
}
