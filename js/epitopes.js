/* Generated by the Nim Compiler v0.19.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI160094 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160064 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160091 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160061 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160088 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160058 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160085 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160055 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160082 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160052 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160079 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160049 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160076 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160046 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160073 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160043 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI149016 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI149015 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI149307 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI149304 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI149301 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI143179 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI110717 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI144088 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI144085 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI144082 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3844 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI160070 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160097 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160040 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI160067 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3852 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3854 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI165544 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI142044 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI143015 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI143021 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI143017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI118015 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI149030 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI149027 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI149024 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3850.base = NTI3828;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
NTI3862.base = NTI3828;
var NNI143015 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI143015, name: "epVerified", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI143015, name: "epVerifiedPair", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI143015, name: "epOther", len: 0, sons: null}}};
NTI143015.node = NNI143015;
var NNI142044 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI142044, name: "ABC", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI142044, name: "DRB", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI142044, name: "DQA1", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI142044, name: "DQB1", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI142044, name: "DPA1", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI142044, name: "DPB1", len: 0, sons: null}}};
NTI142044.node = NNI142044;
var NNI143021 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "evidence", len: 0, typ: NTI143015, name: "evidence", sons: null}, 
{kind: 1, offset: "locus", len: 0, typ: NTI142044, name: "locus", sons: null}]};
NTI143021.node = NNI143021;
NTI143017.base = NTI143021;
var NNI149030 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI118015, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI143017, name: "Field1", sons: null}]};
NTI149030.node = NNI149030;
NTI149027.base = NTI149030;
var NNI149024 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI149027, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI149024.node = NNI149024;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
NTI165544.base = NTI138;
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
NTI3842.base = NTI3828;
NTI3846.base = NTI3842;
var NNI3854 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3854.node = NNI3854;
var NNI3852 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3852.node = NNI3852;
NTI3852.base = NTI3828;
NTI3854.base = NTI3852;
NTI160040.base = NTI138;
NTI160067.base = NTI160040;
NTI160070.base = NTI138;
NTI160097.base = NTI160070;
var NNI3844 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3844.node = NNI3844;
NTI3844.base = NTI3842;
var NNI144088 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI118015, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI143017, name: "Field2", sons: null}]};
NTI144088.node = NNI144088;
NTI144085.base = NTI144088;
var NNI144082 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI144085, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI144082.node = NNI144082;
NTI110717.base = NTI138;
NTI143179.base = NTI138;
var NNI149016 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "eplets", len: 0, typ: NTI149024, name: "eplets", sons: null}, 
{kind: 1, offset: "locus", len: 0, typ: NTI142044, name: "locus", sons: null}]};
NTI149016.node = NNI149016;
NTI149015.base = NTI149016;
var NNI149307 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI118015, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI149015, name: "Field2", sons: null}]};
NTI149307.node = NNI149307;
NTI149304.base = NTI149307;
var NNI149301 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI149304, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI149301.node = NNI149301;
NTI160043.base = NTI138;
NTI160073.base = NTI138;
NTI160046.base = NTI138;
NTI160076.base = NTI138;
NTI160049.base = NTI138;
NTI160079.base = NTI138;
NTI160052.base = NTI138;
NTI160082.base = NTI138;
NTI160055.base = NTI138;
NTI160085.base = NTI138;
NTI160058.base = NTI138;
NTI160088.base = NTI138;
NTI160061.base = NTI138;
NTI160091.base = NTI138;
NTI160064.base = NTI138;
NTI160094.base = NTI138;

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function eqStrings(a_16454, b_16455) {
		    if (a_16454 == b_16455) return true;
    if ((!a_16454) || (!b_16455)) return false;
    var alen = a_16454.length;
    if (alen != b_16455.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_16454[i] != b_16455[i]) return false;
    return true;
  

	
}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function mulInt(a_16639, b_16640) {
		    var result = a_16639 * b_16640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
		var rec_elements_160066 = nimCopy(null, [[makeNimstrLit("recA1"), makeNimstrLit("recA2")], [makeNimstrLit("recB1"), makeNimstrLit("recB2")], [makeNimstrLit("recC1"), makeNimstrLit("recC2")], [makeNimstrLit("recDRB1_1"), makeNimstrLit("recDRB1_2")], [makeNimstrLit("recDRB345_1"), makeNimstrLit("recDRB345_2")], [makeNimstrLit("recDQA1_1"), makeNimstrLit("recDQA1_2")], [makeNimstrLit("recDQB1_1"), makeNimstrLit("recDQB1_2")], [makeNimstrLit("recDPA1_1"), makeNimstrLit("recDPA1_2")], [makeNimstrLit("recDPB1_1"), makeNimstrLit("recDPB1_2")]], NTI160067);
		var don_elements_160096 = nimCopy(null, [[makeNimstrLit("donA1"), makeNimstrLit("donA2")], [makeNimstrLit("donB1"), makeNimstrLit("donB2")], [makeNimstrLit("donC1"), makeNimstrLit("donC2")], [makeNimstrLit("donDRB1_1"), makeNimstrLit("donDRB1_2")], [makeNimstrLit("donDRB345_1"), makeNimstrLit("donDRB345_2")], [makeNimstrLit("donDQA1_1"), makeNimstrLit("donDQA1_2")], [makeNimstrLit("donDQB1_1"), makeNimstrLit("donDQB1_2")], [makeNimstrLit("donDPA1_1"), makeNimstrLit("donDPA1_2")], [makeNimstrLit("donDPB1_1"), makeNimstrLit("donDPB1_2")]], NTI160097);

function divInt(a_16657, b_16658) {
		    if (b_16658 == 0) raiseDivByZero();
    if (b_16658 == -1 && a_16657 == 2147483647) raiseOverflow();
    return Math.trunc(a_16657 / b_16658);
  

	
}

function nimMax(a_16958, b_16959) {
		var Tmp1;

	var result_16960 = 0;

	BeforeRet: do {
		if ((b_16959 <= a_16958)) {
		Tmp1 = a_16958;
		}
		else {
		Tmp1 = b_16959;
		}
		
		result_16960 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16960;

}

function reprEnum(e_18481, typ_18482) {
	var result_18483 = null;

	var F={procname:"system.reprEnum",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system\\reprjs.nim",line:0};
	framePtr = F;
		if (!(is_undefined_18485(typ_18482.node.sons[e_18481]))) {
		F.line = 38;
		result_18483 = nimCopy(null, makeNimstrLit(typ_18482.node.sons[e_18481].name), NTI138);
		}
		else {
			F.line = 40;
			result_18483 = nimCopy(null, (cstrToNimstr((e_18481)+"")).concat(makeNimstrLit(" (invalid data!)")), NTI138);
		}
		
	framePtr = F.prev;

	return result_18483;

}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}
var ConstSet2 = setConstr(13, 10);

function nimMin(a_16940, b_16941) {
		var Tmp1;

	var result_16942 = 0;

	BeforeRet: do {
		if ((a_16940 <= b_16941)) {
		Tmp1 = a_16940;
		}
		else {
		Tmp1 = b_16941;
		}
		
		result_16942 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_16942;

}
var ConstSet3 = setConstr(32, 9, 11, 13, 10, 12);
		var expected_header_143167 = nimCopy(null, [makeNimstrLit("eplet"), makeNimstrLit("evidence"), makeNimstrLit("locus")], NTI143179);
var ConstSet4 = setConstr([65, 90]);
var ConstSet5 = setConstr(13, 10);
var ConstSet6 = setConstr(32, 9, 11, 13, 10, 12);
		var expected_header_149243 = nimCopy(null, [makeNimstrLit("allele"), makeNimstrLit("eplet"), makeNimstrLit("locus")], NTI143179);
						var rec_elements_a_160039 = nimCopy(null, [makeNimstrLit("recA1"), makeNimstrLit("recA2")], NTI160040);
						var don_elements_a_160069 = nimCopy(null, [makeNimstrLit("donA1"), makeNimstrLit("donA2")], NTI160070);
						var rec_elements_b_160042 = nimCopy(null, [makeNimstrLit("recB1"), makeNimstrLit("recB2")], NTI160043);
						var don_elements_b_160072 = nimCopy(null, [makeNimstrLit("donB1"), makeNimstrLit("donB2")], NTI160073);
						var rec_elements_c_160045 = nimCopy(null, [makeNimstrLit("recC1"), makeNimstrLit("recC2")], NTI160046);
						var don_elements_c_160075 = nimCopy(null, [makeNimstrLit("donC1"), makeNimstrLit("donC2")], NTI160076);
						var rec_elements_drb1_160048 = nimCopy(null, [makeNimstrLit("recDRB1_1"), makeNimstrLit("recDRB1_2")], NTI160049);
						var don_elements_drb1_160078 = nimCopy(null, [makeNimstrLit("donDRB1_1"), makeNimstrLit("donDRB1_2")], NTI160079);
						var rec_elements_drb345_160051 = nimCopy(null, [makeNimstrLit("recDRB345_1"), makeNimstrLit("recDRB345_2")], NTI160052);
						var don_elements_drb345_160081 = nimCopy(null, [makeNimstrLit("donDRB345_1"), makeNimstrLit("donDRB345_2")], NTI160082);
						var rec_elements_dqa1_160054 = nimCopy(null, [makeNimstrLit("recDQA1_1"), makeNimstrLit("recDQA1_2")], NTI160055);
						var don_elements_dqa1_160084 = nimCopy(null, [makeNimstrLit("donDQA1_1"), makeNimstrLit("donDQA1_2")], NTI160085);
						var rec_elements_dqb1_160057 = nimCopy(null, [makeNimstrLit("recDQB1_1"), makeNimstrLit("recDQB1_2")], NTI160058);
						var don_elements_dqb1_160087 = nimCopy(null, [makeNimstrLit("donDQB1_1"), makeNimstrLit("donDQB1_2")], NTI160088);
						var rec_elements_dpa1_160060 = nimCopy(null, [makeNimstrLit("recDPA1_1"), makeNimstrLit("recDPA1_2")], NTI160061);
						var don_elements_dpa1_160090 = nimCopy(null, [makeNimstrLit("donDPA1_1"), makeNimstrLit("donDPA1_2")], NTI160091);
						var rec_elements_dpb1_160063 = nimCopy(null, [makeNimstrLit("recDPB1_1"), makeNimstrLit("recDPB1_2")], NTI160064);
						var don_elements_dpb1_160093 = nimCopy(null, [makeNimstrLit("donDPB1_1"), makeNimstrLit("donDPB1_2")], NTI160094);
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_118246 = [0];
var eplets_table_160021 = [{data: null, counter: 0}];
var alleles_table_160029 = [{data: null, counter: 0}];

function is_power_of_two_35051(x_35053) {
		var Tmp1;

	var result_35054 = false;

	BeforeRet: do {
		if (!(0 < x_35053)) Tmp1 = false; else {			Tmp1 = ((x_35053 & (x_35053 - 1)) == 0);		}		result_35054 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_35054;

}

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2827;
		var e_20445 = null;
		F.line = 2828;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2829;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2830;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3783;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3790;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function init_149107(s_149113, initial_size_149115) {
	var F={procname:"init.init",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_35051(initial_size_149115))) {
		F.line = 396;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(396, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 397;
		s_149113.counter = 0;
		F.line = 398;
		s_149113.data = new Array(chckRange(initial_size_149115, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_149115, 0, 2147483647);++i) {s_149113.data[i]={Field0: 0, Field1: null};}	framePtr = F.prev;

	
}

function init_set_165554(initial_size_165558) {
	var result_165560 = [{data: null, counter: 0}];

	var F={procname:"initSet.initSet",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		F.line = 410;
		init_149107(result_165560[0], initial_size_165558);
	framePtr = F.prev;

	return result_165560[0];

}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function is_valid_155518(s_155523) {
	var result_155524 = false;

	var F={procname:"isValid.isValid",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		F.line = 77;
		result_155524 = (0 < (s_155523.data != null ? s_155523.data.length : 0));
	framePtr = F.prev;

	return result_155524;

}

function is_filled_125282(hcode_125284) {
	var result_125285 = false;

	var F={procname:"sets.isFilled",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		F.line = 63;
		result_125285 = !((hcode_125284 == 0));
	framePtr = F.prev;

	return result_125285;

}

function HEX21HEX26_118016(h_118018, val_118019) {
	var result_118020 = 0;

	var F={procname:"hashes.!&",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\hashes.nim",line:0};
	framePtr = F;
		F.line = 52;
		result_118020 = ((h_118018 + val_118019) >>> 0);
		F.line = 53;
		result_118020 = ((result_118020 + (result_118020 << 10)) >>> 0);
		F.line = 54;
		result_118020 = (result_118020 ^ ((result_118020 >>> 0) >>> 6));
	framePtr = F.prev;

	return result_118020;

}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function HEX21HEX24_118070(h_118072) {
	var result_118073 = 0;

	var F={procname:"hashes.!$",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\hashes.nim",line:0};
	framePtr = F;
		F.line = 59;
		result_118073 = ((h_118072 + (h_118072 << 3)) >>> 0);
		F.line = 60;
		result_118073 = (result_118073 ^ ((result_118073 >>> 0) >>> 11));
		F.line = 61;
		result_118073 = ((result_118073 + (result_118073 << 15)) >>> 0);
	framePtr = F.prev;

	return result_118073;

}

function hash_118900(x_118902) {
	var result_118903 = 0;

	var F={procname:"hashes.hash",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\hashes.nim",line:0};
	framePtr = F;
		F.line = 132;
		var h_118904 = 0;
		L1: do {
			F.line = 133;
			var i_118916 = 0;
			F.line = 2016;
			var colontmp__118924 = 0;
			F.line = 133;
			colontmp__118924 = subInt((x_118902 != null ? x_118902.length : 0), 1);
			F.line = 2019;
			var res_118927 = 0;
			L2: do {
				F.line = 2020;
					L3: while (true) {
					if (!(res_118927 <= colontmp__118924)) break L3;
						F.line = 2021;
						i_118916 = res_118927;
						F.line = 134;
						h_118904 = HEX21HEX26_118016(h_118904, x_118902[chckIndx(i_118916, 0, x_118902.length+0-1)-0]);
						F.line = 2022;
						res_118927 = addInt(res_118927, 1);
					}
			} while(false);
		} while(false);
		F.line = 135;
		result_118903 = HEX21HEX24_118070(h_118904);
	framePtr = F.prev;

	return result_118903;

}

function hash_143098(x_143102) {
	var result_143103 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_143103 = x_143102;
	framePtr = F.prev;

	return result_143103;

}

function hash_143124(x_143128) {
	var result_143129 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\hashes.nim",line:0};
	framePtr = F;
		F.line = 128;
		result_143129 = x_143128;
	framePtr = F.prev;

	return result_143129;

}

function hash_143090(ep_143092) {
	var result_143093 = 0;

	var F={procname:"eplets.hash",prev:framePtr,filename:"eplets.nim",line:0};
	framePtr = F;
		F.line = 36;
		var h_143094 = 0;
		F.line = 37;
		h_143094 = HEX21HEX26_118016(h_143094, hash_118900(ep_143092.name));
		F.line = 38;
		h_143094 = HEX21HEX26_118016(h_143094, hash_143098(ep_143092.evidence));
		F.line = 39;
		h_143094 = HEX21HEX26_118016(h_143094, hash_143124(ep_143092.locus));
		F.line = 40;
		result_143093 = HEX21HEX24_118070(h_143094);
	framePtr = F.prev;

	return result_143093;

}

function next_try_125431(h_125433, max_hash_125434) {
	var result_125435 = 0;

	var F={procname:"sets.nextTry",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		F.line = 147;
		result_125435 = (addInt(h_125433, 1) & max_hash_125434);
	framePtr = F.prev;

	return result_125435;

}

function raw_get_155821(s_155826, key_155828, hc_155830, hc_155830_Idx) {
						var Tmp3;

	var result_155831 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 162;
		hc_155830[hc_155830_Idx] = hash_143090(key_155828);
		if ((hc_155830[hc_155830_Idx] == 0)) {
		F.line = 164;
		hc_155830[hc_155830_Idx] = 314159265;
		}
		
		F.line = 150;
		var h_155841 = (hc_155830[hc_155830_Idx] & (s_155826.data != null ? (s_155826.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_125282(s_155826.data[chckIndx(h_155841, 0, s_155826.data.length+0-1)-0].Field0)) break L2;
						if (!(s_155826.data[chckIndx(h_155841, 0, s_155826.data.length+0-1)-0].Field0 == hc_155830[hc_155830_Idx])) Tmp3 = false; else {							Tmp3 = (s_155826.data[chckIndx(h_155841, 0, s_155826.data.length+0-1)-0].Field1 == key_155828);						}					if (Tmp3) {
					F.line = 157;
					result_155831 = h_155841;
					break BeforeRet;
					}
					
					F.line = 158;
					h_155841 = next_try_125431(h_155841, (s_155826.data != null ? (s_155826.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_155831 = subInt(-1, h_155841);
	} while (false);
	framePtr = F.prev;

	return result_155831;

}

function must_rehash_125361(length_125363, counter_125364) {
	var result_125365 = false;

	var F={procname:"sets.mustRehash",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		if (!((counter_125364 < length_125363))) {
		F.line = 134;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(134, 9) `\x0Acounter < length` "));
		}
		
		F.line = 135;
		result_125365 = ((mulInt(length_125363, 2) < mulInt(counter_125364, 3)) || (subInt(length_125363, counter_125364) < 4));
	framePtr = F.prev;

	return result_125365;

}

function raw_get_known_hc_157808(s_157813, key_157815, hc_157817) {
	var result_157818 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 150;
		var h_157827 = (hc_157817 & (s_157813.data != null ? (s_157813.data.length-1) : -1));
		L1: do {
			F.line = 151;
				L2: while (true) {
				if (!is_filled_125282(s_157813.data[chckIndx(h_157827, 0, s_157813.data.length+0-1)-0].Field0)) break L2;
					if (((s_157813.data[chckIndx(h_157827, 0, s_157813.data.length+0-1)-0].Field0 == hc_157817) && (s_157813.data[chckIndx(h_157827, 0, s_157813.data.length+0-1)-0].Field1 == key_157815))) {
					F.line = 157;
					result_157818 = h_157827;
					break BeforeRet;
					}
					
					F.line = 158;
					h_157827 = next_try_125431(h_157827, (s_157813.data != null ? (s_157813.data.length-1) : -1));
				}
		} while(false);
		F.line = 159;
		result_157818 = subInt(-1, h_157827);
	} while (false);
	framePtr = F.prev;

	return result_157818;

}

function raw_insert_159057(s_159063, data_159067, data_159067_Idx, key_159069, hc_159071, h_159073) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		F.line = 168;
		data_159067[data_159067_Idx][chckIndx(h_159073, 0, data_159067[data_159067_Idx].length+0-1)-0].Field1 = key_159069;
		F.line = 169;
		data_159067[data_159067_Idx][chckIndx(h_159073, 0, data_159067[data_159067_Idx].length+0-1)-0].Field0 = hc_159071;
	framePtr = F.prev;

	
}

function enlarge_156816(s_156822) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		F.line = 221;
		var n_156827 = null;
		F.line = 222;
		n_156827 = new Array(chckRange(mulInt((s_156822.data != null ? s_156822.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((s_156822.data != null ? s_156822.data.length : 0), 2), 0, 2147483647);++i) {n_156827[i]={Field0: 0, Field1: null};}		F.line = 223;
		var Tmp1 = s_156822.data; s_156822.data = n_156827; n_156827 = Tmp1;		L2: do {
			F.line = 224;
			var i_157082 = 0;
			F.line = 2000;
			var colontmp__159559 = 0;
			F.line = 224;
			colontmp__159559 = (n_156827 != null ? (n_156827.length-1) : -1);
			F.line = 2006;
			var res_159562 = 0;
			L3: do {
				F.line = 2007;
					L4: while (true) {
					if (!(res_159562 <= colontmp__159559)) break L4;
						F.line = 2008;
						i_157082 = res_159562;
						if (is_filled_125282(n_156827[chckIndx(i_157082, 0, n_156827.length+0-1)-0].Field0)) {
						F.line = 226;
						var j_158566 = subInt(-1, raw_get_known_hc_157808(s_156822, n_156827[chckIndx(i_157082, 0, n_156827.length+0-1)-0].Field1, n_156827[chckIndx(i_157082, 0, n_156827.length+0-1)-0].Field0));
						F.line = 227;
						raw_insert_159057(s_156822, s_156822, "data", n_156827[chckIndx(i_157082, 0, n_156827.length+0-1)-0].Field1, n_156827[chckIndx(i_157082, 0, n_156827.length+0-1)-0].Field0, j_158566);
						}
						
						F.line = 2009;
						res_159562 = addInt(res_159562, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function incl_155490(s_155496, key_155498) {
	var F={procname:"incl.incl",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_155518(s_155496))) {
		F.line = 261;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(261, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 230;
		var hc_155801 = [0];
		F.line = 231;
		var index_156581 = raw_get_155821(s_155496, key_155498, hc_155801, 0);
		if ((index_156581 < 0)) {
		if (must_rehash_125361((s_155496.data != null ? s_155496.data.length : 0), s_155496.counter)) {
		F.line = 234;
		enlarge_156816(s_155496);
		F.line = 235;
		index_156581 = raw_get_known_hc_157808(s_155496, key_155498, hc_155801[0]);
		}
		
		F.line = 236;
		raw_insert_159057(s_155496, s_155496, "data", key_155498, hc_155801[0], subInt(-1, index_156581));
		F.line = 237;
		s_155496.counter = addInt(s_155496.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function incl_166024(s_166030, other_166033) {
	var F={procname:"incl.incl",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_155518(s_166030))) {
		F.line = 275;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(275, 10) `isValid(s)` The set `s` needs to be initialized."));
		}
		
		if (!(is_valid_155518(other_166033))) {
		F.line = 276;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(276, 10) `isValid(other)` The set `other` needs to be initialized."));
		}
		
		L1: do {
			F.line = 277;
			var item_167112 = null;
			if (!(is_valid_155518(other_166033))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L2: do {
				F.line = 120;
				var h_167205 = 0;
				F.line = 2016;
				var colontmp__167207 = 0;
				F.line = 120;
				colontmp__167207 = (other_166033.data != null ? (other_166033.data.length-1) : -1);
				F.line = 2019;
				var res_167209 = 0;
				L3: do {
					F.line = 2020;
						L4: while (true) {
						if (!(res_167209 <= colontmp__167207)) break L4;
							F.line = 2021;
							h_167205 = res_167209;
							if (is_filled_125282(other_166033.data[chckIndx(h_167205, 0, other_166033.data.length+0-1)-0].Field0)) {
							F.line = 121;
							item_167112 = other_166033.data[chckIndx(h_167205, 0, other_166033.data.length+0-1)-0].Field1;
							F.line = 277;
							incl_155490(s_166030, item_167112);
							}
							
							F.line = 2022;
							res_167209 = addInt(res_167209, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function is_filled_121491(hcode_121493) {
	var result_121494 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tableimpl.nim",line:0};
	framePtr = F;
		F.line = 18;
		result_121494 = !((hcode_121493 == 0));
	framePtr = F.prev;

	return result_121494;

}

function next_try_121614(h_121616, max_hash_121617) {
	var result_121618 = 0;

	var F={procname:"tables.nextTry",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tableimpl.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_121618 = (addInt(h_121616, 1) & max_hash_121617);
	framePtr = F.prev;

	return result_121618;

}

function raw_get_149689(t_149694, key_149696, hc_149698, hc_149698_Idx) {
						var Tmp3;

	var result_149699 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_149698[hc_149698_Idx] = hash_118900(key_149696);
		if ((hc_149698[hc_149698_Idx] == 0)) {
		F.line = 45;
		hc_149698[hc_149698_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_149711 = (hc_149698[hc_149698_Idx] & (t_149694.data != null ? (t_149694.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_121491(t_149694.data[chckIndx(h_149711, 0, t_149694.data.length+0-1)-0].Field0)) break L2;
						if (!(t_149694.data[chckIndx(h_149711, 0, t_149694.data.length+0-1)-0].Field0 == hc_149698[hc_149698_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_149694.data[chckIndx(h_149711, 0, t_149694.data.length+0-1)-0].Field1, key_149696);						}					if (Tmp3) {
					F.line = 38;
					result_149699 = h_149711;
					break BeforeRet;
					}
					
					F.line = 39;
					h_149711 = next_try_121614(h_149711, (t_149694.data != null ? (t_149694.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_149699 = subInt(-1, h_149711);
	} while (false);
	framePtr = F.prev;

	return result_149699;

}

function HEX5BHEX5D_154423(t_154430, key_154432) {
	var result_154434 = [null, 0];
	var result_154434_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
		F.line = 146;
		var hc_154436 = [0];
		F.line = 147;
		var index_154450 = raw_get_149689(t_154430, key_154432, hc_154436, 0);
		if ((0 <= index_154450)) {
		F.line = 148;
		result_154434 = t_154430.data[chckIndx(index_154450, 0, t_154430.data.length+0-1)-0]; result_154434_Idx = "Field2";
		}
		else {
			F.line = 2807;
			var e_154807 = null;
			F.line = 2808;
			e_154807 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 151;
			e_154807.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(key_154432), NTI138);
			F.line = 2803;
			e_154807.parent = null;
			F.line = 151;
			raiseException(e_154807, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_154434, result_154434_Idx];

}

function get_eplets_165538(elements_165546) {
										var Tmp7;

	var result_165551 = [{data: null, counter: 0}];

	var F={procname:"epitopes.getEplets",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		F.line = 255;
		nimCopy(result_165551[0], init_set_165554(64), NTI149024);
		L1: do {
			F.line = 256;
			var element_group_165663 = [null, null];
			F.line = 2173;
			var i_167234 = 0;
			if ((i_167234 <= 8)) {
			L2: do {
				F.line = 2175;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2176;
						nimCopy(element_group_165663, elements_165546[chckIndx(i_167234, 0, elements_165546.length+0-1)-0], NTI165544);
						L4: do {
							F.line = 257;
							var element_165673 = null;
							F.line = 2173;
							var i_167231 = 0;
							if ((i_167231 <= 1)) {
							L5: do {
								F.line = 2175;
									L6: while (true) {
									if (!true) break L6;
										F.line = 2176;
										element_165673 = element_group_165663[chckIndx(i_167231, 0, element_group_165663.length+0-1)-0];
										F.line = 258;
										var allele_165674 = cstrToNimstr(document.getElementById(toJSStr(element_165673)).value);
										if (!(eqStrings(allele_165674, []))) {
										F.line = 261;
										incl_166024(result_165551[0], (Tmp7 = HEX5BHEX5D_154423(alleles_table_160029[0], allele_165674), Tmp7[0])[Tmp7[1]].eplets);
										}
										
										if ((1 <= i_167231)) {
										F.line = 2177;
										break L5;
										}
										
										F.line = 2178;
										i_167231 = addInt(i_167231, 1);
									}
							} while(false);
							}
							
						} while(false);
						if ((8 <= i_167234)) {
						F.line = 2177;
						break L2;
						}
						
						F.line = 2178;
						i_167234 = addInt(i_167234, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	return result_165551[0];

}

function contains_168214(s_168219, key_168221) {
	var result_168222 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_155518(s_168219))) {
		F.line = 211;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(211, 10) `isValid(s)` The set needs to be initialized."));
		}
		
		F.line = 212;
		var hc_168401 = [0];
		F.line = 213;
		var index_168432 = raw_get_155821(s_168219, key_168221, hc_168401, 0);
		F.line = 214;
		result_168222 = (0 <= index_168432);
	framePtr = F.prev;

	return result_168222;

}

function difference_167563(s1_167568, s2_167571) {
	var result_167573 = [{data: null, counter: 0}];

	var F={procname:"difference.difference",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		if (!(is_valid_155518(s1_167568))) {
		F.line = 496;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(496, 10) `isValid(s1)` The set `s1` needs to be initialized."));
		}
		
		if (!(is_valid_155518(s2_167571))) {
		F.line = 497;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(497, 10) `isValid(s2)` The set `s2` needs to be initialized."));
		}
		
		F.line = 498;
		nimCopy(result_167573[0], init_set_165554(64), NTI149024);
		L1: do {
			F.line = 499;
			var item_168016 = null;
			if (!(is_valid_155518(s1_167568))) {
			F.line = 119;
			failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
			}
			
			L2: do {
				F.line = 120;
				var h_168540 = 0;
				F.line = 2016;
				var colontmp__168542 = 0;
				F.line = 120;
				colontmp__168542 = (s1_167568.data != null ? (s1_167568.data.length-1) : -1);
				F.line = 2019;
				var res_168544 = 0;
				L3: do {
					F.line = 2020;
						L4: while (true) {
						if (!(res_168544 <= colontmp__168542)) break L4;
							F.line = 2021;
							h_168540 = res_168544;
							if (is_filled_125282(s1_167568.data[chckIndx(h_168540, 0, s1_167568.data.length+0-1)-0].Field0)) {
							F.line = 121;
							item_168016 = s1_167568.data[chckIndx(h_168540, 0, s1_167568.data.length+0-1)-0].Field1;
							if (!(contains_168214(s2_167571, item_168016))) {
							F.line = 501;
							incl_155490(result_167573[0], item_168016);
							}
							
							}
							
							F.line = 2022;
							res_168544 = addInt(res_168544, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_167573[0];

}

function HEX2D_167532(s1_167537, s2_167540) {
	var result_167542 = {data: null, counter: 0};

	var F={procname:"-.-",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		F.line = 532;
		nimCopy(result_167542, difference_167563(s1_167537, s2_167540), NTI149024);
	framePtr = F.prev;

	return result_167542;

}

function card_167298(s_167303) {
	var result_167304 = 0;

	var F={procname:"card.card",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim",line:0};
	framePtr = F;
		F.line = 98;
		result_167304 = s_167303.counter;
	framePtr = F.prev;

	return result_167304;

}

function new_seq_160128(len_160132) {
	var result_160134 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 706;
		result_160134 = new Array(len_160132); for (var i=0;i<len_160132;++i) {result_160134[i]=null;}	framePtr = F.prev;

	return result_160134;

}

function raiseDivByZero() {
		var e_16095 = null;
		e_16095 = {m_type: NTI3844, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16095.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_16095.parent = null;
		raiseException(e_16095, "DivByZeroError");

	
}

function HEX2A_37032(x_37034, order_37035) {
	var result_37036 = 0;

	var F={procname:"algorithm.*",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\algorithm.nim",line:0};
	framePtr = F;
		F.line = 21;
		var y_37043 = subInt(order_37035, 1);
		F.line = 22;
		result_37036 = subInt((x_37034 ^ y_37043), y_37043);
	framePtr = F.prev;

	return result_37036;

}

function merge_161167(a_161173, b_161177, lo_161179, m_161181, hi_161183, cmp_161190, order_161192) {
	var F={procname:"merge.merge",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\algorithm.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((HEX2A_37032(cmp_161190(a_161173[chckIndx(m_161181, 0, a_161173.length+0-1)-0], a_161173[chckIndx(addInt(m_161181, 1), 0, a_161173.length+0-1)-0]), order_161192) <= 0)) {
		F.line = 197;
		break BeforeRet;
		}
		
		F.line = 198;
		var j_161193 = lo_161179;
		if (!((j_161193 <= m_161181))) {
		F.line = 200;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\algorithm.nim(200, 10) `j <= m` "));
		}
		
		F.line = 202;
		var bb_161602 = 0;
		L1: do {
			F.line = 203;
				L2: while (true) {
				if (!(j_161193 <= m_161181)) break L2;
					F.line = 204;
					b_161177[chckIndx(bb_161602, 0, b_161177.length+0-1)-0] = a_161173[chckIndx(j_161193, 0, a_161173.length+0-1)-0];
					F.line = 205;
					bb_161602 = addInt(bb_161602, 1);
					F.line = 206;
					j_161193 = addInt(j_161193, 1);
				}
		} while(false);
		F.line = 210;
		var i_161820 = 0;
		F.line = 211;
		var k_161821 = lo_161179;
		L3: do {
			F.line = 213;
				L4: while (true) {
				if (!((k_161821 < j_161193) && (j_161193 <= hi_161183))) break L4;
					if ((HEX2A_37032(cmp_161190(b_161177[chckIndx(i_161820, 0, b_161177.length+0-1)-0], a_161173[chckIndx(j_161193, 0, a_161173.length+0-1)-0]), order_161192) <= 0)) {
					F.line = 215;
					a_161173[chckIndx(k_161821, 0, a_161173.length+0-1)-0] = b_161177[chckIndx(i_161820, 0, b_161177.length+0-1)-0];
					F.line = 216;
					i_161820 = addInt(i_161820, 1);
					}
					else {
						F.line = 218;
						a_161173[chckIndx(k_161821, 0, a_161173.length+0-1)-0] = a_161173[chckIndx(j_161193, 0, a_161173.length+0-1)-0];
						F.line = 219;
						j_161193 = addInt(j_161193, 1);
					}
					
					F.line = 220;
					k_161821 = addInt(k_161821, 1);
				}
		} while(false);
		L5: do {
			F.line = 223;
				L6: while (true) {
				if (!(k_161821 < j_161193)) break L6;
					F.line = 224;
					a_161173[chckIndx(k_161821, 0, a_161173.length+0-1)-0] = b_161177[chckIndx(i_161820, 0, b_161177.length+0-1)-0];
					F.line = 225;
					k_161821 = addInt(k_161821, 1);
					F.line = 226;
					i_161820 = addInt(i_161820, 1);
				}
		} while(false);
	} while (false);
	framePtr = F.prev;

	
}

function sort_161122(a_161128, cmp_161135, order_161137) {
	var F={procname:"sort.sort",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\algorithm.nim",line:0};
	framePtr = F;
		F.line = 259;
		var n_161144 = (a_161128 != null ? a_161128.length : 0);
		F.line = 260;
		var b_161146 = null;
		F.line = 261;
		b_161146 = new Array(chckRange(divInt(n_161144, 2), 0, 2147483647)); for (var i=0;i<chckRange(divInt(n_161144, 2), 0, 2147483647);++i) {b_161146[i]=null;}		F.line = 262;
		var s_161161 = 1;
		L1: do {
			F.line = 263;
				L2: while (true) {
				if (!(s_161161 < n_161144)) break L2;
					F.line = 264;
					var m_161162 = subInt(subInt(n_161144, 1), s_161161);
					L3: do {
						F.line = 265;
							L4: while (true) {
							if (!(0 <= m_161162)) break L4;
								F.line = 266;
								merge_161167(a_161128, b_161146, nimMax(addInt(subInt(m_161162, s_161161), 1), 0), m_161162, addInt(m_161162, s_161161), cmp_161135, order_161137);
								F.line = 267;
								m_161162 = subInt(m_161162, mulInt(s_161161, 2));
							}
					} while(false);
					F.line = 268;
					s_161161 = mulInt(s_161161, 2);
				}
		} while(false);
	framePtr = F.prev;

	
}

function cmpStrings(a_16418, b_16419) {
		    if (a_16418 == b_16419) return 0;
    if (!a_16418) return -1;
    if (!b_16419) return 1;
    for (var i = 0; i < a_16418.length && i < b_16419.length; i++) {
      var result = a_16418[i] - b_16419[i];
      if (result != 0) return result;
    }
    return a_16418.length - b_16419.length;
  

	
}

function cmp_7058(x_7060, y_7061) {
	var result_16438 = 0;

	BeforeRet: do {
		result_16438 = cmpStrings(x_7060, y_7061);
		break BeforeRet;
	} while (false);

	return result_16438;

}

function is_undefined_18485(x_18489) {
	var result_18490 = false;

	var F={procname:"isUndefined.isUndefined",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system\\reprjs.nim",line:0};
	framePtr = F;
		F.line = 34;
		result_18490 = x_18489 === undefined;
	framePtr = F.prev;

	return result_18490;

}

function nsuJoinSep(a_113144, sep_113145) {
	var result_113146 = null;

		if ((0 < (a_113144 != null ? a_113144.length : 0))) {
		var l_113161 = ((sep_113145 != null ? sep_113145.length : 0) * ((a_113144 != null ? a_113144.length : 0) - 1));
		L1: do {
			var i_113180 = 0;
			var colontmp__113210 = 0;
			colontmp__113210 = (a_113144 != null ? (a_113144.length-1) : -1);
			var res_113213 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_113213 <= colontmp__113210)) break L3;
						i_113180 = res_113213;
						l_113161 += (a_113144[i_113180] != null ? a_113144[i_113180].length : 0);
						res_113213 += 1;
					}
			} while(false);
		} while(false);
		result_113146 = nimCopy(null, mnewString(0), NTI138);
		if (result_113146 != null) { result_113146 = (result_113146).concat(a_113144[0]); } else { result_113146 = a_113144[0].slice(); };
		L4: do {
			var i_113208 = 0;
			var colontmp__113218 = 0;
			colontmp__113218 = (a_113144 != null ? (a_113144.length-1) : -1);
			var res_113221 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_113221 <= colontmp__113218)) break L6;
						i_113208 = res_113221;
						if (result_113146 != null) { result_113146 = (result_113146).concat(sep_113145); } else { result_113146 = sep_113145.slice(); };
						if (result_113146 != null) { result_113146 = (result_113146).concat(a_113144[i_113208]); } else { result_113146 = a_113144[i_113208].slice(); };
						res_113221 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			result_113146 = nimCopy(null, [], NTI138);
		}
		

	return result_113146;

}

function output_mismatched_eplets_167248(eplets_set_167254) {
	var F={procname:"epitopes.outputMismatchedEplets",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		F.line = 265;
		document.getElementById("hvgEpletCountTotal").innerHTML = toJSStr(cstrToNimstr((card_167298(eplets_set_167254))+""));
		L1: do {
			F.line = 267;
			var locus_167380 = 0;
			F.line = 2173;
			var i_167494 = 0;
			if ((i_167494 <= 5)) {
			L2: do {
				F.line = 2175;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2176;
						locus_167380 = [0, 1, 2, 3, 4, 5][chckIndx(i_167494, 0, [0, 1, 2, 3, 4, 5].length+0-1)-0];
						F.line = 268;
						var sorted_eplets_167409 = new_seq_160128(0);
						L4: do {
							F.line = 269;
							var eplet_167417 = null;
							if (!(is_valid_155518(eplets_set_167254))) {
							F.line = 119;
							failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
							}
							
							L5: do {
								F.line = 120;
								var h_167485 = 0;
								F.line = 2016;
								var colontmp__167487 = 0;
								F.line = 120;
								colontmp__167487 = (eplets_set_167254.data != null ? (eplets_set_167254.data.length-1) : -1);
								F.line = 2019;
								var res_167489 = 0;
								L6: do {
									F.line = 2020;
										L7: while (true) {
										if (!(res_167489 <= colontmp__167487)) break L7;
											F.line = 2021;
											h_167485 = res_167489;
											if (is_filled_125282(eplets_set_167254.data[chckIndx(h_167485, 0, eplets_set_167254.data.length+0-1)-0].Field0)) {
											F.line = 121;
											eplet_167417 = eplets_set_167254.data[chckIndx(h_167485, 0, eplets_set_167254.data.length+0-1)-0].Field1;
											if ((eplet_167417.locus == locus_167380)) {
											F.line = 271;
											var Tmp8 = nimCopy(null, eplet_167417.name, NTI138);
											if (sorted_eplets_167409 != null) { sorted_eplets_167409.push(Tmp8); } else { sorted_eplets_167409 = [Tmp8]; };
											}
											
											}
											
											F.line = 2022;
											res_167489 = addInt(res_167489, 1);
										}
								} while(false);
							} while(false);
						} while(false);
						F.line = 272;
						sort_161122(sorted_eplets_167409, cmp_7058, 1);
						F.line = 273;
						document.getElementById(toJSStr((makeNimstrLit("hvgEpletCount")).concat(reprEnum(locus_167380, NTI142044)))).innerHTML = toJSStr(cstrToNimstr(((sorted_eplets_167409 != null ? sorted_eplets_167409.length : 0))+""));
						F.line = 274;
						document.getElementById(toJSStr((makeNimstrLit("hvgMismatchedEplets")).concat(reprEnum(locus_167380, NTI142044)))).innerHTML = toJSStr(nsuJoinSep(sorted_eplets_167409, makeNimstrLit(", ")));
						if ((5 <= i_167494)) {
						F.line = 2177;
						break L2;
						}
						
						F.line = 2178;
						i_167494 = addInt(i_167494, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	
}

function showMismatchedEplets() {
	var F={procname:"epitopes.showMismatchedEplets",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		F.line = 278;
		var rec_eplets_167510 = get_eplets_165538(rec_elements_160066);
		F.line = 279;
		var don_eplets_167511 = get_eplets_165538(don_elements_160096);
		F.line = 280;
		var hvg_eplets_168573 = HEX2D_167532(don_eplets_167511, rec_eplets_167510);
		if (document.getElementById("includeOther").checked) {
		F.line = 284;
		output_mismatched_eplets_167248(hvg_eplets_168573);
		}
		else {
			F.line = 286;
			var other_excluded_168582 = [init_set_165554(64)];
			L1: do {
				F.line = 287;
				var eplet_168590 = null;
				if (!(is_valid_155518(hvg_eplets_168573))) {
				F.line = 119;
				failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\sets.nim(119, 10) `isValid(s)` The set needs to be initialized."));
				}
				
				L2: do {
					F.line = 120;
					var h_168692 = 0;
					F.line = 2016;
					var colontmp__168694 = 0;
					F.line = 120;
					colontmp__168694 = (hvg_eplets_168573.data != null ? (hvg_eplets_168573.data.length-1) : -1);
					F.line = 2019;
					var res_168696 = 0;
					L3: do {
						F.line = 2020;
							L4: while (true) {
							if (!(res_168696 <= colontmp__168694)) break L4;
								F.line = 2021;
								h_168692 = res_168696;
								if (is_filled_125282(hvg_eplets_168573.data[chckIndx(h_168692, 0, hvg_eplets_168573.data.length+0-1)-0].Field0)) {
								F.line = 121;
								eplet_168590 = hvg_eplets_168573.data[chckIndx(h_168692, 0, hvg_eplets_168573.data.length+0-1)-0].Field1;
								if (!((eplet_168590.evidence == 2))) {
								F.line = 289;
								incl_155490(other_excluded_168582[0], eplet_168590);
								}
								
								}
								
								F.line = 2022;
								res_168696 = addInt(res_168696, 1);
							}
					} while(false);
				} while(false);
			} while(false);
			F.line = 290;
			output_mismatched_eplets_167248(other_excluded_168582[0]);
		}
		
	framePtr = F.prev;

	
}

function make_request_141014(url_141016, cb_141020) {

		function alert_contents_141032(e_141034) {
			var F={procname:"makeRequest.alertContents",prev:framePtr,filename:"remoterequest.nim",line:0};
			framePtr = F;
				if ((xhr_141021.readyState == 4)) {
				if ((xhr_141021.status == 200)) {
				F.line = 13;
				cb_141020(xhr_141021.responseText);
				}
				else {
					F.line = 15;
				rawEcho(makeNimstrLit("Could not retrieve data from "), cstrToNimstr(url_141016));
				}
				
				}
				
			framePtr = F.prev;

			
		}

	var F={procname:"remoterequest.makeRequest",prev:framePtr,filename:"remoterequest.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 5;
		var xhr_141021 = new XMLHttpRequest();
		if ((xhr_141021 === null)) {
		F.line = 8;
		rawEcho(makeNimstrLit("Cannot create an XMLHTTP instance for url "), cstrToNimstr(url_141016));
		F.line = 9;
		break BeforeRet;
		}
		
		F.line = 16;
		xhr_141021.onreadystatechange = alert_contents_141032;
		F.line = 17;
		xhr_141021.open("GET", url_141016, true, null, null);
		F.line = 20;
		xhr_141021.responseType = "text";
		F.line = 22;
		xhr_141021.send();
	} while (false);
	framePtr = F.prev;

	
}

function init_table_144104(initial_size_144109) {
	var result_144111 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_35051(initial_size_144109))) {
		F.line = 338;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim(338, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 339;
		result_144111.counter = 0;
		F.line = 340;
		result_144111.data = new Array(chckRange(initial_size_144109, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_144109, 0, 2147483647);++i) {result_144111.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_144111;

}

function substr_23422(s_23424, first_23425, last_23426) {
	var result_23427 = null;

	var F={procname:"system.substr",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 4169;
		var first_23428 = nimMax(first_23425, 0);
		F.line = 4170;
		var l_23430 = nimMax(addInt(subInt(nimMin(last_23426, (s_23424 != null ? (s_23424.length-1) : -1)), first_23428), 1), 0);
		F.line = 4171;
		result_23427 = nimCopy(null, mnewString(chckRange(l_23430, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 4172;
			var i_23442 = 0;
			F.line = 2016;
			var colontmp__23444 = 0;
			F.line = 4172;
			colontmp__23444 = subInt(l_23430, 1);
			F.line = 2019;
			var res_23447 = 0;
			L2: do {
				F.line = 2020;
					L3: while (true) {
					if (!(res_23447 <= colontmp__23444)) break L3;
						F.line = 2021;
						i_23442 = res_23447;
						F.line = 4173;
						result_23427[chckIndx(i_23442, 0, result_23427.length+0-1)-0] = s_23424[chckIndx(addInt(i_23442, first_23428), 0, s_23424.length+0-1)-0];
						F.line = 2022;
						res_23447 = addInt(res_23447, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_23427;

}

function nsuSplitCharSet(s_110694, seps_110696, maxsplit_110698) {
	var result_110700 = null;

		result_110700 = nimCopy(null, [], NTI110717);
		L1: do {
			var x_110719 = null;
			var last_110734 = 0;
			var splits_110736 = maxsplit_110698;
			L2: do {
					L3: while (true) {
					if (!(last_110734 <= (s_110694 != null ? s_110694.length : 0))) break L3;
						var first_110738 = last_110734;
						L4: do {
								L5: while (true) {
								if (!((last_110734 < (s_110694 != null ? s_110694.length : 0)) && !((seps_110696[s_110694[last_110734]] != undefined)))) break L5;
									last_110734 += 1;
								}
						} while(false);
						if ((splits_110736 == 0)) {
						last_110734 = (s_110694 != null ? s_110694.length : 0);
						}
						
						x_110719 = substr_23422(s_110694, first_110738, (last_110734 - 1));
						var Tmp6 = nimCopy(null, x_110719, NTI138);
						if (result_110700 != null) { result_110700.push(Tmp6); } else { result_110700 = [Tmp6]; };
						if ((splits_110736 == 0)) {
						break L2;
						}
						
						splits_110736 -= 1;
						last_110734 += 1;
					}
			} while(false);
		} while(false);

	return result_110700;

}

function seq_to_ptr_143609(x_143614) {
		return x_143614

	
}

function HEX3DHEX3D_143183(x_143188, y_143191) {
	var result_143192 = false;

	var F={procname:"==.==",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((seq_to_ptr_143609(x_143188) == seq_to_ptr_143609(y_143191))) {
		F.line = 2405;
		result_143192 = true;
		break BeforeRet;
		}
		
		if (!(((x_143188 != null ? x_143188.length : 0) == (y_143191 != null ? y_143191.length : 0)))) {
		F.line = 2412;
		result_143192 = false;
		break BeforeRet;
		}
		
		L1: do {
			F.line = 2414;
			var i_144033 = 0;
			F.line = 2016;
			var colontmp__144037 = 0;
			F.line = 2414;
			colontmp__144037 = subInt((x_143188 != null ? x_143188.length : 0), 1);
			F.line = 2019;
			var res_144040 = 0;
			L2: do {
				F.line = 2020;
					L3: while (true) {
					if (!(res_144040 <= colontmp__144037)) break L3;
						F.line = 2021;
						i_144033 = res_144040;
						if (!(eqStrings(x_143188[chckIndx(i_144033, 0, x_143188.length+0-1)-0], y_143191[chckIndx(i_144033, 0, y_143191.length+0-1)-0]))) {
						F.line = 2416;
						result_143192 = false;
						break BeforeRet;
						}
						
						F.line = 2022;
						res_144040 = addInt(res_144040, 1);
					}
			} while(false);
		} while(false);
		F.line = 2418;
		result_143192 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_143192;

}

function check_eplet_header_143162(fields_143165) {
	var result_143166 = false;

	var F={procname:"eplets.checkEpletHeader",prev:framePtr,filename:"eplets.nim",line:0};
	framePtr = F;
		F.line = 45;
		result_143166 = HEX3DHEX3D_143183(fields_143165, expected_header_143167);
	framePtr = F.prev;

	return result_143166;

}

function parse_evidence_143031(evidence_143033) {
	var result_143034 = 0;

	var F={procname:"eplets.parseEvidence",prev:framePtr,filename:"eplets.nim",line:0};
	framePtr = F;
		F.line = 17;
		switch (toJSStr(evidence_143033)) {
		case "verified_eplet":
			F.line = 19;
			result_143034 = 0;
			break;
		case "verified_pair":
			F.line = 21;
			result_143034 = 1;
			break;
		case "other_eplet":
			F.line = 23;
			result_143034 = 2;
			break;
		default: 
			F.line = 2807;
			var e_143041 = null;
			F.line = 2808;
			e_143041 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 25;
			e_143041.message = nimCopy(null, (makeNimstrLit("unknown eplet evidence: ")).concat(evidence_143033), NTI138);
			F.line = 2803;
			e_143041.parent = null;
			F.line = 25;
			raiseException(e_143041, "ValueError");
			break;
		}
	framePtr = F.prev;

	return result_143034;

}

function nsuToLowerAsciiChar(c_109213) {
	var result_109214 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet4[c_109213] != undefined)) {
		F.line = 212;
		result_109214 = chckRange(addInt(c_109213, 32), 0, 255);
		}
		else {
			F.line = 214;
			result_109214 = c_109213;
		}
		
	framePtr = F.prev;

	return result_109214;

}

function nsuCmpIgnoreStyle(a_109561, b_109562) {
					var Tmp7;
					var Tmp8;

	var result_109563 = 0;

	BeforeRet: do {
		var i_109565 = 0;
		var j_109567 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!((i_109565 < (a_109561 != null ? a_109561.length : 0)) && (a_109561[i_109565] == 95))) break L4;
								i_109565 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!((j_109567 < (b_109562 != null ? b_109562.length : 0)) && (b_109562[j_109567] == 95))) break L6;
								j_109567 += 1;
							}
					} while(false);
					if ((i_109565 < (a_109561 != null ? a_109561.length : 0))) {
					Tmp7 = nsuToLowerAsciiChar(a_109561[i_109565]);
					}
					else {
					Tmp7 = 0;
					}
					
					var aa_109586 = Tmp7;
					if ((j_109567 < (b_109562 != null ? b_109562.length : 0))) {
					Tmp8 = nsuToLowerAsciiChar(b_109562[j_109567]);
					}
					else {
					Tmp8 = 0;
					}
					
					var bb_109587 = Tmp8;
					result_109563 = (aa_109586 - bb_109587);
					if (!((result_109563 == 0))) {
					break BeforeRet;
					}
					
					if (((a_109561 != null ? a_109561.length : 0) <= i_109565)) {
					if (((b_109562 != null ? b_109562.length : 0) <= j_109567)) {
					result_109563 = 0;
					break BeforeRet;
					}
					
					result_109563 = -1;
					break BeforeRet;
					}
					else {
					if (((b_109562 != null ? b_109562.length : 0) <= j_109567)) {
					result_109563 = 1;
					break BeforeRet;
					}
					}
					i_109565 += 1;
					j_109567 += 1;
				}
		} while(false);
	} while (false);

	return result_109563;

}

function parse_enum_142059(s_142063) {
	var result_142064 = 0;

	BeforeRet: do {
		L1: do {
			var e_142227 = 0;
			var res_142253 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_142253 <= 5)) break L3;
						e_142227 = res_142253;
						if ((nsuCmpIgnoreStyle(s_142063, reprEnum(e_142227, NTI142044)) == 0)) {
						result_142064 = e_142227;
						break BeforeRet;
						}
						
						res_142253 += 1;
					}
			} while(false);
		} while(false);
		var e_142239 = null;
		e_142239 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_142239.message = nimCopy(null, (makeNimstrLit("invalid enum value: ")).concat(s_142063), NTI138);
		e_142239.parent = null;
		raiseException(e_142239, "ValueError");
	} while (false);

	return result_142064;

}

function parse_locus_142051(locusstr_142053) {
	var result_142054 = 0;

	var F={procname:"locus.parseLocus",prev:framePtr,filename:"locus.nim",line:0};
	framePtr = F;
		F.line = 14;
		result_142054 = parse_enum_142059(locusstr_142053);
	framePtr = F.prev;

	return result_142054;

}

function new_eplet_143063(name_143065, evidence_143066, locus_143067) {
	var result_143068 = null;

	var F={procname:"eplets.newEplet",prev:framePtr,filename:"eplets.nim",line:0};
	framePtr = F;
		F.line = 29;
		result_143068 = {name: null, evidence: 0, locus: 0};
		F.line = 30;
		result_143068.name = nimCopy(null, name_143065, NTI138);
		F.line = 31;
		result_143068.evidence = parse_evidence_143031(evidence_143066);
		F.line = 32;
		result_143068.locus = parse_locus_142051(locus_143067);
	framePtr = F.prev;

	return result_143068;

}

function raw_get_144425(t_144430, key_144432, hc_144434, hc_144434_Idx) {
						var Tmp3;

	var result_144435 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_144434[hc_144434_Idx] = hash_118900(key_144432);
		if ((hc_144434[hc_144434_Idx] == 0)) {
		F.line = 45;
		hc_144434[hc_144434_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_144447 = (hc_144434[hc_144434_Idx] & (t_144430.data != null ? (t_144430.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_121491(t_144430.data[chckIndx(h_144447, 0, t_144430.data.length+0-1)-0].Field0)) break L2;
						if (!(t_144430.data[chckIndx(h_144447, 0, t_144430.data.length+0-1)-0].Field0 == hc_144434[hc_144434_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_144430.data[chckIndx(h_144447, 0, t_144430.data.length+0-1)-0].Field1, key_144432);						}					if (Tmp3) {
					F.line = 38;
					result_144435 = h_144447;
					break BeforeRet;
					}
					
					F.line = 39;
					h_144447 = next_try_121614(h_144447, (t_144430.data != null ? (t_144430.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_144435 = subInt(-1, h_144447);
	} while (false);
	framePtr = F.prev;

	return result_144435;

}

function must_rehash_121509(length_121511, counter_121512) {
	var result_121513 = false;

	var F={procname:"tables.mustRehash",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tableimpl.nim",line:0};
	framePtr = F;
		if (!((counter_121512 < length_121511))) {
		F.line = 24;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tableimpl.nim(24, 9) `\x0Acounter < length` "));
		}
		
		F.line = 25;
		result_121513 = ((mulInt(length_121511, 2) < mulInt(counter_121512, 3)) || (subInt(length_121511, counter_121512) < 4));
	framePtr = F.prev;

	return result_121513;

}

function raw_insert_146669(t_146676, data_146680, data_146680_Idx, key_146682, val_146684, hc_146686, h_146688) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_146680[data_146680_Idx][chckIndx(h_146688, 0, data_146680[data_146680_Idx].length+0-1)-0].Field1 = nimCopy(null, key_146682, NTI138);
		F.line = 65;
		data_146680[data_146680_Idx][chckIndx(h_146688, 0, data_146680[data_146680_Idx].length+0-1)-0].Field2 = val_146684;
		F.line = 66;
		data_146680[data_146680_Idx][chckIndx(h_146688, 0, data_146680[data_146680_Idx].length+0-1)-0].Field0 = hc_146686;
	framePtr = F.prev;

	
}

function enlarge_145539(t_145546) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
		F.line = 299;
		var n_145554 = null;
		F.line = 300;
		n_145554 = new Array(chckRange(mulInt((t_145546.data != null ? t_145546.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_145546.data != null ? t_145546.data.length : 0), 2), 0, 2147483647);++i) {n_145554[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 301;
		var Tmp1 = t_145546.data; t_145546.data = n_145554; n_145554 = Tmp1;		L2: do {
			F.line = 302;
			var i_145767 = 0;
			F.line = 2000;
			var colontmp__147356 = 0;
			F.line = 302;
			colontmp__147356 = (n_145554 != null ? (n_145554.length-1) : -1);
			F.line = 2006;
			var res_147359 = 0;
			L3: do {
				F.line = 2007;
					L4: while (true) {
					if (!(res_147359 <= colontmp__147356)) break L4;
						F.line = 2008;
						i_145767 = res_147359;
						F.line = 303;
						var eh_145985 = n_145554[chckIndx(i_145767, 0, n_145554.length+0-1)-0].Field0;
						if (is_filled_121491(eh_145985)) {
						F.line = 305;
						var j_145994 = (eh_145985 & (t_145546.data != null ? (t_145546.data.length-1) : -1));
						L5: do {
							F.line = 306;
								L6: while (true) {
								if (!is_filled_121491(t_145546.data[chckIndx(j_145994, 0, t_145546.data.length+0-1)-0].Field0)) break L6;
									F.line = 307;
									j_145994 = next_try_121614(j_145994, (t_145546.data != null ? (t_145546.data.length-1) : -1));
								}
						} while(false);
						F.line = 308;
						raw_insert_146669(t_145546, t_145546, "data", n_145554[chckIndx(i_145767, 0, n_145554.length+0-1)-0].Field1, n_145554[chckIndx(i_145767, 0, n_145554.length+0-1)-0].Field2, eh_145985, j_145994);
						}
						
						F.line = 2009;
						res_147359 = addInt(res_147359, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_147377(t_147382, key_147384, hc_147386) {
	var result_147387 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_147396 = (hc_147386 & (t_147382.data != null ? (t_147382.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_121491(t_147382.data[chckIndx(h_147396, 0, t_147382.data.length+0-1)-0].Field0)) break L2;
					if (((t_147382.data[chckIndx(h_147396, 0, t_147382.data.length+0-1)-0].Field0 == hc_147386) && eqStrings(t_147382.data[chckIndx(h_147396, 0, t_147382.data.length+0-1)-0].Field1, key_147384))) {
					F.line = 38;
					result_147387 = h_147396;
					break BeforeRet;
					}
					
					F.line = 39;
					h_147396 = next_try_121614(h_147396, (t_147382.data != null ? (t_147382.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_147387 = subInt(-1, h_147396);
	} while (false);
	framePtr = F.prev;

	return result_147387;

}

function HEX5BHEX5DHEX3D_144411(t_144418, key_144420, val_144422) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_144423 = [0];
		F.line = 98;
		var index_145125 = raw_get_144425(t_144418, key_144420, hc_144423, 0);
		if ((0 <= index_145125)) {
		F.line = 99;
		t_144418.data[chckIndx(index_145125, 0, t_144418.data.length+0-1)-0].Field2 = val_144422;
		}
		else {
			if (must_rehash_121509((t_144418.data != null ? t_144418.data.length : 0), t_144418.counter)) {
			F.line = 90;
			enlarge_145539(t_144418);
			F.line = 91;
			index_145125 = raw_get_known_hc_147377(t_144418, key_144420, hc_144423[0]);
			}
			
			F.line = 92;
			index_145125 = subInt(-1, index_145125);
			F.line = 93;
			raw_insert_146669(t_144418, t_144418, "data", key_144420, val_144422, hc_144423[0], index_145125);
			F.line = 100;
			t_144418.counter = addInt(t_144418.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function read_eplets_144070(data_144072) {
						var Tmp6;

	var result_144100 = [{data: null, counter: 0}];

	var F={procname:"eplets.readEplets",prev:framePtr,filename:"eplets.nim",line:0};
	framePtr = F;
		F.line = 50;
		nimCopy(result_144100[0], init_table_144104(64), NTI144082);
		F.line = 51;
		var first_row_144224 = true;
		L1: do {
			F.line = 52;
			var line_144225 = null;
			F.line = 648;
			var first_148138 = 0;
			F.line = 649;
			var last_148140 = 0;
			F.line = 650;
			var eolpos_148142 = 0;
			L2: do {
				F.line = 651;
					L3: while (true) {
					if (!true) break L3;
						L4: do {
							F.line = 652;
								L5: while (true) {
								if (!((last_148140 < (data_144072 != null ? data_144072.length : 0)) && !((ConstSet2[data_144072[chckIndx(last_148140, 0, data_144072.length+0-1)-0]] != undefined)))) break L5;
									F.line = 652;
									last_148140 = addInt(last_148140, 1);
								}
						} while(false);
						F.line = 654;
						eolpos_148142 = last_148140;
						if ((last_148140 < (data_144072 != null ? data_144072.length : 0))) {
						if ((data_144072[chckIndx(last_148140, 0, data_144072.length+0-1)-0] == 10)) {
						F.line = 656;
						last_148140 = addInt(last_148140, 1);
						}
						else {
						if ((data_144072[chckIndx(last_148140, 0, data_144072.length+0-1)-0] == 13)) {
						F.line = 658;
						last_148140 = addInt(last_148140, 1);
						if (((last_148140 < (data_144072 != null ? data_144072.length : 0)) && (data_144072[chckIndx(last_148140, 0, data_144072.length+0-1)-0] == 10))) {
						F.line = 659;
						last_148140 = addInt(last_148140, 1);
						}
						
						}
						}
						}
						
						F.line = 661;
						if (false) {
						Tmp6 = subInt(last_148140, 1);
						}
						else {
						Tmp6 = subInt(eolpos_148142, 1);
						}
						
						line_144225 = substr_23422(data_144072, first_148138, Tmp6);
						L7: do {
							F.line = 53;
							var fields_144226 = nsuSplitCharSet(line_144225, ConstSet3, -1);
							if (first_row_144224) {
							if (!(check_eplet_header_143162(fields_144226))) {
							F.line = 2807;
							var e_144233 = null;
							F.line = 2808;
							e_144233 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 56;
							e_144233.message = nimCopy(null, makeNimstrLit("unknown file format for eplet data"), NTI138);
							F.line = 2803;
							e_144233.parent = null;
							F.line = 56;
							raiseException(e_144233, "ValueError");
							}
							else {
								F.line = 58;
								first_row_144224 = false;
								F.line = 59;
								break L7;
							}
							
							}
							else {
							if (((line_144225 != null ? line_144225.length : 0) == 0)) {
							F.line = 61;
							break L7;
							}
							else {
							if (!(((fields_144226 != null ? fields_144226.length : 0) == 3))) {
							F.line = 2807;
							var e_144255 = null;
							F.line = 2808;
							e_144255 = {m_type: NTI3852, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 63;
							e_144255.message = nimCopy(null, (makeNimstrLit("unknown format of line: \'")).concat(line_144225,makeNimstrLit("\'")), NTI138);
							F.line = 2803;
							e_144255.parent = null;
							F.line = 63;
							raiseException(e_144255, "ValueError");
							}
							}}
							F.line = 64;
							var ep_144264 = new_eplet_143063(fields_144226[chckIndx(0, 0, fields_144226.length+0-1)-0], fields_144226[chckIndx(1, 0, fields_144226.length+0-1)-0], fields_144226[chckIndx(2, 0, fields_144226.length+0-1)-0]);
							F.line = 65;
							HEX5BHEX5DHEX3D_144411(result_144100[0], ep_144264.name, ep_144264);
						} while(false);
						if ((eolpos_148142 == last_148140)) {
						F.line = 665;
						break L2;
						}
						
						F.line = 667;
						first_148138 = last_148140;
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_144100[0];

}

function init_table_149323(initial_size_149328) {
	var result_149330 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
		if (!(is_power_of_two_35051(initial_size_149328))) {
		F.line = 338;
		failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim(338, 10) `isPowerOfTwo(initialSize)` "));
		}
		
		F.line = 339;
		result_149330.counter = 0;
		F.line = 340;
		result_149330.data = new Array(chckRange(initial_size_149328, 0, 2147483647)); for (var i=0;i<chckRange(initial_size_149328, 0, 2147483647);++i) {result_149330.data[i]={Field0: 0, Field1: null, Field2: null};}	framePtr = F.prev;

	return result_149330;

}

function check_allele_header_149238(fields_149241) {
	var result_149242 = false;

	var F={procname:"alleles.checkAlleleHeader",prev:framePtr,filename:"alleles.nim",line:0};
	framePtr = F;
		F.line = 20;
		result_149242 = HEX3DHEX3D_143183(fields_149241, expected_header_149243);
	framePtr = F.prev;

	return result_149242;

}

function has_key_149677(t_149683, key_149685) {
	var result_149686 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
		F.line = 249;
		var hc_149687 = [0];
		F.line = 250;
		result_149686 = (0 <= raw_get_149689(t_149683, key_149685, hc_149687, 0));
	framePtr = F.prev;

	return result_149686;

}

function contains_149664(t_149670, key_149672) {
	var result_149673 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 254;
		result_149673 = has_key_149677(t_149670, key_149672);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_149673;

}

function raw_insert_152359(t_152366, data_152370, data_152370_Idx, key_152372, val_152374, hc_152376, h_152378) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_152370[data_152370_Idx][chckIndx(h_152378, 0, data_152370[data_152370_Idx].length+0-1)-0].Field1 = nimCopy(null, key_152372, NTI138);
		F.line = 65;
		data_152370[data_152370_Idx][chckIndx(h_152378, 0, data_152370[data_152370_Idx].length+0-1)-0].Field2 = val_152374;
		F.line = 66;
		data_152370[data_152370_Idx][chckIndx(h_152378, 0, data_152370[data_152370_Idx].length+0-1)-0].Field0 = hc_152376;
	framePtr = F.prev;

	
}

function enlarge_151115(t_151122) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
		F.line = 299;
		var n_151130 = null;
		F.line = 300;
		n_151130 = new Array(chckRange(mulInt((t_151122.data != null ? t_151122.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_151122.data != null ? t_151122.data.length : 0), 2), 0, 2147483647);++i) {n_151130[i]={Field0: 0, Field1: null, Field2: null};}		F.line = 301;
		var Tmp1 = t_151122.data; t_151122.data = n_151130; n_151130 = Tmp1;		L2: do {
			F.line = 302;
			var i_151385 = 0;
			F.line = 2000;
			var colontmp__153100 = 0;
			F.line = 302;
			colontmp__153100 = (n_151130 != null ? (n_151130.length-1) : -1);
			F.line = 2006;
			var res_153103 = 0;
			L3: do {
				F.line = 2007;
					L4: while (true) {
					if (!(res_153103 <= colontmp__153100)) break L4;
						F.line = 2008;
						i_151385 = res_153103;
						F.line = 303;
						var eh_151621 = n_151130[chckIndx(i_151385, 0, n_151130.length+0-1)-0].Field0;
						if (is_filled_121491(eh_151621)) {
						F.line = 305;
						var j_151630 = (eh_151621 & (t_151122.data != null ? (t_151122.data.length-1) : -1));
						L5: do {
							F.line = 306;
								L6: while (true) {
								if (!is_filled_121491(t_151122.data[chckIndx(j_151630, 0, t_151122.data.length+0-1)-0].Field0)) break L6;
									F.line = 307;
									j_151630 = next_try_121614(j_151630, (t_151122.data != null ? (t_151122.data.length-1) : -1));
								}
						} while(false);
						F.line = 308;
						raw_insert_152359(t_151122, t_151122, "data", n_151130[chckIndx(i_151385, 0, n_151130.length+0-1)-0].Field1, n_151130[chckIndx(i_151385, 0, n_151130.length+0-1)-0].Field2, eh_151621, j_151630);
						}
						
						F.line = 2009;
						res_153103 = addInt(res_153103, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function raw_get_known_hc_153121(t_153126, key_153128, hc_153130) {
	var result_153131 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_153140 = (hc_153130 & (t_153126.data != null ? (t_153126.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!is_filled_121491(t_153126.data[chckIndx(h_153140, 0, t_153126.data.length+0-1)-0].Field0)) break L2;
					if (((t_153126.data[chckIndx(h_153140, 0, t_153126.data.length+0-1)-0].Field0 == hc_153130) && eqStrings(t_153126.data[chckIndx(h_153140, 0, t_153126.data.length+0-1)-0].Field1, key_153128))) {
					F.line = 38;
					result_153131 = h_153140;
					break BeforeRet;
					}
					
					F.line = 39;
					h_153140 = next_try_121614(h_153140, (t_153126.data != null ? (t_153126.data.length-1) : -1));
				}
		} while(false);
		F.line = 40;
		result_153131 = subInt(-1, h_153140);
	} while (false);
	framePtr = F.prev;

	return result_153131;

}

function HEX5BHEX5DHEX3D_150616(t_150623, key_150625, val_150627) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_150628 = [0];
		F.line = 98;
		var index_150641 = raw_get_149689(t_150623, key_150625, hc_150628, 0);
		if ((0 <= index_150641)) {
		F.line = 99;
		t_150623.data[chckIndx(index_150641, 0, t_150623.data.length+0-1)-0].Field2 = val_150627;
		}
		else {
			if (must_rehash_121509((t_150623.data != null ? t_150623.data.length : 0), t_150623.counter)) {
			F.line = 90;
			enlarge_151115(t_150623);
			F.line = 91;
			index_150641 = raw_get_known_hc_153121(t_150623, key_150625, hc_150628[0]);
			}
			
			F.line = 92;
			index_150641 = subInt(-1, index_150641);
			F.line = 93;
			raw_insert_152359(t_150623, t_150623, "data", key_150625, val_150627, hc_150628[0], index_150641);
			F.line = 100;
			t_150623.counter = addInt(t_150623.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function new_allele_149051(name_149053, locus_149054) {
	var result_149055 = null;

	var F={procname:"alleles.newAllele",prev:framePtr,filename:"alleles.nim",line:0};
	framePtr = F;
		F.line = 12;
		result_149055 = {name: null, eplets: {data: null, counter: 0}, locus: 0};
		F.line = 13;
		result_149055.name = nimCopy(null, name_149053, NTI138);
		F.line = 14;
		init_149107(result_149055.eplets, 64);
		F.line = 15;
		result_149055.locus = parse_locus_142051(locus_149054);
	framePtr = F.prev;

	return result_149055;

}

function has_key_154141(t_154147, key_154149) {
	var result_154150 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
		F.line = 249;
		var hc_154151 = [0];
		F.line = 250;
		result_154150 = (0 <= raw_get_144425(t_154147, key_154149, hc_154151, 0));
	framePtr = F.prev;

	return result_154150;

}

function contains_154128(t_154134, key_154136) {
	var result_154137 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 254;
		result_154137 = has_key_154141(t_154134, key_154136);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_154137;

}

function HEX5BHEX5D_155080(t_155086, key_155088) {
	var result_155089 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\pure\\collections\\tables.nim",line:0};
	framePtr = F;
		F.line = 146;
		var hc_155091 = [0];
		F.line = 147;
		var index_155105 = raw_get_144425(t_155086, key_155088, hc_155091, 0);
		if ((0 <= index_155105)) {
		F.line = 148;
		result_155089 = t_155086.data[chckIndx(index_155105, 0, t_155086.data.length+0-1)-0].Field2;
		}
		else {
			F.line = 2807;
			var e_155407 = null;
			F.line = 2808;
			e_155407 = {m_type: NTI3854, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
			F.line = 151;
			e_155407.message = nimCopy(null, (makeNimstrLit("key not found: ")).concat(key_155088), NTI138);
			F.line = 2803;
			e_155407.parent = null;
			F.line = 151;
			raiseException(e_155407, "KeyError");
		}
		
	framePtr = F.prev;

	return result_155089;

}

function read_alleles_149281(data_149283, eplets_149291) {
						var Tmp6;
							var Tmp8;

	var result_149319 = [{data: null, counter: 0}];

	var F={procname:"alleles.readAlleles",prev:framePtr,filename:"alleles.nim",line:0};
	framePtr = F;
		F.line = 24;
		nimCopy(result_149319[0], init_table_149323(64), NTI149301);
		F.line = 25;
		var first_row_149424 = true;
		L1: do {
			F.line = 26;
			var line_149425 = null;
			F.line = 648;
			var first_159675 = 0;
			F.line = 649;
			var last_159677 = 0;
			F.line = 650;
			var eolpos_159679 = 0;
			L2: do {
				F.line = 651;
					L3: while (true) {
					if (!true) break L3;
						L4: do {
							F.line = 652;
								L5: while (true) {
								if (!((last_159677 < (data_149283 != null ? data_149283.length : 0)) && !((ConstSet5[data_149283[chckIndx(last_159677, 0, data_149283.length+0-1)-0]] != undefined)))) break L5;
									F.line = 652;
									last_159677 = addInt(last_159677, 1);
								}
						} while(false);
						F.line = 654;
						eolpos_159679 = last_159677;
						if ((last_159677 < (data_149283 != null ? data_149283.length : 0))) {
						if ((data_149283[chckIndx(last_159677, 0, data_149283.length+0-1)-0] == 10)) {
						F.line = 656;
						last_159677 = addInt(last_159677, 1);
						}
						else {
						if ((data_149283[chckIndx(last_159677, 0, data_149283.length+0-1)-0] == 13)) {
						F.line = 658;
						last_159677 = addInt(last_159677, 1);
						if (((last_159677 < (data_149283 != null ? data_149283.length : 0)) && (data_149283[chckIndx(last_159677, 0, data_149283.length+0-1)-0] == 10))) {
						F.line = 659;
						last_159677 = addInt(last_159677, 1);
						}
						
						}
						}
						}
						
						F.line = 661;
						if (false) {
						Tmp6 = subInt(last_159677, 1);
						}
						else {
						Tmp6 = subInt(eolpos_159679, 1);
						}
						
						line_149425 = substr_23422(data_149283, first_159675, Tmp6);
						L7: do {
							F.line = 27;
							var fields_149426 = nsuSplitCharSet(line_149425, ConstSet6, -1);
							if (first_row_149424) {
							if (!(check_allele_header_149238(fields_149426))) {
							F.line = 2807;
							var e_149433 = null;
							F.line = 2808;
							e_149433 = {m_type: NTI3826, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 30;
							e_149433.message = nimCopy(null, makeNimstrLit("unknown file format for allele data"), NTI138);
							F.line = 2803;
							e_149433.parent = null;
							F.line = 30;
							raiseException(e_149433, "Exception");
							}
							else {
								F.line = 32;
								first_row_149424 = false;
								F.line = 33;
								break L7;
							}
							
							}
							else {
							if (((line_149425 != null ? line_149425.length : 0) == 0)) {
							F.line = 35;
							break L7;
							}
							else {
							if (!(((fields_149426 != null ? fields_149426.length : 0) == 3))) {
							F.line = 2807;
							var e_149455 = null;
							F.line = 2808;
							e_149455 = {m_type: NTI3826, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
							F.line = 37;
							e_149455.message = nimCopy(null, (makeNimstrLit("unknown format of line: \'")).concat(line_149425,makeNimstrLit("\'")), NTI138);
							F.line = 2803;
							e_149455.parent = null;
							F.line = 37;
							raiseException(e_149455, "Exception");
							}
							}}
							F.line = 39;
							var allelename_149464 = nimCopy(null, fields_149426[chckIndx(0, 0, fields_149426.length+0-1)-0], NTI138);
							F.line = 40;
							var epletname_149465 = nimCopy(null, fields_149426[chckIndx(1, 0, fields_149426.length+0-1)-0], NTI138);
							F.line = 41;
							var locus_149466 = nimCopy(null, fields_149426[chckIndx(2, 0, fields_149426.length+0-1)-0], NTI138);
							if (!(contains_149664(result_149319[0], allelename_149464))) {
							F.line = 43;
							HEX5BHEX5DHEX3D_150616(result_149319[0], allelename_149464, new_allele_149051(allelename_149464, locus_149466));
							}
							
							if (contains_154128(eplets_149291, epletname_149465)) {
							F.line = 45;
							incl_155490((Tmp8 = HEX5BHEX5D_154423(result_149319[0], allelename_149464), Tmp8[0])[Tmp8[1]].eplets, HEX5BHEX5D_155080(eplets_149291, epletname_149465));
							}
							
						} while(false);
						if ((eolpos_159679 == last_159677)) {
						F.line = 665;
						break L2;
						}
						
						F.line = 667;
						first_159675 = last_159677;
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_149319[0];

}

function merge_table_164414(t1_164421, t2_164424) {
	var F={procname:"mergeTable.mergeTable",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 208;
			var key_165181 = null;
			F.line = 208;
			var value_165182 = null;
			L2: do {
				F.line = 258;
				var h_165345 = 0;
				F.line = 2016;
				var colontmp__165347 = 0;
				F.line = 258;
				colontmp__165347 = (t2_164424.data != null ? (t2_164424.data.length-1) : -1);
				F.line = 2019;
				var res_165349 = 0;
				L3: do {
					F.line = 2020;
						L4: while (true) {
						if (!(res_165349 <= colontmp__165347)) break L4;
							F.line = 2021;
							h_165345 = res_165349;
							if (is_filled_121491(t2_164424.data[chckIndx(h_165345, 0, t2_164424.data.length+0-1)-0].Field0)) {
							F.line = 259;
							key_165181 = t2_164424.data[chckIndx(h_165345, 0, t2_164424.data.length+0-1)-0].Field1;
							F.line = 259;
							value_165182 = t2_164424.data[chckIndx(h_165345, 0, t2_164424.data.length+0-1)-0].Field2;
							F.line = 209;
							HEX5BHEX5DHEX3D_144411(t1_164421, key_165181, value_165182);
							}
							
							F.line = 2022;
							res_165349 = addInt(res_165349, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function merge_table_163418(t1_163425, t2_163428) {
	var F={procname:"mergeTable.mergeTable",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 208;
			var key_164185 = null;
			F.line = 208;
			var value_164186 = null;
			L2: do {
				F.line = 258;
				var h_164349 = 0;
				F.line = 2016;
				var colontmp__164351 = 0;
				F.line = 258;
				colontmp__164351 = (t2_163428.data != null ? (t2_163428.data.length-1) : -1);
				F.line = 2019;
				var res_164353 = 0;
				L3: do {
					F.line = 2020;
						L4: while (true) {
						if (!(res_164353 <= colontmp__164351)) break L4;
							F.line = 2021;
							h_164349 = res_164353;
							if (is_filled_121491(t2_163428.data[chckIndx(h_164349, 0, t2_163428.data.length+0-1)-0].Field0)) {
							F.line = 259;
							key_164185 = t2_163428.data[chckIndx(h_164349, 0, t2_163428.data.length+0-1)-0].Field1;
							F.line = 259;
							value_164186 = t2_163428.data[chckIndx(h_164349, 0, t2_163428.data.length+0-1)-0].Field2;
							F.line = 209;
							HEX5BHEX5DHEX3D_150616(t1_163425, key_164185, value_164186);
							}
							
							F.line = 2022;
							res_164353 = addInt(res_164353, 1);
						}
				} while(false);
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function HEX5BHEX5D_47874(s_47879, x_47882) {
	var result_47883 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3568;
		var a_48001 = x_47882.a;
		F.line = 3569;
		var l_48201 = addInt(subInt(x_47882.b, a_48001), 1);
		F.line = 3570;
		result_47883 = nimCopy(null, mnewString(chckRange(l_48201, 0, 2147483647)), NTI138);
		L1: do {
			F.line = 3571;
			var i_48211 = 0;
			F.line = 3528;
			var i_48223 = 0;
			L2: do {
				F.line = 3529;
					L3: while (true) {
					if (!(i_48223 < l_48201)) break L3;
						F.line = 3530;
						i_48211 = i_48223;
						F.line = 3571;
						result_47883[chckIndx(i_48211, 0, result_47883.length+0-1)-0] = s_47879[chckIndx(addInt(i_48211, a_48001), 0, s_47879.length+0-1)-0];
						F.line = 3531;
						i_48223 = addInt(i_48223, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_47883;

}

function HEX2EHEX2E_47828(a_47833, b_47835) {
	var result_47837 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"..\\..\\..\\..\\..\\..\\..\\..\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 341;
		result_47837.a = a_47833;
		F.line = 342;
		result_47837.b = b_47835;
	framePtr = F.prev;

	return result_47837;

}

function fill_select_160112() {
	var F={procname:"epitopes.fillSelect",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		F.line = 73;
		var allele_a_160166 = new_seq_160128(0);
		F.line = 74;
		var allele_b_160195 = new_seq_160128(0);
		F.line = 75;
		var allele_c_160224 = new_seq_160128(0);
		F.line = 76;
		var allele_drb1_160253 = new_seq_160128(0);
		F.line = 77;
		var allele_drb345_160282 = new_seq_160128(0);
		F.line = 78;
		var allele_dqa1_160311 = new_seq_160128(0);
		F.line = 79;
		var allele_dqb1_160340 = new_seq_160128(0);
		F.line = 80;
		var allele_dpa1_160369 = new_seq_160128(0);
		F.line = 81;
		var allele_dpb1_160398 = new_seq_160128(0);
		L1: do {
			F.line = 83;
			var allele_160918 = null;
			L2: do {
				F.line = 274;
				var h_163230 = 0;
				F.line = 2016;
				var colontmp__163232 = 0;
				F.line = 274;
				colontmp__163232 = (alleles_table_160029[0].data != null ? (alleles_table_160029[0].data.length-1) : -1);
				F.line = 2019;
				var res_163234 = 0;
				L3: do {
					F.line = 2020;
						L4: while (true) {
						if (!(res_163234 <= colontmp__163232)) break L4;
							F.line = 2021;
							h_163230 = res_163234;
							if (is_filled_121491(alleles_table_160029[0].data[chckIndx(h_163230, 0, alleles_table_160029[0].data.length+0-1)-0].Field0)) {
							F.line = 275;
							allele_160918 = alleles_table_160029[0].data[chckIndx(h_163230, 0, alleles_table_160029[0].data.length+0-1)-0].Field2;
							F.line = 84;
							switch (allele_160918.locus) {
							case 0:
								F.line = 86;
								switch (allele_160918.name[chckIndx(0, 0, allele_160918.name.length+0-1)-0]) {
								case 65:
									F.line = 87;
									var Tmp5 = nimCopy(null, allele_160918.name, NTI138);
									if (allele_a_160166 != null) { allele_a_160166.push(Tmp5); } else { allele_a_160166 = [Tmp5]; };
									break;
								case 66:
									F.line = 88;
									var Tmp6 = nimCopy(null, allele_160918.name, NTI138);
									if (allele_b_160195 != null) { allele_b_160195.push(Tmp6); } else { allele_b_160195 = [Tmp6]; };
									break;
								case 67:
									F.line = 89;
									var Tmp7 = nimCopy(null, allele_160918.name, NTI138);
									if (allele_c_160224 != null) { allele_c_160224.push(Tmp7); } else { allele_c_160224 = [Tmp7]; };
									break;
								default: 
									F.line = 91;
									rawEcho(makeNimstrLit("unknown locus in allele "), allele_160918.name);
									break;
								}
								break;
							case 1:
								F.line = 93;
								switch (toJSStr(HEX5BHEX5D_47874(allele_160918.name, HEX2EHEX2E_47828(0, 3)))) {
								case "DRB1":
									F.line = 94;
									var Tmp8 = nimCopy(null, allele_160918.name, NTI138);
									if (allele_drb1_160253 != null) { allele_drb1_160253.push(Tmp8); } else { allele_drb1_160253 = [Tmp8]; };
									break;
								case "DRB3":
								case "DRB4":
								case "DRB5":
									F.line = 95;
									var Tmp9 = nimCopy(null, allele_160918.name, NTI138);
									if (allele_drb345_160282 != null) { allele_drb345_160282.push(Tmp9); } else { allele_drb345_160282 = [Tmp9]; };
									break;
								default: 
									break;
								}
								break;
							case 2:
								F.line = 97;
								var Tmp10 = nimCopy(null, allele_160918.name, NTI138);
								if (allele_dqa1_160311 != null) { allele_dqa1_160311.push(Tmp10); } else { allele_dqa1_160311 = [Tmp10]; };
								break;
							case 3:
								F.line = 99;
								var Tmp11 = nimCopy(null, allele_160918.name, NTI138);
								if (allele_dqb1_160340 != null) { allele_dqb1_160340.push(Tmp11); } else { allele_dqb1_160340 = [Tmp11]; };
								break;
							case 4:
								F.line = 101;
								var Tmp12 = nimCopy(null, allele_160918.name, NTI138);
								if (allele_dpa1_160369 != null) { allele_dpa1_160369.push(Tmp12); } else { allele_dpa1_160369 = [Tmp12]; };
								break;
							case 5:
								F.line = 103;
								var Tmp13 = nimCopy(null, allele_160918.name, NTI138);
								if (allele_dpb1_160398 != null) { allele_dpb1_160398.push(Tmp13); } else { allele_dpb1_160398 = [Tmp13]; };
								break;
							}
							}
							
							F.line = 2022;
							res_163234 = addInt(res_163234, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 105;
		sort_161122(allele_a_160166, cmp_7058, 1);
		F.line = 106;
		sort_161122(allele_b_160195, cmp_7058, 1);
		F.line = 107;
		sort_161122(allele_c_160224, cmp_7058, 1);
		F.line = 108;
		sort_161122(allele_drb1_160253, cmp_7058, 1);
		F.line = 109;
		sort_161122(allele_drb345_160282, cmp_7058, 1);
		F.line = 110;
		sort_161122(allele_dqa1_160311, cmp_7058, 1);
		F.line = 111;
		sort_161122(allele_dqb1_160340, cmp_7058, 1);
		F.line = 112;
		sort_161122(allele_dpa1_160369, cmp_7058, 1);
		F.line = 113;
		sort_161122(allele_dpb1_160398, cmp_7058, 1);
		F.line = 116;
		var allele_list_162862 = makeNimstrLit("<option value=\"\"></option>");
		L14: do {
			F.line = 118;
			var allele_162871 = null;
			F.line = 3822;
			var i_163240 = 0;
			F.line = 3823;
			var l_163242 = (allele_a_160166 != null ? allele_a_160166.length : 0);
			L15: do {
				F.line = 3824;
					L16: while (true) {
					if (!(i_163240 < l_163242)) break L16;
						F.line = 3825;
						allele_162871 = allele_a_160166[chckIndx(i_163240, 0, allele_a_160166.length+0-1)-0];
						F.line = 119;
						if (allele_list_162862 != null) { allele_list_162862 = (allele_list_162862).concat((makeNimstrLit("<option value=\"")).concat(allele_162871,makeNimstrLit("\">"),allele_162871,makeNimstrLit("</option>\x0A"))); } else { allele_list_162862 = (makeNimstrLit("<option value=\"")).concat(allele_162871,makeNimstrLit("\">"),allele_162871,makeNimstrLit("</option>\x0A")).slice(); };
						F.line = 3826;
						i_163240 = addInt(i_163240, 1);
						if (!(((allele_a_160166 != null ? allele_a_160166.length : 0) == l_163242))) {
						F.line = 3827;
						failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim(3827, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L17: do {
			F.line = 121;
			var element_162935 = null;
			F.line = 2173;
			var i_163246 = 0;
			if ((i_163246 <= 1)) {
			L18: do {
				F.line = 2175;
					L19: while (true) {
					if (!true) break L19;
						F.line = 2176;
						element_162935 = rec_elements_a_160039[chckIndx(i_163246, 0, rec_elements_a_160039.length+0-1)-0];
						F.line = 122;
						document.getElementById(toJSStr(element_162935)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163246)) {
						F.line = 2177;
						break L18;
						}
						
						F.line = 2178;
						i_163246 = addInt(i_163246, 1);
					}
			} while(false);
			}
			
		} while(false);
		L20: do {
			F.line = 123;
			var element_162945 = null;
			F.line = 2173;
			var i_163250 = 0;
			if ((i_163250 <= 1)) {
			L21: do {
				F.line = 2175;
					L22: while (true) {
					if (!true) break L22;
						F.line = 2176;
						element_162945 = don_elements_a_160069[chckIndx(i_163250, 0, don_elements_a_160069.length+0-1)-0];
						F.line = 124;
						document.getElementById(toJSStr(element_162945)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163250)) {
						F.line = 2177;
						break L21;
						}
						
						F.line = 2178;
						i_163250 = addInt(i_163250, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 126;
		allele_list_162862 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L23: do {
			F.line = 128;
			var allele_162957 = null;
			F.line = 3822;
			var i_163254 = 0;
			F.line = 3823;
			var l_163256 = (allele_b_160195 != null ? allele_b_160195.length : 0);
			L24: do {
				F.line = 3824;
					L25: while (true) {
					if (!(i_163254 < l_163256)) break L25;
						F.line = 3825;
						allele_162957 = allele_b_160195[chckIndx(i_163254, 0, allele_b_160195.length+0-1)-0];
						F.line = 129;
						if (allele_list_162862 != null) { allele_list_162862 = (allele_list_162862).concat((makeNimstrLit("<option value=\"")).concat(allele_162957,makeNimstrLit("\">"),allele_162957,makeNimstrLit("</option>\x0A"))); } else { allele_list_162862 = (makeNimstrLit("<option value=\"")).concat(allele_162957,makeNimstrLit("\">"),allele_162957,makeNimstrLit("</option>\x0A")).slice(); };
						F.line = 3826;
						i_163254 = addInt(i_163254, 1);
						if (!(((allele_b_160195 != null ? allele_b_160195.length : 0) == l_163256))) {
						F.line = 3827;
						failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim(3827, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L26: do {
			F.line = 131;
			var element_162970 = null;
			F.line = 2173;
			var i_163260 = 0;
			if ((i_163260 <= 1)) {
			L27: do {
				F.line = 2175;
					L28: while (true) {
					if (!true) break L28;
						F.line = 2176;
						element_162970 = rec_elements_b_160042[chckIndx(i_163260, 0, rec_elements_b_160042.length+0-1)-0];
						F.line = 132;
						document.getElementById(toJSStr(element_162970)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163260)) {
						F.line = 2177;
						break L27;
						}
						
						F.line = 2178;
						i_163260 = addInt(i_163260, 1);
					}
			} while(false);
			}
			
		} while(false);
		L29: do {
			F.line = 133;
			var element_162980 = null;
			F.line = 2173;
			var i_163264 = 0;
			if ((i_163264 <= 1)) {
			L30: do {
				F.line = 2175;
					L31: while (true) {
					if (!true) break L31;
						F.line = 2176;
						element_162980 = don_elements_b_160072[chckIndx(i_163264, 0, don_elements_b_160072.length+0-1)-0];
						F.line = 134;
						document.getElementById(toJSStr(element_162980)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163264)) {
						F.line = 2177;
						break L30;
						}
						
						F.line = 2178;
						i_163264 = addInt(i_163264, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 136;
		allele_list_162862 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L32: do {
			F.line = 138;
			var allele_162992 = null;
			F.line = 3822;
			var i_163268 = 0;
			F.line = 3823;
			var l_163270 = (allele_c_160224 != null ? allele_c_160224.length : 0);
			L33: do {
				F.line = 3824;
					L34: while (true) {
					if (!(i_163268 < l_163270)) break L34;
						F.line = 3825;
						allele_162992 = allele_c_160224[chckIndx(i_163268, 0, allele_c_160224.length+0-1)-0];
						F.line = 139;
						if (allele_list_162862 != null) { allele_list_162862 = (allele_list_162862).concat((makeNimstrLit("<option value=\"")).concat(allele_162992,makeNimstrLit("\">"),allele_162992,makeNimstrLit("</option>\x0A"))); } else { allele_list_162862 = (makeNimstrLit("<option value=\"")).concat(allele_162992,makeNimstrLit("\">"),allele_162992,makeNimstrLit("</option>\x0A")).slice(); };
						F.line = 3826;
						i_163268 = addInt(i_163268, 1);
						if (!(((allele_c_160224 != null ? allele_c_160224.length : 0) == l_163270))) {
						F.line = 3827;
						failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim(3827, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L35: do {
			F.line = 141;
			var element_163005 = null;
			F.line = 2173;
			var i_163274 = 0;
			if ((i_163274 <= 1)) {
			L36: do {
				F.line = 2175;
					L37: while (true) {
					if (!true) break L37;
						F.line = 2176;
						element_163005 = rec_elements_c_160045[chckIndx(i_163274, 0, rec_elements_c_160045.length+0-1)-0];
						F.line = 142;
						document.getElementById(toJSStr(element_163005)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163274)) {
						F.line = 2177;
						break L36;
						}
						
						F.line = 2178;
						i_163274 = addInt(i_163274, 1);
					}
			} while(false);
			}
			
		} while(false);
		L38: do {
			F.line = 143;
			var element_163015 = null;
			F.line = 2173;
			var i_163278 = 0;
			if ((i_163278 <= 1)) {
			L39: do {
				F.line = 2175;
					L40: while (true) {
					if (!true) break L40;
						F.line = 2176;
						element_163015 = don_elements_c_160075[chckIndx(i_163278, 0, don_elements_c_160075.length+0-1)-0];
						F.line = 144;
						document.getElementById(toJSStr(element_163015)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163278)) {
						F.line = 2177;
						break L39;
						}
						
						F.line = 2178;
						i_163278 = addInt(i_163278, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 146;
		allele_list_162862 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L41: do {
			F.line = 148;
			var allele_163027 = null;
			F.line = 3822;
			var i_163282 = 0;
			F.line = 3823;
			var l_163284 = (allele_drb1_160253 != null ? allele_drb1_160253.length : 0);
			L42: do {
				F.line = 3824;
					L43: while (true) {
					if (!(i_163282 < l_163284)) break L43;
						F.line = 3825;
						allele_163027 = allele_drb1_160253[chckIndx(i_163282, 0, allele_drb1_160253.length+0-1)-0];
						F.line = 149;
						if (allele_list_162862 != null) { allele_list_162862 = (allele_list_162862).concat((makeNimstrLit("<option value=\"")).concat(allele_163027,makeNimstrLit("\">"),allele_163027,makeNimstrLit("</option>\x0A"))); } else { allele_list_162862 = (makeNimstrLit("<option value=\"")).concat(allele_163027,makeNimstrLit("\">"),allele_163027,makeNimstrLit("</option>\x0A")).slice(); };
						F.line = 3826;
						i_163282 = addInt(i_163282, 1);
						if (!(((allele_drb1_160253 != null ? allele_drb1_160253.length : 0) == l_163284))) {
						F.line = 3827;
						failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim(3827, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L44: do {
			F.line = 151;
			var element_163040 = null;
			F.line = 2173;
			var i_163288 = 0;
			if ((i_163288 <= 1)) {
			L45: do {
				F.line = 2175;
					L46: while (true) {
					if (!true) break L46;
						F.line = 2176;
						element_163040 = rec_elements_drb1_160048[chckIndx(i_163288, 0, rec_elements_drb1_160048.length+0-1)-0];
						F.line = 152;
						document.getElementById(toJSStr(element_163040)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163288)) {
						F.line = 2177;
						break L45;
						}
						
						F.line = 2178;
						i_163288 = addInt(i_163288, 1);
					}
			} while(false);
			}
			
		} while(false);
		L47: do {
			F.line = 153;
			var element_163050 = null;
			F.line = 2173;
			var i_163292 = 0;
			if ((i_163292 <= 1)) {
			L48: do {
				F.line = 2175;
					L49: while (true) {
					if (!true) break L49;
						F.line = 2176;
						element_163050 = don_elements_drb1_160078[chckIndx(i_163292, 0, don_elements_drb1_160078.length+0-1)-0];
						F.line = 154;
						document.getElementById(toJSStr(element_163050)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163292)) {
						F.line = 2177;
						break L48;
						}
						
						F.line = 2178;
						i_163292 = addInt(i_163292, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 156;
		allele_list_162862 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L50: do {
			F.line = 158;
			var allele_163062 = null;
			F.line = 3822;
			var i_163296 = 0;
			F.line = 3823;
			var l_163298 = (allele_drb345_160282 != null ? allele_drb345_160282.length : 0);
			L51: do {
				F.line = 3824;
					L52: while (true) {
					if (!(i_163296 < l_163298)) break L52;
						F.line = 3825;
						allele_163062 = allele_drb345_160282[chckIndx(i_163296, 0, allele_drb345_160282.length+0-1)-0];
						F.line = 159;
						if (allele_list_162862 != null) { allele_list_162862 = (allele_list_162862).concat((makeNimstrLit("<option value=\"")).concat(allele_163062,makeNimstrLit("\">"),allele_163062,makeNimstrLit("</option>\x0A"))); } else { allele_list_162862 = (makeNimstrLit("<option value=\"")).concat(allele_163062,makeNimstrLit("\">"),allele_163062,makeNimstrLit("</option>\x0A")).slice(); };
						F.line = 3826;
						i_163296 = addInt(i_163296, 1);
						if (!(((allele_drb345_160282 != null ? allele_drb345_160282.length : 0) == l_163298))) {
						F.line = 3827;
						failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim(3827, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L53: do {
			F.line = 161;
			var element_163075 = null;
			F.line = 2173;
			var i_163302 = 0;
			if ((i_163302 <= 1)) {
			L54: do {
				F.line = 2175;
					L55: while (true) {
					if (!true) break L55;
						F.line = 2176;
						element_163075 = rec_elements_drb345_160051[chckIndx(i_163302, 0, rec_elements_drb345_160051.length+0-1)-0];
						F.line = 162;
						document.getElementById(toJSStr(element_163075)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163302)) {
						F.line = 2177;
						break L54;
						}
						
						F.line = 2178;
						i_163302 = addInt(i_163302, 1);
					}
			} while(false);
			}
			
		} while(false);
		L56: do {
			F.line = 163;
			var element_163085 = null;
			F.line = 2173;
			var i_163306 = 0;
			if ((i_163306 <= 1)) {
			L57: do {
				F.line = 2175;
					L58: while (true) {
					if (!true) break L58;
						F.line = 2176;
						element_163085 = don_elements_drb345_160081[chckIndx(i_163306, 0, don_elements_drb345_160081.length+0-1)-0];
						F.line = 164;
						document.getElementById(toJSStr(element_163085)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163306)) {
						F.line = 2177;
						break L57;
						}
						
						F.line = 2178;
						i_163306 = addInt(i_163306, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 166;
		allele_list_162862 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L59: do {
			F.line = 168;
			var allele_163097 = null;
			F.line = 3822;
			var i_163310 = 0;
			F.line = 3823;
			var l_163312 = (allele_dqa1_160311 != null ? allele_dqa1_160311.length : 0);
			L60: do {
				F.line = 3824;
					L61: while (true) {
					if (!(i_163310 < l_163312)) break L61;
						F.line = 3825;
						allele_163097 = allele_dqa1_160311[chckIndx(i_163310, 0, allele_dqa1_160311.length+0-1)-0];
						F.line = 169;
						if (allele_list_162862 != null) { allele_list_162862 = (allele_list_162862).concat((makeNimstrLit("<option value=\"")).concat(allele_163097,makeNimstrLit("\">"),allele_163097,makeNimstrLit("</option>\x0A"))); } else { allele_list_162862 = (makeNimstrLit("<option value=\"")).concat(allele_163097,makeNimstrLit("\">"),allele_163097,makeNimstrLit("</option>\x0A")).slice(); };
						F.line = 3826;
						i_163310 = addInt(i_163310, 1);
						if (!(((allele_dqa1_160311 != null ? allele_dqa1_160311.length : 0) == l_163312))) {
						F.line = 3827;
						failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim(3827, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L62: do {
			F.line = 171;
			var element_163110 = null;
			F.line = 2173;
			var i_163316 = 0;
			if ((i_163316 <= 1)) {
			L63: do {
				F.line = 2175;
					L64: while (true) {
					if (!true) break L64;
						F.line = 2176;
						element_163110 = rec_elements_dqa1_160054[chckIndx(i_163316, 0, rec_elements_dqa1_160054.length+0-1)-0];
						F.line = 172;
						document.getElementById(toJSStr(element_163110)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163316)) {
						F.line = 2177;
						break L63;
						}
						
						F.line = 2178;
						i_163316 = addInt(i_163316, 1);
					}
			} while(false);
			}
			
		} while(false);
		L65: do {
			F.line = 173;
			var element_163120 = null;
			F.line = 2173;
			var i_163320 = 0;
			if ((i_163320 <= 1)) {
			L66: do {
				F.line = 2175;
					L67: while (true) {
					if (!true) break L67;
						F.line = 2176;
						element_163120 = don_elements_dqa1_160084[chckIndx(i_163320, 0, don_elements_dqa1_160084.length+0-1)-0];
						F.line = 174;
						document.getElementById(toJSStr(element_163120)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163320)) {
						F.line = 2177;
						break L66;
						}
						
						F.line = 2178;
						i_163320 = addInt(i_163320, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 176;
		allele_list_162862 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L68: do {
			F.line = 178;
			var allele_163132 = null;
			F.line = 3822;
			var i_163324 = 0;
			F.line = 3823;
			var l_163326 = (allele_dqb1_160340 != null ? allele_dqb1_160340.length : 0);
			L69: do {
				F.line = 3824;
					L70: while (true) {
					if (!(i_163324 < l_163326)) break L70;
						F.line = 3825;
						allele_163132 = allele_dqb1_160340[chckIndx(i_163324, 0, allele_dqb1_160340.length+0-1)-0];
						F.line = 179;
						if (allele_list_162862 != null) { allele_list_162862 = (allele_list_162862).concat((makeNimstrLit("<option value=\"")).concat(allele_163132,makeNimstrLit("\">"),allele_163132,makeNimstrLit("</option>\x0A"))); } else { allele_list_162862 = (makeNimstrLit("<option value=\"")).concat(allele_163132,makeNimstrLit("\">"),allele_163132,makeNimstrLit("</option>\x0A")).slice(); };
						F.line = 3826;
						i_163324 = addInt(i_163324, 1);
						if (!(((allele_dqb1_160340 != null ? allele_dqb1_160340.length : 0) == l_163326))) {
						F.line = 3827;
						failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim(3827, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L71: do {
			F.line = 181;
			var element_163145 = null;
			F.line = 2173;
			var i_163330 = 0;
			if ((i_163330 <= 1)) {
			L72: do {
				F.line = 2175;
					L73: while (true) {
					if (!true) break L73;
						F.line = 2176;
						element_163145 = rec_elements_dqb1_160057[chckIndx(i_163330, 0, rec_elements_dqb1_160057.length+0-1)-0];
						F.line = 182;
						document.getElementById(toJSStr(element_163145)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163330)) {
						F.line = 2177;
						break L72;
						}
						
						F.line = 2178;
						i_163330 = addInt(i_163330, 1);
					}
			} while(false);
			}
			
		} while(false);
		L74: do {
			F.line = 183;
			var element_163155 = null;
			F.line = 2173;
			var i_163334 = 0;
			if ((i_163334 <= 1)) {
			L75: do {
				F.line = 2175;
					L76: while (true) {
					if (!true) break L76;
						F.line = 2176;
						element_163155 = don_elements_dqb1_160087[chckIndx(i_163334, 0, don_elements_dqb1_160087.length+0-1)-0];
						F.line = 184;
						document.getElementById(toJSStr(element_163155)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163334)) {
						F.line = 2177;
						break L75;
						}
						
						F.line = 2178;
						i_163334 = addInt(i_163334, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 186;
		allele_list_162862 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L77: do {
			F.line = 188;
			var allele_163167 = null;
			F.line = 3822;
			var i_163338 = 0;
			F.line = 3823;
			var l_163340 = (allele_dpa1_160369 != null ? allele_dpa1_160369.length : 0);
			L78: do {
				F.line = 3824;
					L79: while (true) {
					if (!(i_163338 < l_163340)) break L79;
						F.line = 3825;
						allele_163167 = allele_dpa1_160369[chckIndx(i_163338, 0, allele_dpa1_160369.length+0-1)-0];
						F.line = 189;
						if (allele_list_162862 != null) { allele_list_162862 = (allele_list_162862).concat((makeNimstrLit("<option value=\"")).concat(allele_163167,makeNimstrLit("\">"),allele_163167,makeNimstrLit("</option>\x0A"))); } else { allele_list_162862 = (makeNimstrLit("<option value=\"")).concat(allele_163167,makeNimstrLit("\">"),allele_163167,makeNimstrLit("</option>\x0A")).slice(); };
						F.line = 3826;
						i_163338 = addInt(i_163338, 1);
						if (!(((allele_dpa1_160369 != null ? allele_dpa1_160369.length : 0) == l_163340))) {
						F.line = 3827;
						failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim(3827, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L80: do {
			F.line = 191;
			var element_163180 = null;
			F.line = 2173;
			var i_163344 = 0;
			if ((i_163344 <= 1)) {
			L81: do {
				F.line = 2175;
					L82: while (true) {
					if (!true) break L82;
						F.line = 2176;
						element_163180 = rec_elements_dpa1_160060[chckIndx(i_163344, 0, rec_elements_dpa1_160060.length+0-1)-0];
						F.line = 192;
						document.getElementById(toJSStr(element_163180)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163344)) {
						F.line = 2177;
						break L81;
						}
						
						F.line = 2178;
						i_163344 = addInt(i_163344, 1);
					}
			} while(false);
			}
			
		} while(false);
		L83: do {
			F.line = 193;
			var element_163190 = null;
			F.line = 2173;
			var i_163348 = 0;
			if ((i_163348 <= 1)) {
			L84: do {
				F.line = 2175;
					L85: while (true) {
					if (!true) break L85;
						F.line = 2176;
						element_163190 = don_elements_dpa1_160090[chckIndx(i_163348, 0, don_elements_dpa1_160090.length+0-1)-0];
						F.line = 194;
						document.getElementById(toJSStr(element_163190)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163348)) {
						F.line = 2177;
						break L84;
						}
						
						F.line = 2178;
						i_163348 = addInt(i_163348, 1);
					}
			} while(false);
			}
			
		} while(false);
		F.line = 196;
		allele_list_162862 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L86: do {
			F.line = 198;
			var allele_163202 = null;
			F.line = 3822;
			var i_163352 = 0;
			F.line = 3823;
			var l_163354 = (allele_dpb1_160398 != null ? allele_dpb1_160398.length : 0);
			L87: do {
				F.line = 3824;
					L88: while (true) {
					if (!(i_163352 < l_163354)) break L88;
						F.line = 3825;
						allele_163202 = allele_dpb1_160398[chckIndx(i_163352, 0, allele_dpb1_160398.length+0-1)-0];
						F.line = 199;
						if (allele_list_162862 != null) { allele_list_162862 = (allele_list_162862).concat((makeNimstrLit("<option value=\"")).concat(allele_163202,makeNimstrLit("\">"),allele_163202,makeNimstrLit("</option>\x0A"))); } else { allele_list_162862 = (makeNimstrLit("<option value=\"")).concat(allele_163202,makeNimstrLit("\">"),allele_163202,makeNimstrLit("</option>\x0A")).slice(); };
						F.line = 3826;
						i_163352 = addInt(i_163352, 1);
						if (!(((allele_dpb1_160398 != null ? allele_dpb1_160398.length : 0) == l_163354))) {
						F.line = 3827;
						failed_assert_impl_20481(makeNimstrLit("C:\\Users\\152837\\.choosenim\\toolchains\\nim-0.19.0\\lib\\system.nim(3827, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		L89: do {
			F.line = 201;
			var element_163215 = null;
			F.line = 2173;
			var i_163358 = 0;
			if ((i_163358 <= 1)) {
			L90: do {
				F.line = 2175;
					L91: while (true) {
					if (!true) break L91;
						F.line = 2176;
						element_163215 = rec_elements_dpb1_160063[chckIndx(i_163358, 0, rec_elements_dpb1_160063.length+0-1)-0];
						F.line = 202;
						document.getElementById(toJSStr(element_163215)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163358)) {
						F.line = 2177;
						break L90;
						}
						
						F.line = 2178;
						i_163358 = addInt(i_163358, 1);
					}
			} while(false);
			}
			
		} while(false);
		L92: do {
			F.line = 203;
			var element_163225 = null;
			F.line = 2173;
			var i_163362 = 0;
			if ((i_163362 <= 1)) {
			L93: do {
				F.line = 2175;
					L94: while (true) {
					if (!true) break L94;
						F.line = 2176;
						element_163225 = don_elements_dpb1_160093[chckIndx(i_163362, 0, don_elements_dpb1_160093.length+0-1)-0];
						F.line = 204;
						document.getElementById(toJSStr(element_163225)).innerHTML = toJSStr(allele_list_162862);
						if ((1 <= i_163362)) {
						F.line = 2177;
						break L93;
						}
						
						F.line = 2178;
						i_163362 = addInt(i_163362, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	
}

function get_allele_dp_163392(data_163394) {
	var F={procname:"epitopes.getAlleleDP",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		F.line = 216;
		merge_table_163418(alleles_table_160029[0], read_alleles_149281(cstrToNimstr(data_163394), eplets_table_160021[0]));
		F.line = 217;
		rawEcho(makeNimstrLit("alleles loaded from \'"), makeNimstrLit("data/epitopes/dp_alleles.txt"), makeNimstrLit("\'"));
		F.line = 220;
		fill_select_160112();
	framePtr = F.prev;

	
}

function get_eplet_dp_164388(data_164390) {
	var F={procname:"epitopes.getEpletDP",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		F.line = 224;
		merge_table_164414(eplets_table_160021[0], read_eplets_144070(cstrToNimstr(data_164390)));
		F.line = 225;
		rawEcho(makeNimstrLit("eplets loaded from \'"), makeNimstrLit("data/epitopes/dp_eplets.txt"), makeNimstrLit("\'"));
		F.line = 226;
		make_request_141014("data/epitopes/dp_alleles.txt", get_allele_dp_163392);
	framePtr = F.prev;

	
}

function get_allele_drdq_165384(data_165386) {
	var F={procname:"epitopes.getAlleleDRDQ",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		F.line = 230;
		merge_table_163418(alleles_table_160029[0], read_alleles_149281(cstrToNimstr(data_165386), eplets_table_160021[0]));
		F.line = 231;
		rawEcho(makeNimstrLit("alleles loaded from \'"), makeNimstrLit("data/epitopes/drdq_alleles.txt"), makeNimstrLit("\'"));
		F.line = 232;
		make_request_141014("data/epitopes/dp_eplets.txt", get_eplet_dp_164388);
	framePtr = F.prev;

	
}

function get_eplet_drdq_165440(data_165442) {
	var F={procname:"epitopes.getEpletDRDQ",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		F.line = 236;
		merge_table_164414(eplets_table_160021[0], read_eplets_144070(cstrToNimstr(data_165442)));
		F.line = 237;
		rawEcho(makeNimstrLit("eplets loaded from \'"), makeNimstrLit("data/epitopes/drdq_eplets.txt"), makeNimstrLit("\'"));
		F.line = 238;
		make_request_141014("data/epitopes/drdq_alleles.txt", get_allele_drdq_165384);
	framePtr = F.prev;

	
}

function get_allele_abc_165496(data_165498) {
	var F={procname:"epitopes.getAlleleABC",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		F.line = 242;
		nimCopy(alleles_table_160029[0], read_alleles_149281(cstrToNimstr(data_165498), eplets_table_160021[0]), NTI149301);
		F.line = 243;
		rawEcho(makeNimstrLit("alleles loaded from \'"), makeNimstrLit("data/epitopes/abc_alleles.txt"), makeNimstrLit("\'"));
		F.line = 244;
		make_request_141014("data/epitopes/drdq_eplets.txt", get_eplet_drdq_165440);
	framePtr = F.prev;

	
}

function get_eplet_abc_165517(data_165519) {
	var F={procname:"epitopes.getEpletABC",prev:framePtr,filename:"epitopes.nim",line:0};
	framePtr = F;
		F.line = 248;
		nimCopy(eplets_table_160021[0], read_eplets_144070(cstrToNimstr(data_165519)), NTI144082);
		F.line = 249;
		rawEcho(makeNimstrLit("eplets loaded from \'"), makeNimstrLit("data/epitopes/abc_eplets.txt"), makeNimstrLit("\'"));
		F.line = 250;
		make_request_141014("data/epitopes/abc_alleles.txt", get_allele_abc_165496);
	framePtr = F.prev;

	
}
make_request_141014("data/epitopes/abc_eplets.txt", get_eplet_abc_165517);
