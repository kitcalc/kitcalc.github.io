/* Generated by the Nim Compiler v0.17.2 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI69003 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI69002 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI69258 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI69255 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI69252 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64105 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI38134 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64668 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64665 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI64662 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI80032 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI80029 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI80026 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI80023 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI80020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI80017 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3506 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3501 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3448 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3450 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI63005 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI64002 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI64008 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI64004 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI44002 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI69015 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI69012 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI69009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NNI64002 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI64002, name: "epVerified", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI64002, name: "epVerifiedPair", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI64002, name: "epOther", len: 0, sons: null}}};
NTI64002.node = NNI64002;
var NNI63005 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI63005, name: "ABC", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI63005, name: "DRB", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI63005, name: "DQA1", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI63005, name: "DQB1", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI63005, name: "DPA1", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI63005, name: "DPB1", len: 0, sons: null}}};
NTI63005.node = NNI63005;
var NNI64008 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "evidence", len: 0, typ: NTI64002, name: "evidence", sons: null}, 
{kind: 1, offset: "locus", len: 0, typ: NTI63005, name: "locus", sons: null}]};
NTI64008.node = NNI64008;
NTI64004.base = NTI64008;
var NNI69015 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44002, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI64004, name: "Field1", sons: null}]};
NTI69015.node = NNI69015;
NTI69012.base = NTI69015;
var NNI69009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI69012, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI69009.node = NNI69009;
var NNI3450 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3450.node = NNI3450;
var NNI3448 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3448.node = NNI3448;
NTI3501.base = NTI3424;
NTI3506.base = NTI3424;
var NNI3424 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3501, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3506, name: "up", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3448.base = NTI3424;
NTI3450.base = NTI3448;
NTI80017.base = NTI138;
NTI80020.base = NTI138;
NTI80023.base = NTI138;
NTI80026.base = NTI138;
NTI80029.base = NTI138;
NTI80032.base = NTI138;
var NNI64668 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44002, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI64004, name: "Field2", sons: null}]};
NTI64668.node = NNI64668;
NTI64665.base = NTI64668;
var NNI64662 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI64665, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI64662.node = NNI64662;
NTI38134.base = NTI138;
NTI64105.base = NTI138;
var NNI69003 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "eplets", len: 0, typ: NTI69009, name: "eplets", sons: null}, 
{kind: 1, offset: "locus", len: 0, typ: NTI63005, name: "locus", sons: null}]};
NTI69003.node = NNI69003;
NTI69002.base = NTI69003;
var NNI69258 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44002, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI69002, name: "Field2", sons: null}]};
NTI69258.node = NNI69258;
NTI69255.base = NTI69258;
var NNI69252 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI69255, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI69252.node = NNI69252;

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_19817, src_19818, ti_19819) {
	var result_20229 = null;

		switch (ti_19819.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_19801(ti_19819))) {
			result_20229 = src_19818;
			}
			else {
				result_20229 = [src_19818[0], src_19818[1]];
			}
			
			break;
		case 19:
			      if (dest_19817 === null || dest_19817 === undefined) {
        dest_19817 = {};
      }
      else {
        for (var key in dest_19817) { delete dest_19817[key]; }
      }
      for (var key in src_19818) { dest_19817[key] = src_19818[key]; }
      result_20229 = dest_19817;
    
			break;
		case 18:
		case 17:
			if (!((ti_19819.base == null))) {
			result_20229 = nimCopy(dest_19817, src_19818, ti_19819.base);
			}
			else {
			if ((ti_19819.kind == 17)) {
			result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {m_type: ti_19819} : dest_19817;
			}
			else {
				result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {} : dest_19817;
			}
			}
			nimCopyAux(result_20229, src_19818, ti_19819.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_19818 === null) {
        result_20229 = null;
      }
      else {
        if (dest_19817 === null || dest_19817 === undefined) {
          dest_19817 = new Array(src_19818.length);
        }
        else {
          dest_19817.length = src_19818.length;
        }
        result_20229 = dest_19817;
        for (var i = 0; i < src_19818.length; ++i) {
          result_20229[i] = nimCopy(result_20229[i], src_19818[i], ti_19819.base);
        }
      }
    
			break;
		case 28:
			      if (src_19818 !== null) {
        result_20229 = src_19818.slice(0);
      }
    
			break;
		default: 
			result_20229 = src_19818;
			break;
		}

	return result_20229;

}

function cstrToNimstr(c_14803) {
		  var ln = c_14803.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14803.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_14803.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15003) {
		    var len = s_15003.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15003[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15003[i] < 128)
        asciiPart[i] = fcc(s_15003[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function eqStrings(a_17203, b_17204) {
		    if (a_17203 == b_17204) return true;
    if ((!a_17203) || (!b_17204)) return false;
    var alen = a_17203.length;
    if (alen != b_17204.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17203[i] != b_17204[i]) return false;
    return true;
  

	
}

function makeNimstrLit(c_14603) {
		    var ln = c_14603.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14603.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function raiseException(e_14006, ename_14007) {
		e_14006.name = ename_14007;
		if ((excHandler == 0)) {
		unhandledException(e_14006);
		}
		
		throw e_14006;

	
}
		var recElementsA_80016 = nimCopy(null, [makeNimstrLit("recA1"), makeNimstrLit("recA2")], NTI80017);
		var recElementsB_80019 = nimCopy(null, [makeNimstrLit("recB1"), makeNimstrLit("recB2")], NTI80020);
		var recElementsC_80022 = nimCopy(null, [makeNimstrLit("recC1"), makeNimstrLit("recC2")], NTI80023);
		var donElementsA_80025 = nimCopy(null, [makeNimstrLit("donA1"), makeNimstrLit("donA2")], NTI80026);
		var donElementsB_80028 = nimCopy(null, [makeNimstrLit("donB1"), makeNimstrLit("donB2")], NTI80029);
		var donElementsC_80031 = nimCopy(null, [makeNimstrLit("donC1"), makeNimstrLit("donC2")], NTI80032);

function nimMax(a_19444, b_19445) {
		var Tmp1;

	var result_19446 = 0;

	BeforeRet: do {
		if ((b_19445 <= a_19444)) {
		Tmp1 = a_19444;
		}
		else {
		Tmp1 = b_19445;
		}
		
		result_19446 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_19446;

}

function mnewString(len_15203) {
		      var result = new Array(len_15203+1);
      result[0] = 0;
      result[len_15203] = 0;
      return result;
    

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}
var ConstSet2 = setConstr(0, 13, 10);
var ConstSet3 = setConstr(32, 9, 11, 13, 10, 12);
		var expectedHeader_64093 = nimCopy(null, [makeNimstrLit("eplet"), makeNimstrLit("evidence"), makeNimstrLit("locus")], NTI64105);
var ConstSet4 = setConstr([65, 90]);

function reprEnum(e_20828, typ_20829) {
	var result_20830 = null;

		if (!(isUndefined_20832(typ_20829.node.sons[e_20828]))) {
		result_20830 = nimCopy(null, cstrToNimstr(typ_20829.node.sons[e_20828].name), NTI138);
		}
		else {
			result_20830 = nimCopy(null, (cstrToNimstr((e_20828)+"").slice(0,-1)).concat(makeNimstrLit(" (invalid data!)")), NTI138);
		}
		

	return result_20830;

}
var ConstSet5 = setConstr(0, 13, 10);
var ConstSet6 = setConstr(32, 9, 11, 13, 10, 12);
		var expectedHeader_69217 = nimCopy(null, [makeNimstrLit("allele"), makeNimstrLit("eplet"), makeNimstrLit("locus")], NTI64105);
var nimvm_6119 = false;
var nim_program_result = 0;
var globalRaiseHook_11605 = [null];
var localRaiseHook_11610 = [null];
var outOfMemHook_11613 = [null];
var objectID_44232 = [0];
var epletABC_80004 = [{data: null, counter: 0}];
var alleleABC_80008 = [{data: null, counter: 0}];

function init_69090(s_69096, initialSize_69098) {
		s_69096.counter = 0;
		s_69096.data = new Array(initialSize_69098); for (var i=0;i<initialSize_69098;++i) {s_69096.data[i]={Field0: 0, Field1: null};}
	
}

function initSet_82295(initialSize_82299) {
	var result_82301 = [{data: null, counter: 0}];

		init_69090(result_82301[0], initialSize_82299);

	return result_82301[0];

}

function isFatPointer_19801(ti_19803) {
	var result_19804 = false;

	BeforeRet: do {
		result_19804 = !((ConstSet1[ti_19803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_19804;

}

function nimCopyAux(dest_19822, src_19823, n_19825) {
		switch (n_19825.kind) {
		case 0:
			break;
		case 1:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
    
			break;
		case 2:
			L1: do {
				var i_20215 = 0;
				var colontmp__20217 = 0;
				colontmp__20217 = (n_19825.len - 1);
				var res_20220 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20220 <= colontmp__20217)) break L3;
							i_20215 = res_20220;
							nimCopyAux(dest_19822, src_19823, n_19825.sons[i_20215]);
							res_20220 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
      for (var i = 0; i < n_19825.sons.length; ++i) {
        nimCopyAux(dest_19822, src_19823, n_19825.sons[i][1]);
      }
    
			break;
		}

	
}

function isFilled_51256(hcode_51258) {
	var result_51259 = false;

		result_51259 = !((hcode_51258 == 0));

	return result_51259;

}

function emarkamp__44005(h_44007, val_44008) {
	var result_44009 = 0;

		result_44009 = ((h_44007 + val_44008) >>> 0);
		result_44009 = ((result_44009 + (result_44009 << 10)) >>> 0);
		result_44009 = (result_44009 ^ ((result_44009 >>> 0) >>> 6));

	return result_44009;

}

function emarkdollar__44042(h_44044) {
	var result_44045 = 0;

		result_44045 = ((h_44044 + (h_44044 << 3)) >>> 0);
		result_44045 = (result_44045 ^ ((result_44045 >>> 0) >>> 11));
		result_44045 = ((result_44045 + (result_44045 << 15)) >>> 0);

	return result_44045;

}

function hash_44836(x_44838) {
	var result_44839 = 0;

		var h_44840 = 0;
		L1: do {
			var i_44850 = 0;
			var colontmp__44860 = 0;
			colontmp__44860 = ((x_44838 != null ? x_44838.length-1 : 0) - 1);
			var res_44863 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_44863 <= colontmp__44860)) break L3;
						i_44850 = res_44863;
						h_44840 = emarkamp__44005(h_44840, x_44838[i_44850]);
						res_44863 += 1;
					}
			} while(false);
		} while(false);
		result_44839 = emarkdollar__44042(h_44840);

	return result_44839;

}

function hash_64060(x_64064) {
	var result_64065 = 0;

		result_64065 = x_64064;

	return result_64065;

}

function hash_64074(x_64078) {
	var result_64079 = 0;

		result_64079 = x_64078;

	return result_64079;

}

function hash_64052(ep_64054) {
	var result_64055 = 0;

		var h_64056 = 0;
		h_64056 = emarkamp__44005(h_64056, hash_44836(ep_64054.name));
		h_64056 = emarkamp__44005(h_64056, hash_64060(ep_64054.evidence));
		h_64056 = emarkamp__44005(h_64056, hash_64074(ep_64054.locus));
		result_64055 = emarkdollar__44042(h_64056);

	return result_64055;

}

function nextTry_51408(h_51410, maxHash_51411) {
	var result_51412 = 0;

		result_51412 = ((h_51410 + 1) & maxHash_51411);

	return result_51412;

}

function rawGet_75421(s_75426, key_75428, hc_75430, hc_75430_Idx) {
						var Tmp3;

	var result_75431 = 0;

	BeforeRet: do {
		hc_75430[hc_75430_Idx] = hash_64052(key_75428);
		if ((hc_75430[hc_75430_Idx] == 0)) {
		hc_75430[hc_75430_Idx] = 314159265;
		}
		
		var h_75441 = (hc_75430[hc_75430_Idx] & (s_75426.data != null ? (s_75426.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_51256(s_75426.data[h_75441].Field0)) break L2;
						if (!(s_75426.data[h_75441].Field0 == hc_75430[hc_75430_Idx])) Tmp3 = false; else {							Tmp3 = (s_75426.data[h_75441].Field1 == key_75428);						}					if (Tmp3) {
					result_75431 = h_75441;
					break BeforeRet;
					}
					
					h_75441 = nextTry_51408(h_75441, (s_75426.data != null ? (s_75426.data.length-1) : -1));
				}
		} while(false);
		result_75431 = (-1 - h_75441);
	} while (false);

	return result_75431;

}

function mustRehash_51296(length_51298, counter_51299) {
	var result_51300 = false;

		result_51300 = (((length_51298 * 2) < (counter_51299 * 3)) || ((length_51298 - counter_51299) < 4));

	return result_51300;

}

function rawGetKnownHC_77354(s_77359, key_77361, hc_77363) {
	var result_77364 = 0;

	BeforeRet: do {
		var h_77373 = (hc_77363 & (s_77359.data != null ? (s_77359.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_51256(s_77359.data[h_77373].Field0)) break L2;
					if (((s_77359.data[h_77373].Field0 == hc_77363) && (s_77359.data[h_77373].Field1 == key_77361))) {
					result_77364 = h_77373;
					break BeforeRet;
					}
					
					h_77373 = nextTry_51408(h_77373, (s_77359.data != null ? (s_77359.data.length-1) : -1));
				}
		} while(false);
		result_77364 = (-1 - h_77373);
	} while (false);

	return result_77364;

}

function rawInsert_78570(s_78576, data_78580, data_78580_Idx, key_78582, hc_78584, h_78586) {
		data_78580[data_78580_Idx][h_78586].Field1 = key_78582;
		data_78580[data_78580_Idx][h_78586].Field0 = hc_78584;

	
}

function enlarge_76384(s_76390) {
		var n_76393 = null;
		n_76393 = new Array(((s_76390.data != null ? s_76390.data.length : 0) * 2)); for (var i=0;i<((s_76390.data != null ? s_76390.data.length : 0) * 2);++i) {n_76393[i]={Field0: 0, Field1: null};}		var Tmp1 = s_76390.data; s_76390.data = n_76393; n_76393 = Tmp1;		L2: do {
			var i_76641 = 0;
			var colontmp__79052 = 0;
			colontmp__79052 = (n_76393 != null ? (n_76393.length-1) : -1);
			var res_79055 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_79055 <= colontmp__79052)) break L4;
						i_76641 = res_79055;
						if (isFilled_51256(n_76393[i_76641].Field0)) {
						var j_78087 = (-1 - rawGetKnownHC_77354(s_76390, n_76393[i_76641].Field1, n_76393[i_76641].Field0));
						rawInsert_78570(s_76390, s_76390, "data", n_76393[i_76641].Field1, n_76393[i_76641].Field0, j_78087);
						}
						
						res_79055 += 1;
					}
			} while(false);
		} while(false);

	
}

function incl_75278(s_75284, key_75286) {
		var hc_75401 = [0];
		var index_76156 = rawGet_75421(s_75284, key_75286, hc_75401, 0);
		if ((index_76156 < 0)) {
		if (mustRehash_51296((s_75284.data != null ? s_75284.data.length : 0), s_75284.counter)) {
		enlarge_76384(s_75284);
		index_76156 = rawGetKnownHC_77354(s_75284, key_75286, hc_75401[0]);
		}
		
		rawInsert_78570(s_75284, s_75284, "data", key_75286, hc_75401[0], (-1 - index_76156));
		s_75284.counter += 1;
		}
		

	
}

function incl_82689(s_82695, other_82698) {
		L1: do {
			var item_83689 = null;
			L2: do {
				var h_83782 = 0;
				var colontmp__83784 = 0;
				colontmp__83784 = (other_82698.data != null ? (other_82698.data.length-1) : -1);
				var res_83786 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_83786 <= colontmp__83784)) break L4;
							h_83782 = res_83786;
							if (isFilled_51256(other_82698.data[h_83782].Field0)) {
							item_83689 = other_82698.data[h_83782].Field1;
							incl_75278(s_82695, item_83689);
							}
							
							res_83786 += 1;
						}
				} while(false);
			} while(false);
		} while(false);

	
}

function isFilled_47465(hcode_47467) {
	var result_47468 = false;

		result_47468 = !((hcode_47467 == 0));

	return result_47468;

}

function nextTry_47601(h_47603, maxHash_47604) {
	var result_47605 = 0;

		result_47605 = ((h_47603 + 1) & maxHash_47604);

	return result_47605;

}

function rawGet_69675(t_69680, key_69682, hc_69684, hc_69684_Idx) {
						var Tmp3;

	var result_69685 = 0;

	BeforeRet: do {
		hc_69684[hc_69684_Idx] = hash_44836(key_69682);
		if ((hc_69684[hc_69684_Idx] == 0)) {
		hc_69684[hc_69684_Idx] = 314159265;
		}
		
		var h_69697 = (hc_69684[hc_69684_Idx] & (t_69680.data != null ? (t_69680.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_47465(t_69680.data[h_69697].Field0)) break L2;
						if (!(t_69680.data[h_69697].Field0 == hc_69684[hc_69684_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_69680.data[h_69697].Field1, key_69682);						}					if (Tmp3) {
					result_69685 = h_69697;
					break BeforeRet;
					}
					
					h_69697 = nextTry_47601(h_69697, (t_69680.data != null ? (t_69680.data.length-1) : -1));
				}
		} while(false);
		result_69685 = (-1 - h_69697);
	} while (false);

	return result_69685;

}

function add_11629(x_11632, x_11632_Idx, y_11633) {
		        var len = x_11632[0].length-1;
        for (var i = 0; i < y_11633.length; ++i) {
          x_11632[0][len] = y_11633.charCodeAt(i);
          ++len;
        }
        x_11632[0][len] = 0
      

	
}

function unhandledException(e_13853) {
			var Tmp1;

		var buf_13854 = [makeNimstrLit("")];
			if (!!(eqStrings(e_13853.message, null))) Tmp1 = false; else {				Tmp1 = !((e_13853.message[0] == 0));			}		if (Tmp1) {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(e_13853.message); } else { buf_13854[0] = e_13853.message;};
		}
		else {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_13854[0] = makeNimstrLit(" [");};
		add_11629(buf_13854, 0, e_13853.name);
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_13854[0] = makeNimstrLit("]\x0A");};
		var cbuf_14001 = toJSStr(buf_13854[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14001);
  }
  else {
    throw cbuf_14001;
  }
  

	
}

function X5BX5D__74214(t_74221, key_74223) {
	var result_74225 = [null, 0];
	var result_74225_Idx = 0;

		var hc_74227 = [0];
		var index_74241 = rawGet_69675(t_74221, key_74223, hc_74227, 0);
		if ((0 <= index_74241)) {
		result_74225 = t_74221.data[index_74241]; result_74225_Idx = "Field2";
		}
		else {
			var e_74606 = null;
			e_74606 = {m_type: NTI3450, parent: null, name: null, message: null, trace: null, up: null};
			e_74606.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(key_74223), NTI138);
			e_74606.parent = null;
			raiseException(e_74606, "KeyError");
		}
		

	return [result_74225, result_74225_Idx];

}

function getEplets_82283(elementsA_82287, elementsB_82288, elementsC_82289) {
						var Tmp4;
						var Tmp8;

	var result_82292 = [{data: null, counter: 0}];

		nimCopy(result_82292[0], initSet_82295(64), NTI69009);
		L1: do {
			var element_82340 = null;
			var i_84163 = 0;
			if ((i_84163 <= 1)) {
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						element_82340 = elementsA_82287[i_84163];
						var allele_82341 = cstrToNimstr(document.getElementById(toJSStr(element_82340)).value);
						incl_82689(result_82292[0], (Tmp4 = X5BX5D__74214(alleleABC_80008[0], allele_82341), Tmp4[0])[Tmp4[1]].eplets);
						if ((1 <= i_84163)) {
						break L2;
						}
						
						i_84163 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L5: do {
			var element_83799 = null;
			var i_84168 = 0;
			if ((i_84168 <= 1)) {
			L6: do {
					L7: while (true) {
					if (!true) break L7;
						element_83799 = elementsB_82288[i_84168];
						var allele_83800 = cstrToNimstr(document.getElementById(toJSStr(element_83799)).value);
						incl_82689(result_82292[0], (Tmp8 = X5BX5D__74214(alleleABC_80008[0], allele_83800), Tmp8[0])[Tmp8[1]].eplets);
						if ((1 <= i_84168)) {
						break L6;
						}
						
						i_84168 += 1;
					}
			} while(false);
			}
			
		} while(false);

	return result_82292[0];

}

function contains_84813(s_84818, key_84820) {
	var result_84821 = false;

		var hc_85001 = [0];
		var index_85032 = rawGet_75421(s_84818, key_84820, hc_85001, 0);
		result_84821 = (0 <= index_85032);

	return result_84821;

}

function difference_84361(s1_84366, s2_84369) {
	var result_84371 = [{data: null, counter: 0}];

		nimCopy(result_84371[0], initSet_82295(64), NTI69009);
		L1: do {
			var item_84616 = null;
			L2: do {
				var h_85127 = 0;
				var colontmp__85129 = 0;
				colontmp__85129 = (s1_84366.data != null ? (s1_84366.data.length-1) : -1);
				var res_85131 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_85131 <= colontmp__85129)) break L4;
							h_85127 = res_85131;
							if (isFilled_51256(s1_84366.data[h_85127].Field0)) {
							item_84616 = s1_84366.data[h_85127].Field1;
							if (!(contains_84813(s2_84369, item_84616))) {
							incl_75278(result_84371[0], item_84616);
							}
							
							}
							
							res_85131 += 1;
						}
				} while(false);
			} while(false);
		} while(false);

	return result_84371[0];

}

function minus__84330(s1_84335, s2_84338) {
	var result_84340 = {data: null, counter: 0};

		nimCopy(result_84340, difference_84361(s1_84335, s2_84338), NTI69009);

	return result_84340;

}

function card_84217(s_84222) {
	var result_84223 = 0;

		result_84223 = s_84222.counter;

	return result_84223;

}

function newSeq_80040(len_80044) {
	var result_80046 = null;

		result_80046 = new Array(len_80044); for (var i=0;i<len_80044;++i) {result_80046[i]=null;}
	return result_80046;

}

function star__34008(x_34010, order_34011) {
	var result_34012 = 0;

		var y_34021 = (order_34011 - 1);
		result_34012 = ((x_34010 ^ y_34021) - y_34021);

	return result_34012;

}

function merge_80712(a_80718, b_80722, lo_80724, m_80726, hi_80728, cmp_80735, order_80737) {
	BeforeRet: do {
		if ((star__34008(cmp_80735(a_80718[m_80726], a_80718[(m_80726 + 1)]), order_80737) <= 0)) {
		break BeforeRet;
		}
		
		var j_80738 = lo_80724;
		var bb_81001 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_80738 <= m_80726)) break L2;
					b_80722[bb_81001] = a_80718[j_80738];
					bb_81001 += 1;
					j_80738 += 1;
				}
		} while(false);
		var i_81219 = 0;
		var k_81220 = lo_80724;
		L3: do {
				L4: while (true) {
				if (!((k_81220 < j_80738) && (j_80738 <= hi_80728))) break L4;
					if ((star__34008(cmp_80735(b_80722[i_81219], a_80718[j_80738]), order_80737) <= 0)) {
					a_80718[k_81220] = b_80722[i_81219];
					i_81219 += 1;
					}
					else {
						a_80718[k_81220] = a_80718[j_80738];
						j_80738 += 1;
					}
					
					k_81220 += 1;
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_81220 < j_80738)) break L6;
					a_80718[k_81220] = b_80722[i_81219];
					k_81220 += 1;
					i_81219 += 1;
				}
		} while(false);
	} while (false);

	
}

function sort_80669(a_80675, cmp_80682, order_80684) {
		var n_80691 = (a_80675 != null ? a_80675.length : 0);
		var b_80693 = null;
		b_80693 = new Array(Math.floor(n_80691 / 2)); for (var i=0;i<Math.floor(n_80691 / 2);++i) {b_80693[i]=null;}		var s_80707 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_80707 < n_80691)) break L2;
					var m_80708 = ((n_80691 - 1) - s_80707);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_80708)) break L4;
								merge_80712(a_80675, b_80693, nimMax(((m_80708 - s_80707) + 1), 0), m_80708, (m_80708 + s_80707), cmp_80682, order_80684);
								m_80708 -= (s_80707 * 2);
							}
					} while(false);
					s_80707 = (s_80707 * 2);
				}
		} while(false);

	
}

function cmpStrings(a_17003, b_17004) {
		    if (a_17003 == b_17004) return 0;
    if (!a_17003) return -1;
    if (!b_17004) return 1;
    for (var i = 0; i < a_17003.length-1; ++i) {
      var result = a_17003[i] - b_17004[i];
      if (result != 0) return result;
    }
    return 0;
  

	
}

function cmp_6041(x_6043, y_6044) {
	var result_17010 = 0;

	BeforeRet: do {
		result_17010 = cmpStrings(x_6043, y_6044);
		break BeforeRet;
	} while (false);

	return result_17010;

}

function nsuJoinSep(a_39640, sep_39641) {
	var result_39642 = null;

		if ((0 < (a_39640 != null ? a_39640.length : 0))) {
		var L_39655 = ((sep_39641 != null ? sep_39641.length-1 : 0) * ((a_39640 != null ? a_39640.length : 0) - 1));
		L1: do {
			var i_39672 = 0;
			var colontmp__39700 = 0;
			colontmp__39700 = (a_39640 != null ? (a_39640.length-1) : -1);
			var res_39703 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_39703 <= colontmp__39700)) break L3;
						i_39672 = res_39703;
						L_39655 += (a_39640[i_39672] != null ? a_39640[i_39672].length-1 : 0);
						res_39703 += 1;
					}
			} while(false);
		} while(false);
		result_39642 = nimCopy(null, mnewString(0), NTI138);
		if (result_39642 != null) { result_39642 = (result_39642.slice(0, -1)).concat(a_39640[0]); } else { result_39642 = a_39640[0];};
		L4: do {
			var i_39698 = 0;
			var colontmp__39708 = 0;
			colontmp__39708 = (a_39640 != null ? (a_39640.length-1) : -1);
			var res_39711 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_39711 <= colontmp__39708)) break L6;
						i_39698 = res_39711;
						if (result_39642 != null) { result_39642 = (result_39642.slice(0, -1)).concat(sep_39641); } else { result_39642 = sep_39641;};
						if (result_39642 != null) { result_39642 = (result_39642.slice(0, -1)).concat(a_39640[i_39698]); } else { result_39642 = a_39640[i_39698];};
						res_39711 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			result_39642 = nimCopy(null, makeNimstrLit(""), NTI138);
		}
		

	return result_39642;

}

function outputMismatchedEplets_84169(eplets_84173) {
		document.getElementById("hvgEpletCount").innerHTML = toJSStr(cstrToNimstr((card_84217(eplets_84173))+""));
		var sortedEplets_84251 = newSeq_80040(0);
		L1: do {
			var eplet_84259 = null;
			L2: do {
				var h_84299 = 0;
				var colontmp__84301 = 0;
				colontmp__84301 = (eplets_84173.data != null ? (eplets_84173.data.length-1) : -1);
				var res_84303 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_84303 <= colontmp__84301)) break L4;
							h_84299 = res_84303;
							if (isFilled_51256(eplets_84173.data[h_84299].Field0)) {
							eplet_84259 = eplets_84173.data[h_84299].Field1;
							var Tmp5 = nimCopy(null, eplet_84259.name, NTI138);
							if (sortedEplets_84251 != null) { sortedEplets_84251.push(Tmp5); } else { sortedEplets_84251 = [Tmp5]; };
							}
							
							res_84303 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		sort_80669(sortedEplets_84251, cmp_6041, 1);
		document.getElementById("hvgMismatchedEplets").innerHTML = toJSStr(nsuJoinSep(sortedEplets_84251, makeNimstrLit(", ")));

	
}

function showMismatchedEplets() {
		var recEplets_84308 = getEplets_82283(recElementsA_80016, recElementsB_80019, recElementsC_80022);
		var donEplets_84309 = getEplets_82283(donElementsA_80025, donElementsB_80028, donElementsC_80031);
		var hvgEplets_85134 = minus__84330(donEplets_84309, recEplets_84308);
		if (document.getElementById("includeOther").checked) {
		outputMismatchedEplets_84169(hvgEplets_85134);
		}
		else {
			var otherExcluded_85143 = [initSet_82295(64)];
			L1: do {
				var eplet_85151 = null;
				L2: do {
					var h_85253 = 0;
					var colontmp__85255 = 0;
					colontmp__85255 = (hvgEplets_85134.data != null ? (hvgEplets_85134.data.length-1) : -1);
					var res_85257 = 0;
					L3: do {
							L4: while (true) {
							if (!(res_85257 <= colontmp__85255)) break L4;
								h_85253 = res_85257;
								if (isFilled_51256(hvgEplets_85134.data[h_85253].Field0)) {
								eplet_85151 = hvgEplets_85134.data[h_85253].Field1;
								if (!((eplet_85151.evidence == 2))) {
								incl_75278(otherExcluded_85143[0], eplet_85151);
								}
								
								}
								
								res_85257 += 1;
							}
					} while(false);
				} while(false);
			} while(false);
			outputMismatchedEplets_84169(otherExcluded_85143[0]);
		}
		

	
}

function makeRequest_62001(url_62003, cb_62007) {

		function alertContents_62018(e_62020) {
				if ((xhr_62008.readyState == 4)) {
				if ((xhr_62008.status == 200)) {
				cb_62007(xhr_62008.responseText);
				}
				else {
				rawEcho(makeNimstrLit("Could not retrieve data from "), cstrToNimstr(url_62003));
				}
				
				}
				

			
		}

	BeforeRet: do {
		var xhr_62008 = new XMLHttpRequest();
		xhr_62008.responseType = "text";
		if ((xhr_62008 === null)) {
		rawEcho(makeNimstrLit("Cannot create an XMLHTTP instance for url "), cstrToNimstr(url_62003));
		break BeforeRet;
		}
		
		xhr_62008.onreadystatechange = alertContents_62018;
		xhr_62008.open("GET", url_62003, true, null, null);
		xhr_62008.send();
	} while (false);

	
}

function initTable_64684(initialSize_64689) {
	var result_64691 = {data: null, counter: 0};

		result_64691.counter = 0;
		result_64691.data = new Array(initialSize_64689); for (var i=0;i<initialSize_64689;++i) {result_64691.data[i]={Field0: 0, Field1: null, Field2: null};}
	return result_64691;

}

function nsuSplitCharSet(s_38112, seps_38114, maxsplit_38115) {
	var result_38117 = null;

		result_38117 = nimCopy(null, [], NTI38134);
		L1: do {
			var x_38136 = null;
			var last_38151 = 0;
			var splits_38153 = maxsplit_38115;
			if ((0 < (s_38112 != null ? s_38112.length-1 : 0))) {
			L2: do {
					L3: while (true) {
					if (!(last_38151 <= (s_38112 != null ? s_38112.length-1 : 0))) break L3;
						var first_38155 = last_38151;
						L4: do {
								L5: while (true) {
								if (!((last_38151 < (s_38112 != null ? s_38112.length-1 : 0)) && !((seps_38114[s_38112[last_38151]] != undefined)))) break L5;
									last_38151 += 1;
								}
						} while(false);
						if ((splits_38153 == 0)) {
						last_38151 = (s_38112 != null ? s_38112.length-1 : 0);
						}
						
						x_38136 = (s_38112.slice(first_38155, ((last_38151 - 1))+1).concat(0));
						var Tmp6 = nimCopy(null, x_38136, NTI138);
						if (result_38117 != null) { result_38117.push(Tmp6); } else { result_38117 = [Tmp6]; };
						if ((splits_38153 == 0)) {
						break L2;
						}
						
						splits_38153 -= 1;
						last_38151 += 1;
					}
			} while(false);
			}
			
		} while(false);

	return result_38117;

}

function seqToPtr_64409(x_64414) {
		return x_64414

	
}

function eqeq__64107(x_64112, y_64115) {
	var result_64116 = false;

	BeforeRet: do {
		if ((seqToPtr_64409(x_64112) == seqToPtr_64409(y_64115))) {
		result_64116 = true;
		break BeforeRet;
		}
		
		if (((x_64112 === null) || (y_64115 === null))) {
		result_64116 = false;
		break BeforeRet;
		}
		
		if (!(((x_64112 != null ? x_64112.length : 0) == (y_64115 != null ? y_64115.length : 0)))) {
		result_64116 = false;
		break BeforeRet;
		}
		
		L1: do {
			var i_64645 = 0;
			var colontmp__64647 = 0;
			colontmp__64647 = ((x_64112 != null ? x_64112.length : 0) - 1);
			var res_64650 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_64650 <= colontmp__64647)) break L3;
						i_64645 = res_64650;
						if (!(eqStrings(x_64112[i_64645], y_64115[i_64645]))) {
						result_64116 = false;
						break BeforeRet;
						}
						
						res_64650 += 1;
					}
			} while(false);
		} while(false);
		result_64116 = true;
		break BeforeRet;
	} while (false);

	return result_64116;

}

function checkEpletHeader_64088(fields_64091) {
	var result_64092 = false;

		result_64092 = eqeq__64107(fields_64091, expectedHeader_64093);

	return result_64092;

}

function parseEvidence_64018(evidence_64020) {
	var result_64021 = 0;

		switch (toJSStr(evidence_64020)) {
		case "verified_eplet":
			result_64021 = 0;
			break;
		case "verified_pair":
			result_64021 = 1;
			break;
		case "other_eplet":
			result_64021 = 2;
			break;
		default: 
			var e_64028 = null;
			e_64028 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null, up: null};
			e_64028.message = nimCopy(null, (makeNimstrLit("unknown eplet evidence: ").slice(0,-1)).concat(evidence_64020), NTI138);
			e_64028.parent = null;
			raiseException(e_64028, "ValueError");
			break;
		}

	return result_64021;

}

function nsuToLowerAsciiChar(c_36785) {
	var result_36786 = 0;

		if ((ConstSet4[c_36785] != undefined)) {
		result_36786 = (c_36785 + 32);
		}
		else {
			result_36786 = c_36785;
		}
		

	return result_36786;

}

function nsuCmpIgnoreStyle(a_37068, b_37069) {
						var Tmp7;

	var result_37070 = 0;

		var i_37071 = 0;
		var j_37072 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!(a_37068[i_37071] == 95)) break L4;
								i_37071 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!(b_37069[j_37072] == 95)) break L6;
								j_37072 += 1;
							}
					} while(false);
					var aa_37091 = nsuToLowerAsciiChar(a_37068[i_37071]);
					var bb_37092 = nsuToLowerAsciiChar(b_37069[j_37072]);
					result_37070 = (aa_37091 - bb_37092);
						if (!((result_37070 == 0))) Tmp7 = true; else {							Tmp7 = (aa_37091 == 0);						}					if (Tmp7) {
					break L1;
					}
					
					i_37071 += 1;
					j_37072 += 1;
				}
		} while(false);

	return result_37070;

}

function isUndefined_20832(x_20836) {
	var result_20837 = false;

		result_20837 = x_20836 === undefined;

	return result_20837;

}

function parseEnum_63020(s_63024) {
	var result_63025 = 0;

	BeforeRet: do {
		L1: do {
			var e_63214 = 0;
			var res_63240 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_63240 <= 5)) break L3;
						e_63214 = res_63240;
						if ((nsuCmpIgnoreStyle(s_63024, reprEnum(e_63214, NTI63005)) == 0)) {
						result_63025 = e_63214;
						break BeforeRet;
						}
						
						res_63240 += 1;
					}
			} while(false);
		} while(false);
		var e_63226 = null;
		e_63226 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null, up: null};
		e_63226.message = nimCopy(null, (makeNimstrLit("invalid enum value: ").slice(0,-1)).concat(s_63024), NTI138);
		e_63226.parent = null;
		raiseException(e_63226, "ValueError");
	} while (false);

	return result_63025;

}

function parseLocus_63012(locusstr_63014) {
	var result_63015 = 0;

		result_63015 = parseEnum_63020(locusstr_63014);

	return result_63015;

}

function newEplet_64038(name_64040, evidence_64041, locus_64042) {
	var result_64043 = null;

		result_64043 = {name: null, evidence: 0, locus: 0};
		result_64043.name = nimCopy(null, name_64040, NTI138);
		result_64043.evidence = parseEvidence_64018(evidence_64041);
		result_64043.locus = parseLocus_63012(locus_64042);

	return result_64043;

}

function rawGet_65012(t_65017, key_65019, hc_65021, hc_65021_Idx) {
						var Tmp3;

	var result_65022 = 0;

	BeforeRet: do {
		hc_65021[hc_65021_Idx] = hash_44836(key_65019);
		if ((hc_65021[hc_65021_Idx] == 0)) {
		hc_65021[hc_65021_Idx] = 314159265;
		}
		
		var h_65034 = (hc_65021[hc_65021_Idx] & (t_65017.data != null ? (t_65017.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_47465(t_65017.data[h_65034].Field0)) break L2;
						if (!(t_65017.data[h_65034].Field0 == hc_65021[hc_65021_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_65017.data[h_65034].Field1, key_65019);						}					if (Tmp3) {
					result_65022 = h_65034;
					break BeforeRet;
					}
					
					h_65034 = nextTry_47601(h_65034, (t_65017.data != null ? (t_65017.data.length-1) : -1));
				}
		} while(false);
		result_65022 = (-1 - h_65034);
	} while (false);

	return result_65022;

}

function mustRehash_47470(length_47472, counter_47473) {
	var result_47474 = false;

		result_47474 = (((length_47472 * 2) < (counter_47473 * 3)) || ((length_47472 - counter_47473) < 4));

	return result_47474;

}

function rawInsert_67190(t_67197, data_67201, data_67201_Idx, key_67203, val_67205, hc_67207, h_67209) {
		data_67201[data_67201_Idx][h_67209].Field1 = nimCopy(null, key_67203, NTI138);
		data_67201[data_67201_Idx][h_67209].Field2 = val_67205;
		data_67201[data_67201_Idx][h_67209].Field0 = hc_67207;

	
}

function enlarge_66087(t_66094) {
		var n_66098 = null;
		n_66098 = new Array(((t_66094.data != null ? t_66094.data.length : 0) * 2)); for (var i=0;i<((t_66094.data != null ? t_66094.data.length : 0) * 2);++i) {n_66098[i]={Field0: 0, Field1: null, Field2: null};}		var Tmp1 = t_66094.data; t_66094.data = n_66098; n_66098 = Tmp1;		L2: do {
			var i_66304 = 0;
			var colontmp__67854 = 0;
			colontmp__67854 = (n_66098 != null ? (n_66098.length-1) : -1);
			var res_67857 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_67857 <= colontmp__67854)) break L4;
						i_66304 = res_67857;
						var eh_66518 = n_66098[i_66304].Field0;
						if (isFilled_47465(eh_66518)) {
						var j_66527 = (eh_66518 & (t_66094.data != null ? (t_66094.data.length-1) : -1));
						L5: do {
								L6: while (true) {
								if (!isFilled_47465(t_66094.data[j_66527].Field0)) break L6;
									j_66527 = nextTry_47601(j_66527, (t_66094.data != null ? (t_66094.data.length-1) : -1));
								}
						} while(false);
						rawInsert_67190(t_66094, t_66094, "data", n_66098[i_66304].Field1, n_66098[i_66304].Field2, eh_66518, j_66527);
						}
						
						res_67857 += 1;
					}
			} while(false);
		} while(false);

	
}

function rawGetKnownHC_67862(t_67867, key_67869, hc_67871) {
	var result_67872 = 0;

	BeforeRet: do {
		var h_67881 = (hc_67871 & (t_67867.data != null ? (t_67867.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_47465(t_67867.data[h_67881].Field0)) break L2;
					if (((t_67867.data[h_67881].Field0 == hc_67871) && eqStrings(t_67867.data[h_67881].Field1, key_67869))) {
					result_67872 = h_67881;
					break BeforeRet;
					}
					
					h_67881 = nextTry_47601(h_67881, (t_67867.data != null ? (t_67867.data.length-1) : -1));
				}
		} while(false);
		result_67872 = (-1 - h_67881);
	} while (false);

	return result_67872;

}

function X5BX5Deq__64998(t_65005, key_65007, val_65009) {
		var hc_65010 = [0];
		var index_65685 = rawGet_65012(t_65005, key_65007, hc_65010, 0);
		if ((0 <= index_65685)) {
		t_65005.data[index_65685].Field2 = val_65009;
		}
		else {
			if (mustRehash_47470((t_65005.data != null ? t_65005.data.length : 0), t_65005.counter)) {
			enlarge_66087(t_65005);
			index_65685 = rawGetKnownHC_67862(t_65005, key_65007, hc_65010[0]);
			}
			
			index_65685 = (-1 - index_65685);
			rawInsert_67190(t_65005, t_65005, "data", key_65007, val_65009, hc_65010[0], index_65685);
			t_65005.counter += 1;
		}
		

	
}

function readEplets_64654(data_64656) {
	var result_64680 = [{data: null, counter: 0}];

		nimCopy(result_64680[0], initTable_64684(64), NTI64662);
		var firstRow_64811 = true;
		L1: do {
			var line_64812 = null;
			var first_68585 = 0;
			var last_68587 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!!((ConstSet2[data_64656[last_68587]] != undefined))) break L5;
									last_68587 += 1;
								}
						} while(false);
						line_64812 = (data_64656.slice(first_68585, ((last_68587 - 1))+1).concat(0));
						L6: do {
							var fields_64813 = nsuSplitCharSet(line_64812, ConstSet3, -1);
							if (firstRow_64811) {
							if (!(checkEpletHeader_64088(fields_64813))) {
							var e_64820 = null;
							e_64820 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null, up: null};
							e_64820.message = nimCopy(null, makeNimstrLit("unknown file format for eplet data"), NTI138);
							e_64820.parent = null;
							raiseException(e_64820, "ValueError");
							}
							else {
								firstRow_64811 = false;
								break L6;
							}
							
							}
							else {
							if (((line_64812 != null ? line_64812.length-1 : 0) == 0)) {
							break L6;
							}
							else {
							if (!(((fields_64813 != null ? fields_64813.length : 0) == 3))) {
							var e_64842 = null;
							e_64842 = {m_type: NTI3448, parent: null, name: null, message: null, trace: null, up: null};
							e_64842.message = nimCopy(null, (makeNimstrLit("unknown format of line: \'").slice(0,-1)).concat(line_64812.slice(0,-1),makeNimstrLit("\'")), NTI138);
							e_64842.parent = null;
							raiseException(e_64842, "ValueError");
							}
							}}
							var ep_64851 = newEplet_64038(fields_64813[0], fields_64813[1], fields_64813[2]);
							X5BX5Deq__64998(result_64680[0], ep_64851.name, ep_64851);
						} while(false);
						if ((data_64656[last_68587] == 10)) {
						last_68587 += 1;
						}
						else {
						if ((data_64656[last_68587] == 13)) {
						last_68587 += 1;
						if ((data_64656[last_68587] == 10)) {
						last_68587 += 1;
						}
						
						}
						else {
							break L2;
						}
						}
						first_68585 = last_68587;
					}
			} while(false);
		} while(false);

	return result_64680[0];

}

function initTable_69274(initialSize_69279) {
	var result_69281 = {data: null, counter: 0};

		result_69281.counter = 0;
		result_69281.data = new Array(initialSize_69279); for (var i=0;i<initialSize_69279;++i) {result_69281.data[i]={Field0: 0, Field1: null, Field2: null};}
	return result_69281;

}

function checkAlleleHeader_69212(fields_69215) {
	var result_69216 = false;

		result_69216 = eqeq__64107(fields_69215, expectedHeader_69217);

	return result_69216;

}

function hasKey_69663(t_69669, key_69671) {
	var result_69672 = false;

		var hc_69673 = [0];
		result_69672 = (0 <= rawGet_69675(t_69669, key_69671, hc_69673, 0));

	return result_69672;

}

function contains_69650(t_69656, key_69658) {
	var result_69659 = false;

	BeforeRet: do {
		result_69659 = hasKey_69663(t_69656, key_69658);
		break BeforeRet;
	} while (false);

	return result_69659;

}

function rawInsert_72253(t_72260, data_72264, data_72264_Idx, key_72266, val_72268, hc_72270, h_72272) {
		data_72264[data_72264_Idx][h_72272].Field1 = nimCopy(null, key_72266, NTI138);
		data_72264[data_72264_Idx][h_72272].Field2 = val_72268;
		data_72264[data_72264_Idx][h_72272].Field0 = hc_72270;

	
}

function enlarge_71036(t_71043) {
		var n_71047 = null;
		n_71047 = new Array(((t_71043.data != null ? t_71043.data.length : 0) * 2)); for (var i=0;i<((t_71043.data != null ? t_71043.data.length : 0) * 2);++i) {n_71047[i]={Field0: 0, Field1: null, Field2: null};}		var Tmp1 = t_71043.data; t_71043.data = n_71047; n_71047 = Tmp1;		L2: do {
			var i_71295 = 0;
			var colontmp__72971 = 0;
			colontmp__72971 = (n_71047 != null ? (n_71047.length-1) : -1);
			var res_72974 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_72974 <= colontmp__72971)) break L4;
						i_71295 = res_72974;
						var eh_71527 = n_71047[i_71295].Field0;
						if (isFilled_47465(eh_71527)) {
						var j_71536 = (eh_71527 & (t_71043.data != null ? (t_71043.data.length-1) : -1));
						L5: do {
								L6: while (true) {
								if (!isFilled_47465(t_71043.data[j_71536].Field0)) break L6;
									j_71536 = nextTry_47601(j_71536, (t_71043.data != null ? (t_71043.data.length-1) : -1));
								}
						} while(false);
						rawInsert_72253(t_71043, t_71043, "data", n_71047[i_71295].Field1, n_71047[i_71295].Field2, eh_71527, j_71536);
						}
						
						res_72974 += 1;
					}
			} while(false);
		} while(false);

	
}

function rawGetKnownHC_72979(t_72984, key_72986, hc_72988) {
	var result_72989 = 0;

	BeforeRet: do {
		var h_72998 = (hc_72988 & (t_72984.data != null ? (t_72984.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_47465(t_72984.data[h_72998].Field0)) break L2;
					if (((t_72984.data[h_72998].Field0 == hc_72988) && eqStrings(t_72984.data[h_72998].Field1, key_72986))) {
					result_72989 = h_72998;
					break BeforeRet;
					}
					
					h_72998 = nextTry_47601(h_72998, (t_72984.data != null ? (t_72984.data.length-1) : -1));
				}
		} while(false);
		result_72989 = (-1 - h_72998);
	} while (false);

	return result_72989;

}

function X5BX5Deq__70549(t_70556, key_70558, val_70560) {
		var hc_70561 = [0];
		var index_70574 = rawGet_69675(t_70556, key_70558, hc_70561, 0);
		if ((0 <= index_70574)) {
		t_70556.data[index_70574].Field2 = val_70560;
		}
		else {
			if (mustRehash_47470((t_70556.data != null ? t_70556.data.length : 0), t_70556.counter)) {
			enlarge_71036(t_70556);
			index_70574 = rawGetKnownHC_72979(t_70556, key_70558, hc_70561[0]);
			}
			
			index_70574 = (-1 - index_70574);
			rawInsert_72253(t_70556, t_70556, "data", key_70558, val_70560, hc_70561[0], index_70574);
			t_70556.counter += 1;
		}
		

	
}

function newAllele_69034(name_69036, locus_69037) {
	var result_69038 = null;

		result_69038 = {name: null, eplets: {data: null, counter: 0}, locus: 0};
		result_69038.name = nimCopy(null, name_69036, NTI138);
		init_69090(result_69038.eplets, 64);
		result_69038.locus = parseLocus_63012(locus_69037);

	return result_69038;

}

function hasKey_73958(t_73964, key_73966) {
	var result_73967 = false;

		var hc_73968 = [0];
		result_73967 = (0 <= rawGet_65012(t_73964, key_73966, hc_73968, 0));

	return result_73967;

}

function contains_73945(t_73951, key_73953) {
	var result_73954 = false;

	BeforeRet: do {
		result_73954 = hasKey_73958(t_73951, key_73953);
		break BeforeRet;
	} while (false);

	return result_73954;

}

function X5BX5D__74868(t_74874, key_74876) {
	var result_74877 = null;

		var hc_74879 = [0];
		var index_74893 = rawGet_65012(t_74874, key_74876, hc_74879, 0);
		if ((0 <= index_74893)) {
		result_74877 = t_74874.data[index_74893].Field2;
		}
		else {
			var e_75206 = null;
			e_75206 = {m_type: NTI3450, parent: null, name: null, message: null, trace: null, up: null};
			e_75206.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(key_74876), NTI138);
			e_75206.parent = null;
			raiseException(e_75206, "KeyError");
		}
		

	return result_74877;

}

function readAlleles_69240(data_69242, eplets_69246) {
							var Tmp7;

	var result_69270 = [{data: null, counter: 0}];

		nimCopy(result_69270[0], initTable_69274(64), NTI69252);
		var firstRow_69411 = true;
		L1: do {
			var line_69412 = null;
			var first_79144 = 0;
			var last_79146 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!!((ConstSet5[data_69242[last_79146]] != undefined))) break L5;
									last_79146 += 1;
								}
						} while(false);
						line_69412 = (data_69242.slice(first_79144, ((last_79146 - 1))+1).concat(0));
						L6: do {
							var fields_69413 = nsuSplitCharSet(line_69412, ConstSet6, -1);
							if (firstRow_69411) {
							if (!(checkAlleleHeader_69212(fields_69413))) {
							var e_69420 = null;
							e_69420 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
							e_69420.message = nimCopy(null, makeNimstrLit("unknown file format for allele data"), NTI138);
							e_69420.parent = null;
							raiseException(e_69420, "Exception");
							}
							else {
								firstRow_69411 = false;
								break L6;
							}
							
							}
							else {
							if (((line_69412 != null ? line_69412.length-1 : 0) == 0)) {
							break L6;
							}
							else {
							if (!(((fields_69413 != null ? fields_69413.length : 0) == 3))) {
							var e_69442 = null;
							e_69442 = {m_type: NTI3424, parent: null, name: null, message: null, trace: null, up: null};
							e_69442.message = nimCopy(null, (makeNimstrLit("unknown format of line: \'").slice(0,-1)).concat(line_69412.slice(0,-1),makeNimstrLit("\'")), NTI138);
							e_69442.parent = null;
							raiseException(e_69442, "Exception");
							}
							}}
							var allelename_69451 = nimCopy(null, fields_69413[0], NTI138);
							var epletname_69452 = nimCopy(null, fields_69413[1], NTI138);
							var locus_69453 = nimCopy(null, fields_69413[2], NTI138);
							if (!(contains_69650(result_69270[0], allelename_69451))) {
							X5BX5Deq__70549(result_69270[0], allelename_69451, newAllele_69034(allelename_69451, locus_69453));
							}
							
							if (contains_73945(eplets_69246, epletname_69452)) {
							incl_75278((Tmp7 = X5BX5D__74214(result_69270[0], allelename_69451), Tmp7[0])[Tmp7[1]].eplets, X5BX5D__74868(eplets_69246, epletname_69452));
							}
							
						} while(false);
						if ((data_69242[last_79146] == 10)) {
						last_79146 += 1;
						}
						else {
						if ((data_69242[last_79146] == 13)) {
						last_79146 += 1;
						if ((data_69242[last_79146] == 10)) {
						last_79146 += 1;
						}
						
						}
						else {
							break L2;
						}
						}
						first_79144 = last_79146;
					}
			} while(false);
		} while(false);

	return result_69270[0];

}

function fillSelect_80034() {
		var alleleA_80074 = newSeq_80040(0);
		var alleleB_80102 = newSeq_80040(0);
		var alleleC_80130 = newSeq_80040(0);
		L1: do {
			var allele_80627 = null;
			L2: do {
				var h_82224 = 0;
				var colontmp__82226 = 0;
				colontmp__82226 = (alleleABC_80008[0].data != null ? (alleleABC_80008[0].data.length-1) : -1);
				var res_82228 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_82228 <= colontmp__82226)) break L4;
							h_82224 = res_82228;
							if (isFilled_47465(alleleABC_80008[0].data[h_82224].Field0)) {
							allele_80627 = alleleABC_80008[0].data[h_82224].Field1;
							switch (allele_80627[0]) {
							case 65:
								var Tmp5 = nimCopy(null, allele_80627, NTI138);
								if (alleleA_80074 != null) { alleleA_80074.push(Tmp5); } else { alleleA_80074 = [Tmp5]; };
								break;
							case 66:
								var Tmp6 = nimCopy(null, allele_80627, NTI138);
								if (alleleB_80102 != null) { alleleB_80102.push(Tmp6); } else { alleleB_80102 = [Tmp6]; };
								break;
							case 67:
								var Tmp7 = nimCopy(null, allele_80627, NTI138);
								if (alleleC_80130 != null) { alleleC_80130.push(Tmp7); } else { alleleC_80130 = [Tmp7]; };
								break;
							default: 
								rawEcho(makeNimstrLit("unknown locus in allele "), allele_80627);
								break;
							}
							}
							
							res_82228 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		sort_80669(alleleA_80074, cmp_6041, 1);
		sort_80669(alleleB_80102, cmp_6041, 1);
		sort_80669(alleleC_80130, cmp_6041, 1);
		var alleleList_82085 = makeNimstrLit("");
		L8: do {
			var allele_82094 = null;
			var i_82234 = 0;
			var L_82236 = (alleleA_80074 != null ? alleleA_80074.length : 0);
			L9: do {
					L10: while (true) {
					if (!(i_82234 < L_82236)) break L10;
						allele_82094 = alleleA_80074[i_82234];
						if (alleleList_82085 != null) { alleleList_82085 = (alleleList_82085.slice(0, -1)).concat((makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_82094.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_82094.slice(0,-1),makeNimstrLit("</option>\x0A"))); } else { alleleList_82085 = (makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_82094.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_82094.slice(0,-1),makeNimstrLit("</option>\x0A"));};
						i_82234 += 1;
					}
			} while(false);
		} while(false);
		L11: do {
			var element_82145 = null;
			var i_82240 = 0;
			if ((i_82240 <= 1)) {
			L12: do {
					L13: while (true) {
					if (!true) break L13;
						element_82145 = recElementsA_80016[i_82240];
						document.getElementById(toJSStr(element_82145)).innerHTML = toJSStr(alleleList_82085);
						if ((1 <= i_82240)) {
						break L12;
						}
						
						i_82240 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L14: do {
			var element_82155 = null;
			var i_82244 = 0;
			if ((i_82244 <= 1)) {
			L15: do {
					L16: while (true) {
					if (!true) break L16;
						element_82155 = donElementsA_80025[i_82244];
						document.getElementById(toJSStr(element_82155)).innerHTML = toJSStr(alleleList_82085);
						if ((1 <= i_82244)) {
						break L15;
						}
						
						i_82244 += 1;
					}
			} while(false);
			}
			
		} while(false);
		alleleList_82085 = nimCopy(null, makeNimstrLit(""), NTI138);
		L17: do {
			var allele_82164 = null;
			var i_82248 = 0;
			var L_82250 = (alleleB_80102 != null ? alleleB_80102.length : 0);
			L18: do {
					L19: while (true) {
					if (!(i_82248 < L_82250)) break L19;
						allele_82164 = alleleB_80102[i_82248];
						if (alleleList_82085 != null) { alleleList_82085 = (alleleList_82085.slice(0, -1)).concat((makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_82164.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_82164.slice(0,-1),makeNimstrLit("</option>\x0A"))); } else { alleleList_82085 = (makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_82164.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_82164.slice(0,-1),makeNimstrLit("</option>\x0A"));};
						i_82248 += 1;
					}
			} while(false);
		} while(false);
		L20: do {
			var element_82177 = null;
			var i_82254 = 0;
			if ((i_82254 <= 1)) {
			L21: do {
					L22: while (true) {
					if (!true) break L22;
						element_82177 = recElementsB_80019[i_82254];
						document.getElementById(toJSStr(element_82177)).innerHTML = toJSStr(alleleList_82085);
						if ((1 <= i_82254)) {
						break L21;
						}
						
						i_82254 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L23: do {
			var element_82187 = null;
			var i_82258 = 0;
			if ((i_82258 <= 1)) {
			L24: do {
					L25: while (true) {
					if (!true) break L25;
						element_82187 = donElementsB_80028[i_82258];
						document.getElementById(toJSStr(element_82187)).innerHTML = toJSStr(alleleList_82085);
						if ((1 <= i_82258)) {
						break L24;
						}
						
						i_82258 += 1;
					}
			} while(false);
			}
			
		} while(false);
		alleleList_82085 = nimCopy(null, makeNimstrLit(""), NTI138);
		L26: do {
			var allele_82196 = null;
			var i_82262 = 0;
			var L_82264 = (alleleC_80130 != null ? alleleC_80130.length : 0);
			L27: do {
					L28: while (true) {
					if (!(i_82262 < L_82264)) break L28;
						allele_82196 = alleleC_80130[i_82262];
						if (alleleList_82085 != null) { alleleList_82085 = (alleleList_82085.slice(0, -1)).concat((makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_82196.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_82196.slice(0,-1),makeNimstrLit("</option>\x0A"))); } else { alleleList_82085 = (makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_82196.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_82196.slice(0,-1),makeNimstrLit("</option>\x0A"));};
						i_82262 += 1;
					}
			} while(false);
		} while(false);
		L29: do {
			var element_82209 = null;
			var i_82268 = 0;
			if ((i_82268 <= 1)) {
			L30: do {
					L31: while (true) {
					if (!true) break L31;
						element_82209 = recElementsC_80022[i_82268];
						document.getElementById(toJSStr(element_82209)).innerHTML = toJSStr(alleleList_82085);
						if ((1 <= i_82268)) {
						break L30;
						}
						
						i_82268 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L32: do {
			var element_82219 = null;
			var i_82272 = 0;
			if ((i_82272 <= 1)) {
			L33: do {
					L34: while (true) {
					if (!true) break L34;
						element_82219 = donElementsC_80031[i_82272];
						document.getElementById(toJSStr(element_82219)).innerHTML = toJSStr(alleleList_82085);
						if ((1 <= i_82272)) {
						break L33;
						}
						
						i_82272 += 1;
					}
			} while(false);
			}
			
		} while(false);

	
}

function getAlleleABC_82273(data_82275) {
		nimCopy(alleleABC_80008[0], readAlleles_69240(cstrToNimstr(data_82275), epletABC_80004[0]), NTI69252);
		rawEcho(makeNimstrLit("alleles loaded from \'"), makeNimstrLit("data/epitopes/abc_alleles.txt"), makeNimstrLit("\'"));
		fillSelect_80034();

	
}

function getEpletABC_82278(data_82280) {
		nimCopy(epletABC_80004[0], readEplets_64654(cstrToNimstr(data_82280)), NTI64662);
		rawEcho(makeNimstrLit("eplets loaded from \'"), makeNimstrLit("data/epitopes/abc_eplets.txt"), makeNimstrLit("\'"));
		makeRequest_62001("data/epitopes/abc_alleles.txt", getAlleleABC_82273);

	
}
makeRequest_62001("data/epitopes/abc_eplets.txt", getEpletABC_82278);
