/* Generated by the Nim Compiler v1.0.4 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI64907 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI194016 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI194015 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI194523 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI194520 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI194517 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI182917 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI182914 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182911 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI182896 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI182893 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI182890 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI161522 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI176044 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI177015 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI177021 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI177017 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI45017 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI178268 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI178265 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI178262 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3630 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3654 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI208924 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
NTI208924.base = NTI138;
var NNI3654 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3654.node = NNI3654;
var NNI3652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3652.node = NNI3652;
var NNI3630 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3630.node = NNI3630;
NTI3708.base = NTI3626;
NTI3714.base = NTI3626;
var NNI3626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI114, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3714, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3630.base = NTI3626;
NTI3652.base = NTI3630;
NTI3654.base = NTI3652;
var NNI177015 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI177015, name: "epVerified", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI177015, name: "epVerifiedPair", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI177015, name: "epOther", len: 0, sons: null}}};
NTI177015.node = NNI177015;
var NNI176044 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI176044, name: "ABC", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI176044, name: "DRB", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI176044, name: "DQA1", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI176044, name: "DQB1", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI176044, name: "DPA1", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI176044, name: "DPB1", len: 0, sons: null}}};
NTI176044.node = NNI176044;
var NNI177021 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "evidence", len: 0, typ: NTI177015, name: "evidence", sons: null}, 
{kind: 1, offset: "locus", len: 0, typ: NTI176044, name: "locus", sons: null}]};
NTI177021.node = NNI177021;
NTI177017.base = NTI177021;
var NNI178268 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI45017, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI177017, name: "Field1", sons: null}]};
NTI178268.node = NNI178268;
NTI178265.base = NTI178268;
var NNI178262 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI178265, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI178262.node = NNI178262;
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
var NNI3628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3628.node = NNI3628;
NTI3628.base = NTI3626;
NTI3650.base = NTI3628;
NTI161522.base = NTI138;
var NNI182896 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI45017, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI177017, name: "Field2", sons: null}]};
NTI182896.node = NNI182896;
NTI182893.base = NTI182896;
var NNI182890 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI182893, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI182890.node = NNI182890;
var NNI182917 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI45017, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI176044, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI182890, name: "Field2", sons: null}]};
NTI182917.node = NNI182917;
NTI182914.base = NTI182917;
var NNI182911 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI182914, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI182911.node = NNI182911;
var NNI194016 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}, 
{kind: 1, offset: "eplets", len: 0, typ: NTI178262, name: "eplets", sons: null}, 
{kind: 1, offset: "locus", len: 0, typ: NTI176044, name: "locus", sons: null}]};
NTI194016.node = NNI194016;
NTI194015.base = NTI194016;
var NNI194523 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI45017, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI194015, name: "Field2", sons: null}]};
NTI194523.node = NNI194523;
NTI194520.base = NTI194523;
var NNI194517 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI194520, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI194517.node = NNI194517;
var NNI64907 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI104, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI104, name: "b", sons: null}]};
NTI64907.node = NNI64907;

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_24827, src_24828, ti_24829) {
	var result_25019 = null;

		switch (ti_24829.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_24801(ti_24829))) {
			result_25019 = src_24828;
			}
			else {
				result_25019 = [src_24828[0], src_24828[1]];
			}
			
			break;
		case 19:
			      if (dest_24827 === null || dest_24827 === undefined) {
        dest_24827 = {};
      }
      else {
        for (var key in dest_24827) { delete dest_24827[key]; }
      }
      for (var key in src_24828) { dest_24827[key] = src_24828[key]; }
      result_25019 = dest_24827;
    
			break;
		case 18:
		case 17:
			if (!((ti_24829.base == null))) {
			result_25019 = nimCopy(dest_24827, src_24828, ti_24829.base);
			}
			else {
			if ((ti_24829.kind == 17)) {
			result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {m_type: ti_24829} : dest_24827;
			}
			else {
				result_25019 = (dest_24827 === null || dest_24827 === undefined) ? {} : dest_24827;
			}
			}
			nimCopyAux(result_25019, src_24828, ti_24829.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_24828 === null) {
        result_25019 = null;
      }
      else {
        if (dest_24827 === null || dest_24827 === undefined) {
          dest_24827 = new Array(src_24828.length);
        }
        else {
          dest_24827.length = src_24828.length;
        }
        result_25019 = dest_24827;
        for (var i = 0; i < src_24828.length; ++i) {
          result_25019[i] = nimCopy(result_25019[i], src_24828[i], ti_24829.base);
        }
      }
    
			break;
		case 28:
			      if (src_24828 !== null) {
        result_25019 = src_24828.slice(0);
      }
    
			break;
		default: 
			result_25019 = src_24828;
			break;
		}

	return result_25019;

}

function cstrToNimstr(c_23287) {
		  var ln = c_23287.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_23287.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_23287.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_23304) {
										var Tmp5;
						var Tmp7;

	var result_23305 = null;

		var res_23363 = new_seq_23336((s_23304 != null ? s_23304.length : 0));
		var i_23365 = 0;
		var j_23367 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_23365 < (s_23304 != null ? s_23304.length : 0))) break L2;
					var c_23368 = s_23304[i_23365];
					if ((c_23368 < 128)) {
					res_23363[j_23367] = String.fromCharCode(c_23368);
					i_23365 += 1;
					}
					else {
						var helper_23391 = new_seq_23336(0);
						L3: do {
								L4: while (true) {
								if (!true) break L4;
									var code_23392 = c_23368.toString(16);
									if (((code_23392 != null ? code_23392.length : 0) == 1)) {
									if (helper_23391 != null) { helper_23391.push("%0"); } else { helper_23391 = ["%0"]; };
									}
									else {
									if (helper_23391 != null) { helper_23391.push("%"); } else { helper_23391 = ["%"]; };
									}
									
									if (helper_23391 != null) { helper_23391.push(code_23392); } else { helper_23391 = [code_23392]; };
									i_23365 += 1;
										if (((s_23304 != null ? s_23304.length : 0) <= i_23365)) Tmp5 = true; else {											Tmp5 = (s_23304[i_23365] < 128);										}									if (Tmp5) {
									break L3;
									}
									
									c_23368 = s_23304[i_23365];
								}
						} while(false);
++excHandler;
						Tmp7 = framePtr;
						try {
						res_23363[j_23367] = decodeURIComponent(helper_23391.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
						framePtr = Tmp7;
						res_23363[j_23367] = helper_23391.join("");
						lastJSError = prevJSError;
						} finally {
						framePtr = Tmp7;
						}
					}
					
					j_23367 += 1;
				}
		} while(false);
		if (res_23363 === null) res_23363 = [];
               if (res_23363.length < j_23367) { for (var i=res_23363.length;i<j_23367;++i) res_23363.push(null); }
               else { res_23363.length = j_23367; };
		result_23305 = res_23363.join("");

	return result_23305;

}

function eqStrings(a_23641, b_23642) {
		    if (a_23641 == b_23642) return true;
    if (a_23641 === null && b_23642.length == 0) return true;
    if (b_23642 === null && a_23641.length == 0) return true;
    if ((!a_23641) || (!b_23642)) return false;
    var alen = a_23641.length;
    if (alen != b_23642.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_23641[i] != b_23642[i]) return false;
    return true;
  

	
}

function makeNimstrLit(c_23270) {
		  var ln = c_23270.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_23270.charCodeAt(i);
  }
  return result;
  

	
}

function raiseException(e_21618, ename_21619) {
		e_21618.name = ename_21619;
		if ((excHandler == 0)) {
		unhandledException(e_21618);
		}
		
		throw e_21618;

	
}
		var rec_elements_203089 = [[makeNimstrLit("recA1"), makeNimstrLit("recA2")], [makeNimstrLit("recB1"), makeNimstrLit("recB2")], [makeNimstrLit("recC1"), makeNimstrLit("recC2")], [makeNimstrLit("recDRB1_1"), makeNimstrLit("recDRB1_2")], [makeNimstrLit("recDRB345_1"), makeNimstrLit("recDRB345_2")], [makeNimstrLit("recDQA1_1"), makeNimstrLit("recDQA1_2")], [makeNimstrLit("recDQB1_1"), makeNimstrLit("recDQB1_2")], [makeNimstrLit("recDPA1_1"), makeNimstrLit("recDPA1_2")], [makeNimstrLit("recDPB1_1"), makeNimstrLit("recDPB1_2")]];
		var don_elements_203128 = [[makeNimstrLit("donA1"), makeNimstrLit("donA2")], [makeNimstrLit("donB1"), makeNimstrLit("donB2")], [makeNimstrLit("donC1"), makeNimstrLit("donC2")], [makeNimstrLit("donDRB1_1"), makeNimstrLit("donDRB1_2")], [makeNimstrLit("donDRB345_1"), makeNimstrLit("donDRB345_2")], [makeNimstrLit("donDQA1_1"), makeNimstrLit("donDQA1_2")], [makeNimstrLit("donDQB1_1"), makeNimstrLit("donDQB1_2")], [makeNimstrLit("donDPA1_1"), makeNimstrLit("donDPA1_2")], [makeNimstrLit("donDPB1_1"), makeNimstrLit("donDPB1_2")]];

function nimMax(a_24221, b_24222) {
		var Tmp1;

	var result_24223 = 0;

	BeforeRet: do {
		if ((b_24222 <= a_24221)) {
		Tmp1 = a_24221;
		}
		else {
		Tmp1 = b_24222;
		}
		
		result_24223 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24223;

}

function cmpStrings(a_23605, b_23606) {
		    if (a_23605 == b_23606) return 0;
    if (!a_23605) return -1;
    if (!b_23606) return 1;
    for (var i = 0; i < a_23605.length && i < b_23606.length; i++) {
      var result = a_23605[i] - b_23606[i];
      if (result != 0) return result;
    }
    return a_23605.length - b_23606.length;
  

	
}

function reprEnum(e_25880, typ_25881) {
	var result_25882 = null;

		if (!(is_undefined_25883(typ_25881.node.sons[e_25880]))) {
		result_25882 = nimCopy(null, makeNimstrLit(typ_25881.node.sons[e_25880].name), NTI138);
		}
		else {
			result_25882 = nimCopy(null, (cstrToNimstr((e_25880)+"") || []).concat(makeNimstrLit(" (invalid data!)") || []), NTI138);
		}
		

	return result_25882;

}

function mnewString(len_23463) {
		    return new Array(len_23463);
  

	
}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

	
}
var ConstSet2 = setConstr(13, 10);

function nimMin(a_24203, b_24204) {
		var Tmp1;

	var result_24205 = 0;

	BeforeRet: do {
		if ((a_24203 <= b_24204)) {
		Tmp1 = a_24203;
		}
		else {
		Tmp1 = b_24204;
		}
		
		result_24205 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_24205;

}
var ConstSet3 = setConstr(32, 9, 11, 13, 10, 12);
		var expected_header_177358 = [makeNimstrLit("eplet"), makeNimstrLit("evidence"), makeNimstrLit("locus")];
var ConstSet4 = setConstr([65, 90]);
var ConstSet5 = setConstr(13, 10);
var ConstSet6 = setConstr(32, 9, 11, 13, 10, 12);
		var expected_header_194466 = [makeNimstrLit("allele"), makeNimstrLit("eplet"), makeNimstrLit("locus")];
						var rec_elements_a_203053 = [makeNimstrLit("recA1"), makeNimstrLit("recA2")];
						var don_elements_a_203092 = [makeNimstrLit("donA1"), makeNimstrLit("donA2")];
						var rec_elements_b_203056 = [makeNimstrLit("recB1"), makeNimstrLit("recB2")];
						var don_elements_b_203095 = [makeNimstrLit("donB1"), makeNimstrLit("donB2")];
						var rec_elements_c_203059 = [makeNimstrLit("recC1"), makeNimstrLit("recC2")];
						var don_elements_c_203098 = [makeNimstrLit("donC1"), makeNimstrLit("donC2")];
						var rec_elements_drb1_203062 = [makeNimstrLit("recDRB1_1"), makeNimstrLit("recDRB1_2")];
						var don_elements_drb1_203101 = [makeNimstrLit("donDRB1_1"), makeNimstrLit("donDRB1_2")];
						var rec_elements_drb345_203065 = [makeNimstrLit("recDRB345_1"), makeNimstrLit("recDRB345_2")];
						var don_elements_drb345_203104 = [makeNimstrLit("donDRB345_1"), makeNimstrLit("donDRB345_2")];
						var rec_elements_dqa1_203068 = [makeNimstrLit("recDQA1_1"), makeNimstrLit("recDQA1_2")];
						var don_elements_dqa1_203107 = [makeNimstrLit("donDQA1_1"), makeNimstrLit("donDQA1_2")];
						var rec_elements_dqb1_203071 = [makeNimstrLit("recDQB1_1"), makeNimstrLit("recDQB1_2")];
						var don_elements_dqb1_203110 = [makeNimstrLit("donDQB1_1"), makeNimstrLit("donDQB1_2")];
						var rec_elements_dpa1_203074 = [makeNimstrLit("recDPA1_1"), makeNimstrLit("recDPA1_2")];
						var don_elements_dpa1_203113 = [makeNimstrLit("donDPA1_1"), makeNimstrLit("donDPA1_2")];
						var rec_elements_dpb1_203077 = [makeNimstrLit("recDPB1_1"), makeNimstrLit("recDPB1_2")];
						var don_elements_dpb1_203116 = [makeNimstrLit("donDPB1_1"), makeNimstrLit("donDPB1_2")];
var ConstSet7 = setConstr(13, 10);
var ConstSet8 = setConstr(32, 9, 11, 13, 10, 12);
var nim_program_result = 0;
var global_raise_hook_18618 = [null];
var local_raise_hook_18623 = [null];
var out_of_mem_hook_18626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var object_id_45237 = [0];
var eplets_table_203029 = [{data: null, counter: 0}];
var alleles_table_203037 = [{data: null, counter: 0}];
var mm_possible_eplets_203042 = [{data: null, counter: 0}];

function is_fat_pointer_24801(ti_24803) {
	var result_24804 = false;

	BeforeRet: do {
		result_24804 = !((ConstSet1[ti_24803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_24804;

}

function nimCopyAux(dest_24832, src_24833, n_24835) {
		switch (n_24835.kind) {
		case 0:
			break;
		case 1:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_24835.sons.length; i++) {
      nimCopyAux(dest_24832, src_24833, n_24835.sons[i]);
    }
    
			break;
		case 3:
			      dest_24832[n_24835.offset] = nimCopy(dest_24832[n_24835.offset], src_24833[n_24835.offset], n_24835.typ);
      for (var i = 0; i < n_24835.sons.length; ++i) {
        nimCopyAux(dest_24832, src_24833, n_24835.sons[i][1]);
      }
    
			break;
		}

	
}

function new_seq_23336(len_23339) {
	var result_23341 = null;

		result_23341 = new Array(len_23339); for (var i=0;i<len_23339;++i) {result_23341[i]=null;}
	return result_23341;

}

function imul_45768(a_45770, b_45771) {
	var result_45772 = 0;

		var mask_45773 = 65535;
		var a_hi_45786 = (((a_45770 >>> 0) >>> 16) & mask_45773);
		var a_lo_45792 = (a_45770 & mask_45773);
		var b_hi_45805 = (((b_45771 >>> 0) >>> 16) & mask_45773);
		var b_lo_45811 = (b_45771 & mask_45773);
		result_45772 = ((((a_lo_45792 * b_lo_45811) >>> 0) + (((((a_hi_45786 * b_lo_45811) >>> 0) + ((a_lo_45792 * b_hi_45805) >>> 0)) >>> 0) << 16)) >>> 0);

	return result_45772;

}

function rotl32_46001(x_46003, r_46004) {
	var result_46005 = 0;

		result_46005 = ((x_46003 << r_46004) | ((x_46003 >>> 0) >>> (32 - r_46004)));

	return result_46005;

}

function murmur_hash_46037(x_46040) {
	var result_46041 = 0;

	BeforeRet: do {
		var size_46051 = (x_46040 != null ? x_46040.length : 0);
		var step_size_46053 = 4;
		var n_46054 = Math.trunc(size_46051 / step_size_46053);
		var h1_46055 = 0;
		var i_46057 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_46057 < (n_46054 * step_size_46053))) break L2;
					var k1_46058 = 0;
					var j_46059 = step_size_46053;
					L3: do {
							L4: while (true) {
							if (!(0 < j_46059)) break L4;
								j_46059 -= 1;
								k1_46058 = ((k1_46058 << 8) | x_46040[(i_46057 + j_46059)]);
							}
					} while(false);
					i_46057 += step_size_46053;
					k1_46058 = imul_45768(k1_46058, 3432918353);
					k1_46058 = rotl32_46001(k1_46058, 15);
					k1_46058 = imul_45768(k1_46058, 461845907);
					h1_46055 = (h1_46055 ^ k1_46058);
					h1_46055 = rotl32_46001(h1_46055, 13);
					h1_46055 = ((((h1_46055 * 5) >>> 0) + 3864292196) >>> 0);
				}
		} while(false);
		var k1_46223 = 0;
		var rem_46224 = Math.trunc(size_46051 % step_size_46053);
		L5: do {
				L6: while (true) {
				if (!(0 < rem_46224)) break L6;
					rem_46224 -= 1;
					k1_46223 = ((k1_46223 << 8) | x_46040[(i_46057 + rem_46224)]);
				}
		} while(false);
		k1_46223 = imul_45768(k1_46223, 3432918353);
		k1_46223 = rotl32_46001(k1_46223, 15);
		k1_46223 = imul_45768(k1_46223, 461845907);
		h1_46055 = (h1_46055 ^ k1_46223);
		h1_46055 = (h1_46055 ^ size_46051);
		h1_46055 = (h1_46055 ^ ((h1_46055 >>> 0) >>> 16));
		h1_46055 = imul_45768(h1_46055, 2246822507);
		h1_46055 = (h1_46055 ^ ((h1_46055 >>> 0) >>> 13));
		h1_46055 = imul_45768(h1_46055, 3266489909);
		h1_46055 = (h1_46055 ^ ((h1_46055 >>> 0) >>> 16));
		result_46041 = (h1_46055|0);
		break BeforeRet;
	} while (false);

	return result_46041;

}

function hash_46814(x_46816) {
	var result_46817 = 0;

		result_46817 = murmur_hash_46037((x_46816.slice(0, (x_46816 != null ? (x_46816.length-1) : -1)+1)));

	return result_46817;

}

function is_filled_67018(hcode_67020) {
	var result_67021 = false;

		result_67021 = !((hcode_67020 == 0));

	return result_67021;

}

function next_try_67035(h_67037, max_hash_67038) {
	var result_67039 = 0;

		result_67039 = ((h_67037 + 1) & max_hash_67038);

	return result_67039;

}

function raw_get_195379(t_195383, key_195384, hc_195385, hc_195385_Idx) {
						var Tmp3;

	var result_195386 = 0;

	BeforeRet: do {
		hc_195385[hc_195385_Idx] = hash_46814(key_195384);
		if ((hc_195385[hc_195385_Idx] == 0)) {
		hc_195385[hc_195385_Idx] = 314159265;
		}
		
		if (((t_195383.data != null ? t_195383.data.length : 0) == 0)) {
		result_195386 = -1;
		break BeforeRet;
		}
		
		var h_195559 = (hc_195385[hc_195385_Idx] & (t_195383.data != null ? (t_195383.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_67018(t_195383.data[h_195559].Field0)) break L2;
						if (!(t_195383.data[h_195559].Field0 == hc_195385[hc_195385_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_195383.data[h_195559].Field1, key_195384);						}					if (Tmp3) {
					result_195386 = h_195559;
					break BeforeRet;
					}
					
					h_195559 = next_try_67035(h_195559, (t_195383.data != null ? (t_195383.data.length-1) : -1));
				}
		} while(false);
		result_195386 = (-1 - h_195559);
	} while (false);

	return result_195386;

}

function add_18638(x_18641, x_18641_Idx, y_18642) {
		      if (x_18641[x_18641_Idx] === null) { x_18641[x_18641_Idx] = []; }
      var off = x_18641[x_18641_Idx].length;
      x_18641[x_18641_Idx].length += y_18642.length;
      for (var i = 0; i < y_18642.length; ++i) {
        x_18641[x_18641_Idx][off+i] = y_18642.charCodeAt(i);
      }
    

	
}

function unhandledException(e_21529) {
		var buf_21530 = [[]];
		if (!(((e_21529.message != null ? e_21529.message.length : 0) == 0))) {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(e_21529.message); } else { buf_21530[0] = e_21529.message.slice(); };
		}
		else {
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_21530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit(" [")); } else { buf_21530[0] = makeNimstrLit(" ["); };
		add_18638(buf_21530, 0, e_21529.name);
		if (buf_21530[0] != null) { buf_21530[0] = (buf_21530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_21530[0] = makeNimstrLit("]\x0A"); };
		var cbuf_21601 = toJSStr(buf_21530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_21601);
  }
  else {
    throw cbuf_21601;
  }
  

	
}

function HEX5BHEX5D_200782(t_200788, key_200789) {
	var result_200791 = null;
	var result_200791_Idx = 0;

		var hcHEX60gensym67565_200792 = [0];
		var indexHEX60gensym67566_200801 = raw_get_195379(t_200788, key_200789, hcHEX60gensym67565_200792, 0);
		if ((0 <= indexHEX60gensym67566_200801)) {
		result_200791 = t_200788.data[indexHEX60gensym67566_200801]; result_200791_Idx = "Field2";
		}
		else {
			var eHEX60gensym201003_201203 = null;
			eHEX60gensym201003_201203 = {m_type: NTI3654, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym201003_201203.message = nimCopy(null, (makeNimstrLit("key not found: ") || []).concat(key_200789 || []), NTI138);
			eHEX60gensym201003_201203.parent = null;
			raiseException(eHEX60gensym201003_201203, "KeyError");
		}
		

	return [result_200791, result_200791_Idx];

}

function get_alleles_208919(elements_208925) {
										var Tmp7;

	var result_208927 = null;

		L1: do {
			var element_group_209014 = [null, null];
			var i_211651 = 0;
			var l_211652 = (elements_208925 != null ? elements_208925.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_211651 < l_211652)) break L3;
						nimCopy(element_group_209014, elements_208925[i_211651], NTI208924);
						L4: do {
							var element_209022 = null;
							var i_211648 = 0;
							if ((i_211648 <= 1)) {
							L5: do {
									L6: while (true) {
									if (!true) break L6;
										element_209022 = element_group_209014[i_211648];
										var allele_str_209023 = cstrToNimstr(document.getElementById(toJSStr(element_209022)).value);
										if (!(eqStrings(allele_str_209023, []))) {
										if (result_208927 != null) { result_208927.push((Tmp7 = HEX5BHEX5D_200782(alleles_table_203037[0], allele_str_209023), Tmp7)[0][Tmp7[1]]); } else { result_208927 = [(Tmp7 = HEX5BHEX5D_200782(alleles_table_203037[0], allele_str_209023), Tmp7)[0][Tmp7[1]]]; };
										}
										
										if ((1 <= i_211648)) {
										break L5;
										}
										
										i_211648 += 1;
									}
							} while(false);
							}
							
						} while(false);
						i_211651 += 1;
					}
			} while(false);
		} while(false);

	return result_208927;

}

function init_194075(s_194080, initial_size_194081) {
		s_194080.counter = 0;
		s_194080.data = new Array(initial_size_194081); for (var i=0;i<initial_size_194081;++i) {s_194080.data[i]={Field0: 0, Field1: null};}
	
}

function init_hash_set_209239(initial_size_209242) {
	var result_209244 = [{data: null, counter: 0}];

		init_194075(result_209244[0], initial_size_209242);

	return result_209244[0];

}

function is_filled_71418(hcode_71420) {
	var result_71421 = false;

		result_71421 = !((hcode_71420 == 0));

	return result_71421;

}

function HEX21HEX26_45031(h_45033, val_45034) {
	var result_45035 = 0;

		var h_45036 = (h_45033 >>> 0);
		var val_45037 = (val_45034 >>> 0);
		var res_45043 = ((h_45036 + val_45037) >>> 0);
		res_45043 = ((res_45043 + (res_45043 << 10)) >>> 0);
		res_45043 = (res_45043 ^ ((res_45043 >>> 0) >>> 6));
		result_45035 = (res_45043|0);

	return result_45035;

}

function hash_177285(x_177288) {
	var result_177289 = 0;

		result_177289 = x_177288;

	return result_177289;

}

function hash_177307(x_177310) {
	var result_177311 = 0;

		result_177311 = x_177310;

	return result_177311;

}

function HEX21HEX24_45081(h_45083) {
	var result_45084 = 0;

		var h_45085 = (h_45083 >>> 0);
		var res_45098 = ((h_45085 + (h_45085 << 3)) >>> 0);
		res_45098 = (res_45098 ^ ((res_45098 >>> 0) >>> 11));
		res_45098 = ((res_45098 + (res_45098 << 15)) >>> 0);
		result_45084 = (res_45098|0);

	return result_45084;

}

function hash_177278(ep_177280) {
	var result_177281 = 0;

		var h_177282 = 0;
		h_177282 = HEX21HEX26_45031(h_177282, hash_46814(ep_177280.name));
		h_177282 = HEX21HEX26_45031(h_177282, hash_177285(ep_177280.evidence));
		h_177282 = HEX21HEX26_45031(h_177282, hash_177307(ep_177280.locus));
		result_177281 = HEX21HEX24_45081(h_177282);

	return result_177281;

}

function next_try_71435(h_71437, max_hash_71438) {
	var result_71439 = 0;

		result_71439 = ((h_71437 + 1) & max_hash_71438);

	return result_71439;

}

function raw_get_179226(t_179230, key_179231, hc_179232, hc_179232_Idx) {
						var Tmp3;

	var result_179233 = 0;

	BeforeRet: do {
		hc_179232[hc_179232_Idx] = hash_177278(key_179231);
		if ((hc_179232[hc_179232_Idx] == 0)) {
		hc_179232[hc_179232_Idx] = 314159265;
		}
		
		if (((t_179230.data != null ? t_179230.data.length : 0) == 0)) {
		result_179233 = -1;
		break BeforeRet;
		}
		
		var h_179404 = (hc_179232[hc_179232_Idx] & (t_179230.data != null ? (t_179230.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_71418(t_179230.data[h_179404].Field0)) break L2;
						if (!(t_179230.data[h_179404].Field0 == hc_179232[hc_179232_Idx])) Tmp3 = false; else {							Tmp3 = (t_179230.data[h_179404].Field1 == key_179231);						}					if (Tmp3) {
					result_179233 = h_179404;
					break BeforeRet;
					}
					
					h_179404 = next_try_71435(h_179404, (t_179230.data != null ? (t_179230.data.length-1) : -1));
				}
		} while(false);
		result_179233 = (-1 - h_179404);
	} while (false);

	return result_179233;

}

function must_rehash_71453(length_71455, counter_71456) {
	var result_71457 = false;

		result_71457 = (((length_71455 * 2) < (counter_71456 * 3)) || ((length_71455 - counter_71456) < 4));

	return result_71457;

}

function raw_get_known_hc_180801(t_180805, key_180806, hc_180807) {
	var result_180808 = 0;

	BeforeRet: do {
		if (((t_180805.data != null ? t_180805.data.length : 0) == 0)) {
		result_180808 = -1;
		break BeforeRet;
		}
		
		var h_180978 = (hc_180807 & (t_180805.data != null ? (t_180805.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_71418(t_180805.data[h_180978].Field0)) break L2;
					if (((t_180805.data[h_180978].Field0 == hc_180807) && (t_180805.data[h_180978].Field1 == key_180806))) {
					result_180808 = h_180978;
					break BeforeRet;
					}
					
					h_180978 = next_try_71435(h_180978, (t_180805.data != null ? (t_180805.data.length-1) : -1));
				}
		} while(false);
		result_180808 = (-1 - h_180978);
	} while (false);

	return result_180808;

}

function raw_insert_181832(s_181837, data_181840, data_181840_Idx, key_181841, hc_181842, h_181843) {
		if (((data_181840[data_181840_Idx] != null ? data_181840[data_181840_Idx].length : 0) == 0)) {
		s_181837.counter = 0;
		s_181837.data = new Array(64); for (var i=0;i<64;++i) {s_181837.data[i]={Field0: 0, Field1: null};}		}
		
		data_181840[data_181840_Idx][h_181843].Field1 = key_181841;
		data_181840[data_181840_Idx][h_181843].Field0 = hc_181842;

	
}

function enlarge_180113(s_180118) {
		var n_180123 = null;
		n_180123 = new Array(((s_180118.data != null ? s_180118.data.length : 0) * 2)); for (var i=0;i<((s_180118.data != null ? s_180118.data.length : 0) * 2);++i) {n_180123[i]={Field0: 0, Field1: null};}		var Tmp1 = s_180118.data; s_180118.data = n_180123; n_180123 = Tmp1;		L2: do {
			var i_180313 = 0;
			var colontmp__211688 = 0;
			colontmp__211688 = (n_180123 != null ? (n_180123.length-1) : -1);
			var res_211693 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_211693 <= colontmp__211688)) break L4;
						i_180313 = res_211693;
						if (is_filled_71418(n_180123[i_180313].Field0)) {
						var j_181492 = (-1 - raw_get_known_hc_180801(s_180118, n_180123[i_180313].Field1, n_180123[i_180313].Field0));
						raw_insert_181832(s_180118, s_180118, "data", n_180123[i_180313].Field1, n_180123[i_180313].Field0, j_181492);
						}
						
						res_211693 += 1;
					}
			} while(false);
		} while(false);

	
}

function incl_178670(s_178675, key_178676) {
		if (((s_178675.data != null ? s_178675.data.length : 0) == 0)) {
		s_178675.counter = 0;
		s_178675.data = new Array(64); for (var i=0;i<64;++i) {s_178675.data[i]={Field0: 0, Field1: null};}		}
		
		var hc_179208 = [0];
		var index_179919 = raw_get_179226(s_178675, key_178676, hc_179208, 0);
		if ((index_179919 < 0)) {
		if (must_rehash_71453((s_178675.data != null ? s_178675.data.length : 0), s_178675.counter)) {
		enlarge_180113(s_178675);
		index_179919 = raw_get_known_hc_180801(s_178675, key_178676, hc_179208[0]);
		}
		
		raw_insert_181832(s_178675, s_178675, "data", key_178676, hc_179208[0], (-1 - index_179919));
		s_178675.counter += 1;
		}
		

	
}

function incl_209491(s_209496, other_209498) {
		L1: do {
			var item_209856 = null;
			L2: do {
				var h_211675 = 0;
				var colontmp__211676 = 0;
				colontmp__211676 = (other_209498.data != null ? (other_209498.data.length-1) : -1);
				var res_211677 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_211677 <= colontmp__211676)) break L4;
							h_211675 = res_211677;
							if (is_filled_71418(other_209498.data[h_211675].Field0)) {
							item_209856 = other_209498.data[h_211675].Field1;
							incl_178670(s_209496, item_209856);
							}
							
							res_211677 += 1;
						}
				} while(false);
			} while(false);
		} while(false);

	
}

function get_eplets_209229(al_209232) {
	var result_209237 = [{data: null, counter: 0}];

		nimCopy(result_209237[0], init_hash_set_209239(64), NTI178262);
		L1: do {
			var allele_209414 = null;
			var i_211663 = 0;
			var l_211664 = (al_209232 != null ? al_209232.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_211663 < l_211664)) break L3;
						allele_209414 = al_209232[i_211663];
						incl_209491(result_209237[0], allele_209414.eplets);
						i_211663 += 1;
					}
			} while(false);
		} while(false);

	return result_209237[0];

}

function contains_210344(s_210348, key_210349) {
	var result_210350 = false;

		var hc_210351 = [0];
		var index_210377 = raw_get_179226(s_210348, key_210349, hc_210351, 0);
		result_210350 = (0 <= index_210377);

	return result_210350;

}

function difference_210176(s1_210180, s2_210182) {
	var result_210184 = [{data: null, counter: 0}];

		nimCopy(result_210184[0], init_hash_set_209239(64), NTI178262);
		L1: do {
			var item_210196 = null;
			L2: do {
				var h_211701 = 0;
				var colontmp__211702 = 0;
				colontmp__211702 = (s1_210180.data != null ? (s1_210180.data.length-1) : -1);
				var res_211703 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_211703 <= colontmp__211702)) break L4;
							h_211701 = res_211703;
							if (is_filled_71418(s1_210180.data[h_211701].Field0)) {
							item_210196 = s1_210180.data[h_211701].Field1;
							if (!(contains_210344(s2_210182, item_210196))) {
							incl_178670(result_210184[0], item_210196);
							}
							
							}
							
							res_211703 += 1;
						}
				} while(false);
			} while(false);
		} while(false);

	return result_210184[0];

}

function HEX2D_210152(s1_210156, s2_210158) {
	var result_210160 = {data: null, counter: 0};

		nimCopy(result_210160, difference_210176(s1_210156, s2_210158), NTI178262);

	return result_210160;

}

function get_abver_eplets_210029(eplets_210035) {
	var result_210040 = [{data: null, counter: 0}];

		L1: do {
			var eplet_210046 = null;
			L2: do {
				var h_211731 = 0;
				var colontmp__211732 = 0;
				colontmp__211732 = (eplets_210035.data != null ? (eplets_210035.data.length-1) : -1);
				var res_211733 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_211733 <= colontmp__211732)) break L4;
							h_211731 = res_211733;
							if (is_filled_71418(eplets_210035.data[h_211731].Field0)) {
							eplet_210046 = eplets_210035.data[h_211731].Field1;
							switch (eplet_210046.evidence) {
							case 0:
							case 1:
								incl_178670(result_210040[0], eplet_210046);
								break;
							case 2:
								break;
							}
							}
							
							res_211733 += 1;
						}
				} while(false);
			} while(false);
		} while(false);

	return result_210040[0];

}

function card_210518(s_210522) {
	var result_210523 = 0;

		result_210523 = s_210522.counter;

	return result_210523;

}

function len_210694(s_210698) {
	var result_210699 = 0;

		result_210699 = s_210698.counter;

	return result_210699;

}

function sys_fatal_15062(message_15066) {
		var e_15203 = null;
		e_15203 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_15203.message = nimCopy(null, message_15066, NTI138);
		raiseException(e_15203, "AssertionError");

	
}

function raise_assert_15058(msg_15060) {
		sys_fatal_15062(msg_15060);

	
}

function failed_assert_impl_15266(msg_15268) {
		raise_assert_15058(msg_15268);

	
}

function HEX2A_64019(x_64021, order_64022) {
	var result_64023 = 0;

		var y_64028 = (order_64022 - 1);
		result_64023 = ((x_64021 ^ y_64028) - y_64028);

	return result_64023;

}

function merge_204555(a_204560, b_204563, lo_204564, m_204565, hi_204566, cmp_204570, order_204571) {
	BeforeRet: do {
		if ((HEX2A_64019(cmp_204570(a_204560[m_204565], a_204560[(m_204565 + 1)]), order_204571) <= 0)) {
		break BeforeRet;
		}
		
		var j_204572 = lo_204564;
		var bb_204802 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_204572 <= m_204565)) break L2;
					b_204563[bb_204802] = a_204560[j_204572];
					bb_204802 += 1;
					j_204572 += 1;
				}
		} while(false);
		var i_205014 = 0;
		var k_205015 = lo_204564;
		L3: do {
				L4: while (true) {
				if (!((k_205015 < j_204572) && (j_204572 <= hi_204566))) break L4;
					if ((HEX2A_64019(cmp_204570(b_204563[i_205014], a_204560[j_204572]), order_204571) <= 0)) {
					a_204560[k_205015] = b_204563[i_205014];
					i_205014 += 1;
					}
					else {
						a_204560[k_205015] = a_204560[j_204572];
						j_204572 += 1;
					}
					
					k_205015 += 1;
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_205015 < j_204572)) break L6;
					a_204560[k_205015] = b_204563[i_205014];
					k_205015 += 1;
					i_205014 += 1;
				}
		} while(false);
	} while (false);

	
}

function sort_204521(a_204526, cmp_204530, order_204531) {
		var n_204536 = (a_204526 != null ? a_204526.length : 0);
		var b_204538 = null;
		b_204538 = new Array(Math.trunc(n_204536 / 2)); for (var i=0;i<Math.trunc(n_204536 / 2);++i) {b_204538[i]=null;}		var s_204550 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_204550 < n_204536)) break L2;
					var m_204551 = ((n_204536 - 1) - s_204550);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_204551)) break L4;
								merge_204555(a_204526, b_204538, nimMax(((m_204551 - s_204550) + 1), 0), m_204551, (m_204551 + s_204550), cmp_204530, order_204531);
								m_204551 -= (s_204550 * 2);
							}
					} while(false);
					s_204550 = (s_204550 * 2);
				}
		} while(false);

	
}

function cmp_204496(x_204499, y_204500) {
	var result_204501 = 0;

	BeforeRet: do {
		if (eqStrings(x_204499, y_204500)) {
		result_204501 = 0;
		break BeforeRet;
		}
		
		if ((cmpStrings(x_204499, y_204500) < 0)) {
		result_204501 = -1;
		break BeforeRet;
		}
		
		result_204501 = 1;
		break BeforeRet;
	} while (false);

	return result_204501;

}

function sort_204486(a_204491, order_204492) {
		sort_204521(a_204491, cmp_204496, order_204492);

	
}

function is_undefined_25883(x_25886) {
	var result_25887 = false;

		result_25887 = x_25886 === undefined;

	return result_25887;

}

function nsuJoinSep(a_165664, sep_165665) {
	var result_165666 = null;

		if ((0 < (a_165664 != null ? a_165664.length : 0))) {
		var l_165677 = ((sep_165665 != null ? sep_165665.length : 0) * ((a_165664 != null ? a_165664.length : 0) - 1));
		L1: do {
			var i_165691 = 0;
			var colontmp__211745 = 0;
			colontmp__211745 = (a_165664 != null ? (a_165664.length-1) : -1);
			var res_211746 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_211746 <= colontmp__211745)) break L3;
						i_165691 = res_211746;
						l_165677 += (a_165664[i_165691] != null ? a_165664[i_165691].length : 0);
						res_211746 += 1;
					}
			} while(false);
		} while(false);
		result_165666 = nimCopy(null, mnewString(0), NTI138);
		if (result_165666 != null) { result_165666 = (result_165666).concat(a_165664[0]); } else { result_165666 = a_165664[0].slice(); };
		L4: do {
			var i_165711 = 0;
			var colontmp__211752 = 0;
			colontmp__211752 = (a_165664 != null ? (a_165664.length-1) : -1);
			var res_211753 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_211753 <= colontmp__211752)) break L6;
						i_165711 = res_211753;
						if (result_165666 != null) { result_165666 = (result_165666).concat(sep_165665); } else { result_165666 = sep_165665.slice(); };
						if (result_165666 != null) { result_165666 = (result_165666).concat(a_165664[i_165711]); } else { result_165666 = a_165664[i_165711].slice(); };
						res_211753 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			result_165666 = nimCopy(null, [], NTI138);
		}
		

	return result_165666;

}

function output_mismatched_eplets_210127(eplets_set_210133) {
		var abver_eps_210136 = get_abver_eplets_210029(eplets_set_210133);
		var other_eps_210485 = HEX2D_210152(eplets_set_210133, abver_eps_210136);
		var total_prefix_210486 = makeNimstrLit("mmEpletCountTotal");
		document.getElementById(toJSStr(total_prefix_210486)).innerHTML = toJSStr(cstrToNimstr((card_210518(eplets_set_210133))+""));
		document.getElementById(toJSStr((total_prefix_210486 || []).concat(makeNimstrLit("Abver") || []))).innerHTML = toJSStr(cstrToNimstr((len_210694(abver_eps_210136))+""));
		document.getElementById(toJSStr((total_prefix_210486 || []).concat(makeNimstrLit("Other") || []))).innerHTML = toJSStr(cstrToNimstr((len_210694(other_eps_210485))+""));
		var locus_eplets_abver_210876 = null;
		var locus_eplets_other_210878 = null;
		L1: do {
			var locus_210913 = 0;
			L2: do {
				var v_211726 = 0;
				var res_211727 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_211727 <= 5)) break L4;
							v_211726 = res_211727;
							locus_210913 = v_211726;
							if (locus_eplets_other_210878 === null) locus_eplets_other_210878 = [];
               if (locus_eplets_other_210878.length < 0) { for (var i=locus_eplets_other_210878.length;i<0;++i) locus_eplets_other_210878.push(null); }
               else { locus_eplets_other_210878.length = 0; };
							if (locus_eplets_abver_210876 === null) locus_eplets_abver_210876 = [];
               if (locus_eplets_abver_210876.length < 0) { for (var i=locus_eplets_abver_210876.length;i<0;++i) locus_eplets_abver_210876.push(null); }
               else { locus_eplets_abver_210876.length = 0; };
							L5: do {
								var eplet_210933 = null;
								L6: do {
									var h_211710 = 0;
									var colontmp__211711 = 0;
									colontmp__211711 = (eplets_set_210133.data != null ? (eplets_set_210133.data.length-1) : -1);
									var res_211712 = 0;
									L7: do {
											L8: while (true) {
											if (!(res_211712 <= colontmp__211711)) break L8;
												h_211710 = res_211712;
												if (is_filled_71418(eplets_set_210133.data[h_211710].Field0)) {
												eplet_210933 = eplets_set_210133.data[h_211710].Field1;
												if ((eplet_210933.locus == locus_210913)) {
												if (contains_210344(abver_eps_210136, eplet_210933)) {
												var Tmp9 = nimCopy(null, eplet_210933.name, NTI138);
												if (locus_eplets_abver_210876 != null) { locus_eplets_abver_210876.push(Tmp9); } else { locus_eplets_abver_210876 = [Tmp9]; };
												}
												else {
												if (contains_210344(other_eps_210485, eplet_210933)) {
												var Tmp10 = nimCopy(null, eplet_210933.name, NTI138);
												if (locus_eplets_other_210878 != null) { locus_eplets_other_210878.push(Tmp10); } else { locus_eplets_other_210878 = [Tmp10]; };
												}
												else {
													if (true) {
													failed_assert_impl_15266(makeNimstrLit("epitopes.nim(321, 24) `false` "));
													}
													
												}
												}
												}
												
												}
												
												res_211712 += 1;
											}
									} while(false);
								} while(false);
							} while(false);
							sort_204486(locus_eplets_abver_210876, 1);
							sort_204486(locus_eplets_other_210878, 1);
							var eplet_count_211433 = ((locus_eplets_abver_210876 != null ? locus_eplets_abver_210876.length : 0) + (locus_eplets_other_210878 != null ? locus_eplets_other_210878.length : 0));
							document.getElementById(toJSStr((makeNimstrLit("mmEpletCount") || []).concat(reprEnum(locus_210913, NTI176044) || []))).innerHTML = toJSStr(cstrToNimstr((eplet_count_211433)+""));
							document.getElementById(toJSStr((makeNimstrLit("mmEpletCount") || []).concat(reprEnum(locus_210913, NTI176044) || [],makeNimstrLit("Abver") || []))).innerHTML = toJSStr(cstrToNimstr(((locus_eplets_abver_210876 != null ? locus_eplets_abver_210876.length : 0))+""));
							document.getElementById(toJSStr((makeNimstrLit("mmMismatchedEplets") || []).concat(reprEnum(locus_210913, NTI176044) || [],makeNimstrLit("Abver") || []))).innerHTML = toJSStr(nsuJoinSep(locus_eplets_abver_210876, makeNimstrLit(", ")));
							document.getElementById(toJSStr((makeNimstrLit("mmEpletCount") || []).concat(reprEnum(locus_210913, NTI176044) || [],makeNimstrLit("Other") || []))).innerHTML = toJSStr(cstrToNimstr(((locus_eplets_other_210878 != null ? locus_eplets_other_210878.length : 0))+""));
							document.getElementById(toJSStr((makeNimstrLit("mmMismatchedEplets") || []).concat(reprEnum(locus_210913, NTI176044) || [],makeNimstrLit("Other") || []))).innerHTML = toJSStr(nsuJoinSep(locus_eplets_other_210878, makeNimstrLit(", ")));
							res_211727 += 1;
						}
				} while(false);
			} while(false);
		} while(false);

	
}

function get_wiebe_category_211477(dr_211479, dq_211480) {
			var Tmp1;
			var Tmp2;
			var Tmp3;

	var result_211481 = null;

			if (!(dr_211479 < 7)) Tmp1 = false; else {				Tmp1 = (dq_211480 < 9);			}		if (Tmp1) {
		result_211481 = nimCopy(null, makeNimstrLit("L\xC3\xA5g (low; DR <7 och DQ <9)"), NTI138);
		}
		else {
			if (!(7 <= dr_211479)) Tmp2 = false; else {				Tmp2 = (dq_211480 <= 14);			}		if (Tmp2) {
		result_211481 = nimCopy(null, makeNimstrLit("Medel (intermediate; DR \xE2\x89\xA57 och DQ \xE2\x89\xA414)"), NTI138);
		}
		else {
			if (!(dr_211479 < 7)) Tmp3 = false; else {				Tmp3 = (dq_211480 < 14);			}		if (Tmp3) {
		result_211481 = nimCopy(null, makeNimstrLit("Medel (intermediate; DR 0\xE2\x80\x936 och DQ 9\xE2\x80\x9314)"), NTI138);
		}
		else {
			result_211481 = nimCopy(null, makeNimstrLit("H\xC3\xB6g (high; DR 0\xE2\x80\x9322 och DQ 15\xE2\x80\x9331)"), NTI138);
		}
		}}

	return result_211481;

}

function output_wiebe_risk_group_211496(rec_eplets_211502, don_alleles_211504) {
		var max_drb_211506 = 0;
		var max_drballele_211507 = makeNimstrLit("ingen");
		var max_dqa1_211509 = 0;
		var max_dqa1allele_211510 = makeNimstrLit("ingen");
		var max_dqb1_211512 = 0;
		var max_dqb1allele_211513 = makeNimstrLit("ingen");
		L1: do {
			var allele_211520 = null;
			var i_211759 = 0;
			var l_211760 = (don_alleles_211504 != null ? don_alleles_211504.length : 0);
			L2: do {
					L3: while (true) {
					if (!(i_211759 < l_211760)) break L3;
						allele_211520 = don_alleles_211504[i_211759];
						var allele_eplets_211521 = nimCopy(null, allele_211520.eplets, NTI178262);
						var mm_eplet_count_211581 = card_210518(HEX2D_210152(allele_eplets_211521, rec_eplets_211502));
						switch (allele_211520.locus) {
						case 1:
							if ((max_drb_211506 < mm_eplet_count_211581)) {
							max_drballele_211507 = nimCopy(null, allele_211520.name, NTI138);
							max_drb_211506 = mm_eplet_count_211581;
							}
							
							break;
						case 2:
							if ((max_dqa1_211509 < mm_eplet_count_211581)) {
							max_dqa1allele_211510 = nimCopy(null, allele_211520.name, NTI138);
							max_dqa1_211509 = mm_eplet_count_211581;
							}
							
							break;
						case 3:
							if ((max_dqb1_211512 < mm_eplet_count_211581)) {
							max_dqb1allele_211513 = nimCopy(null, allele_211520.name, NTI138);
							max_dqb1_211512 = mm_eplet_count_211581;
							}
							
							break;
						default: 
							break;
						}
						i_211759 += 1;
					}
			} while(false);
		} while(false);
		var dq_sum_211582 = (max_dqa1_211509 + max_dqb1_211512);
		var dq_name_211583 = (max_dqa1allele_211510 || []).concat(makeNimstrLit(" + ") || [],max_dqb1allele_211513 || []);
		var category_211584 = get_wiebe_category_211477(max_drb_211506, dq_sum_211582);
		document.getElementById("wiebeCategory").innerHTML = toJSStr(category_211584);
		document.getElementById("maxMismatchDRB").innerHTML = toJSStr(cstrToNimstr((max_drb_211506)+""));
		document.getElementById("maxMismatchAlleleDRB").innerHTML = toJSStr(max_drballele_211507);
		document.getElementById("maxMismatchDQAB").innerHTML = toJSStr(cstrToNimstr((dq_sum_211582)+""));
		document.getElementById("maxMismatchAlleleDQAB").innerHTML = toJSStr(dq_name_211583);

	
}

function showMismatchedEplets() {
		var rec_alleles_211600 = get_alleles_208919(rec_elements_203089);
		var rec_eplets_211601 = get_eplets_209229(rec_alleles_211600);
		var don_alleles_211602 = get_alleles_208919(don_elements_203128);
		var don_eplets_211603 = get_eplets_209229(don_alleles_211602);
		var hvg_eplets_211627 = HEX2D_210152(don_eplets_211603, rec_eplets_211601);
		output_mismatched_eplets_210127(hvg_eplets_211627);
		output_wiebe_risk_group_211496(rec_eplets_211601, don_alleles_211602);

	
}

function make_request_175014(url_175016, cb_175020) {

		function alert_contents_175030(e_175032) {
				if ((xhr_175021.readyState == 4)) {
				if ((xhr_175021.status == 200)) {
				cb_175020(xhr_175021.responseText);
				}
				else {
				rawEcho(makeNimstrLit("Could not retrieve data from "), cstrToNimstr(url_175016));
				}
				
				}
				

			
		}

	BeforeRet: do {
		var xhr_175021 = new XMLHttpRequest();
		if ((xhr_175021 == null)) {
		rawEcho(makeNimstrLit("Cannot create an XMLHTTP instance for url "), cstrToNimstr(url_175016));
		break BeforeRet;
		}
		
		xhr_175021.onreadystatechange = alert_contents_175030;
		xhr_175021.open("GET", url_175016, true, null, null);
		xhr_175021.responseType = "text";
		xhr_175021.send();
	} while (false);

	
}

function substr_30222(s_30224, first_30225, last_30226) {
	var result_30227 = null;

		var first_30228 = nimMax(first_30225, 0);
		var l_30230 = nimMax(((nimMin(last_30226, (s_30224 != null ? (s_30224.length-1) : -1)) - first_30228) + 1), 0);
		result_30227 = nimCopy(null, mnewString(l_30230), NTI138);
		L1: do {
			var i_30239 = 0;
			var colontmp__205975 = 0;
			colontmp__205975 = (l_30230 - 1);
			var res_205976 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_205976 <= colontmp__205975)) break L3;
						i_30239 = res_205976;
						result_30227[i_30239] = s_30224[(i_30239 + first_30228)];
						res_205976 += 1;
					}
			} while(false);
		} while(false);

	return result_30227;

}

function nsuSplitCharSet(s_161500, seps_161502, maxsplit_161504) {
	var result_161506 = null;

		result_161506 = nimCopy(null, [], NTI161522);
		L1: do {
			var xHEX60gensym161507_161523 = null;
			var lastHEX60gensym160861_211787 = 0;
			var splitsHEX60gensym160862_211788 = maxsplit_161504;
			L2: do {
					L3: while (true) {
					if (!(lastHEX60gensym160861_211787 <= (s_161500 != null ? s_161500.length : 0))) break L3;
						var firstHEX60gensym160863_211790 = lastHEX60gensym160861_211787;
						L4: do {
								L5: while (true) {
								if (!((lastHEX60gensym160861_211787 < (s_161500 != null ? s_161500.length : 0)) && !((seps_161502[s_161500[lastHEX60gensym160861_211787]] != undefined)))) break L5;
									lastHEX60gensym160861_211787 += 1;
								}
						} while(false);
						if ((splitsHEX60gensym160862_211788 == 0)) {
						lastHEX60gensym160861_211787 = (s_161500 != null ? s_161500.length : 0);
						}
						
						xHEX60gensym161507_161523 = substr_30222(s_161500, firstHEX60gensym160863_211790, (lastHEX60gensym160861_211787 - 1));
						var Tmp6 = nimCopy(null, xHEX60gensym161507_161523, NTI138);
						if (result_161506 != null) { result_161506.push(Tmp6); } else { result_161506 = [Tmp6]; };
						if ((splitsHEX60gensym160862_211788 == 0)) {
						break L2;
						}
						
						splitsHEX60gensym160862_211788 -= 1;
						lastHEX60gensym160861_211787 += 1;
					}
			} while(false);
		} while(false);

	return result_161506;

}

function HEX3DHEX3D_177361(x_177365, y_177367) {
	var result_177368 = false;

	BeforeRet: do {
		var same_object_177801 = false;
		same_object_177801 = x_177365 === y_177367
		if (same_object_177801) {
		result_177368 = true;
		break BeforeRet;
		}
		
		if (!(((x_177365 != null ? x_177365.length : 0) == (y_177367 != null ? y_177367.length : 0)))) {
		result_177368 = false;
		break BeforeRet;
		}
		
		L1: do {
			var i_178224 = 0;
			var colontmp__211793 = 0;
			colontmp__211793 = ((x_177365 != null ? x_177365.length : 0) - 1);
			var res_211794 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_211794 <= colontmp__211793)) break L3;
						i_178224 = res_211794;
						if (!(eqStrings(x_177365[i_178224], y_177367[i_178224]))) {
						result_177368 = false;
						break BeforeRet;
						}
						
						res_211794 += 1;
					}
			} while(false);
		} while(false);
		result_177368 = true;
		break BeforeRet;
	} while (false);

	return result_177368;

}

function check_eplet_header_177342(fields_177345) {
	var result_177346 = false;

		result_177346 = HEX3DHEX3D_177361(fields_177345, expected_header_177358);

	return result_177346;

}

function parse_evidence_177031(evidence_177033) {
	var result_177034 = 0;

		switch (toJSStr(evidence_177033)) {
		case "verified_eplet":
			result_177034 = 0;
			break;
		case "verified_pair":
			result_177034 = 1;
			break;
		case "other_eplet":
			result_177034 = 2;
			break;
		default: 
			var eHEX60gensym177037_177203 = null;
			eHEX60gensym177037_177203 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym177037_177203.message = nimCopy(null, (makeNimstrLit("unknown eplet evidence: ") || []).concat(evidence_177033 || []), NTI138);
			eHEX60gensym177037_177203.parent = null;
			raiseException(eHEX60gensym177037_177203, "ValueError");
			break;
		}

	return result_177034;

}

function nsuToLowerAsciiChar(c_160380) {
	var result_160381 = 0;

		if ((ConstSet4[c_160380] != undefined)) {
		result_160381 = (c_160380 + 32);
		}
		else {
			result_160381 = c_160380;
		}
		

	return result_160381;

}

function nsuCmpIgnoreStyle(a_160649, b_160650) {
					var Tmp7;
					var Tmp8;

	var result_160651 = 0;

	BeforeRet: do {
		var i_160653 = 0;
		var j_160655 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!((i_160653 < (a_160649 != null ? a_160649.length : 0)) && (a_160649[i_160653] == 95))) break L4;
								i_160653 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!((j_160655 < (b_160650 != null ? b_160650.length : 0)) && (b_160650[j_160655] == 95))) break L6;
								j_160655 += 1;
							}
					} while(false);
					if ((i_160653 < (a_160649 != null ? a_160649.length : 0))) {
					Tmp7 = nsuToLowerAsciiChar(a_160649[i_160653]);
					}
					else {
					Tmp7 = 0;
					}
					
					var aa_160668 = Tmp7;
					if ((j_160655 < (b_160650 != null ? b_160650.length : 0))) {
					Tmp8 = nsuToLowerAsciiChar(b_160650[j_160655]);
					}
					else {
					Tmp8 = 0;
					}
					
					var bb_160669 = Tmp8;
					result_160651 = (aa_160668 - bb_160669);
					if (!((result_160651 == 0))) {
					break BeforeRet;
					}
					
					if (((a_160649 != null ? a_160649.length : 0) <= i_160653)) {
					if (((b_160650 != null ? b_160650.length : 0) <= j_160655)) {
					result_160651 = 0;
					break BeforeRet;
					}
					
					result_160651 = -1;
					break BeforeRet;
					}
					else {
					if (((b_160650 != null ? b_160650.length : 0) <= j_160655)) {
					result_160651 = 1;
					break BeforeRet;
					}
					}
					i_160653 += 1;
					j_160655 += 1;
				}
		} while(false);
	} while (false);

	return result_160651;

}

function parse_enum_176058(s_176061) {
	var result_176062 = 0;

	BeforeRet: do {
		L1: do {
			var e_176221 = 0;
			var res_211802 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_211802 <= 5)) break L3;
						e_176221 = res_211802;
						if ((nsuCmpIgnoreStyle(s_176061, reprEnum(e_176221, NTI176044)) == 0)) {
						result_176062 = e_176221;
						break BeforeRet;
						}
						
						res_211802 += 1;
					}
			} while(false);
		} while(false);
		var eHEX60gensym176227_176403 = null;
		eHEX60gensym176227_176403 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		eHEX60gensym176227_176403.message = nimCopy(null, (makeNimstrLit("invalid enum value: ") || []).concat(s_176061 || []), NTI138);
		eHEX60gensym176227_176403.parent = null;
		raiseException(eHEX60gensym176227_176403, "ValueError");
	} while (false);

	return result_176062;

}

function parse_locus_176051(locusstr_176053) {
	var result_176054 = 0;

		result_176054 = parse_enum_176058(locusstr_176053);

	return result_176054;

}

function new_eplet_177238(name_177240, evidence_177241, locus_177242) {
	var result_177243 = null;

		result_177243 = {name: null, evidence: 0, locus: 0};
		result_177243.name = nimCopy(null, name_177240, NTI138);
		result_177243.evidence = parse_evidence_177031(evidence_177241);
		result_177243.locus = parse_locus_176051(locus_177242);

	return result_177243;

}

function raw_get_183377(t_183381, key_183382, hc_183383, hc_183383_Idx) {
						var Tmp3;

	var result_183384 = 0;

	BeforeRet: do {
		hc_183383[hc_183383_Idx] = hash_177307(key_183382);
		if ((hc_183383[hc_183383_Idx] == 0)) {
		hc_183383[hc_183383_Idx] = 314159265;
		}
		
		if (((t_183381.data != null ? t_183381.data.length : 0) == 0)) {
		result_183384 = -1;
		break BeforeRet;
		}
		
		var h_183559 = (hc_183383[hc_183383_Idx] & (t_183381.data != null ? (t_183381.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_67018(t_183381.data[h_183559].Field0)) break L2;
						if (!(t_183381.data[h_183559].Field0 == hc_183383[hc_183383_Idx])) Tmp3 = false; else {							Tmp3 = (t_183381.data[h_183559].Field1 == key_183382);						}					if (Tmp3) {
					result_183384 = h_183559;
					break BeforeRet;
					}
					
					h_183559 = next_try_67035(h_183559, (t_183381.data != null ? (t_183381.data.length-1) : -1));
				}
		} while(false);
		result_183384 = (-1 - h_183559);
	} while (false);

	return result_183384;

}

function has_key_183368(t_183373, key_183374) {
	var result_183375 = false;

		var hc_183376 = [0];
		result_183375 = (0 <= raw_get_183377(t_183373, key_183374, hc_183376, 0));

	return result_183375;

}

function contains_183358(t_183363, key_183364) {
	var result_183365 = false;

	BeforeRet: do {
		result_183365 = has_key_183368(t_183363, key_183364);
		break BeforeRet;
	} while (false);

	return result_183365;

}

function must_rehash_67053(length_67055, counter_67056) {
	var result_67057 = false;

		result_67057 = (((length_67055 * 2) < (counter_67056 * 3)) || ((length_67055 - counter_67056) < 4));

	return result_67057;

}

function raw_insert_186736(t_186742, data_186745, data_186745_Idx, key_186746, val_186747, hc_186748, h_186749) {
		data_186745[data_186745_Idx][h_186749].Field1 = key_186746;
		nimCopy(data_186745[data_186745_Idx][h_186749].Field2, val_186747, NTI182890);
		data_186745[data_186745_Idx][h_186749].Field0 = hc_186748;

	
}

function enlarge_185779(t_185785) {
		var n_185793 = null;
		n_185793 = new Array(((t_185785.data != null ? t_185785.data.length : 0) * 2)); for (var i=0;i<((t_185785.data != null ? t_185785.data.length : 0) * 2);++i) {n_185793[i]={Field0: 0, Field1: 0, Field2: {data: null, counter: 0}};}		var Tmp1 = t_185785.data; t_185785.data = n_185793; n_185793 = Tmp1;		L2: do {
			var i_185983 = 0;
			var colontmp__211812 = 0;
			colontmp__211812 = (n_185793 != null ? (n_185793.length-1) : -1);
			var res_211813 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_211813 <= colontmp__211812)) break L4;
						i_185983 = res_211813;
						var eh_186146 = n_185793[i_185983].Field0;
						if (is_filled_67018(eh_186146)) {
						var j_186153 = (eh_186146 & (t_185785.data != null ? (t_185785.data.length-1) : -1));
						L5: do {
								L6: while (true) {
								if (!is_filled_67018(t_185785.data[j_186153].Field0)) break L6;
									j_186153 = next_try_67035(j_186153, (t_185785.data != null ? (t_185785.data.length-1) : -1));
								}
						} while(false);
						raw_insert_186736(t_185785, t_185785, "data", n_185793[i_185983].Field1, n_185793[i_185983].Field2, eh_186146, j_186153);
						}
						
						res_211813 += 1;
					}
			} while(false);
		} while(false);

	
}

function raw_get_known_hc_187293(t_187297, key_187298, hc_187299) {
	var result_187300 = 0;

	BeforeRet: do {
		if (((t_187297.data != null ? t_187297.data.length : 0) == 0)) {
		result_187300 = -1;
		break BeforeRet;
		}
		
		var h_187470 = (hc_187299 & (t_187297.data != null ? (t_187297.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_67018(t_187297.data[h_187470].Field0)) break L2;
					if (((t_187297.data[h_187470].Field0 == hc_187299) && (t_187297.data[h_187470].Field1 == key_187298))) {
					result_187300 = h_187470;
					break BeforeRet;
					}
					
					h_187470 = next_try_67035(h_187470, (t_187297.data != null ? (t_187297.data.length-1) : -1));
				}
		} while(false);
		result_187300 = (-1 - h_187470);
	} while (false);

	return result_187300;

}

function HEX5BHEX5DHEX3D_184467(t_184473, key_184474, val_184475) {
		if (((t_184473.data != null ? t_184473.data.length : 0) == 0)) {
		t_184473.counter = 0;
		t_184473.data = new Array(64); for (var i=0;i<64;++i) {t_184473.data[i]={Field0: 0, Field1: 0, Field2: {data: null, counter: 0}};}		}
		
		var hc_185001 = [0];
		var index_185010 = raw_get_183377(t_184473, key_184474, hc_185001, 0);
		if ((0 <= index_185010)) {
		nimCopy(t_184473.data[index_185010].Field2, val_184475, NTI182890);
		}
		else {
			if (((t_184473.data != null ? t_184473.data.length : 0) == 0)) {
			t_184473.counter = 0;
			t_184473.data = new Array(64); for (var i=0;i<64;++i) {t_184473.data[i]={Field0: 0, Field1: 0, Field2: {data: null, counter: 0}};}			}
			
			if (must_rehash_67053((t_184473.data != null ? t_184473.data.length : 0), t_184473.counter)) {
			enlarge_185779(t_184473);
			index_185010 = raw_get_known_hc_187293(t_184473, key_184474, hc_185001[0]);
			}
			
			index_185010 = (-1 - index_185010);
			raw_insert_186736(t_184473, t_184473, "data", key_184474, val_184475, hc_185001[0], index_185010);
			t_184473.counter += 1;
		}
		

	
}

function init_table_184172(initial_size_184176) {
	var result_184178 = {data: null, counter: 0};

		result_184178.counter = 0;
		result_184178.data = new Array(initial_size_184176); for (var i=0;i<initial_size_184176;++i) {result_184178.data[i]={Field0: 0, Field1: null, Field2: null};}
	return result_184178;

}

function raw_get_189202(t_189206, key_189207, hc_189208, hc_189208_Idx) {
						var Tmp3;

	var result_189209 = 0;

	BeforeRet: do {
		hc_189208[hc_189208_Idx] = hash_46814(key_189207);
		if ((hc_189208[hc_189208_Idx] == 0)) {
		hc_189208[hc_189208_Idx] = 314159265;
		}
		
		if (((t_189206.data != null ? t_189206.data.length : 0) == 0)) {
		result_189209 = -1;
		break BeforeRet;
		}
		
		var h_189382 = (hc_189208[hc_189208_Idx] & (t_189206.data != null ? (t_189206.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_67018(t_189206.data[h_189382].Field0)) break L2;
						if (!(t_189206.data[h_189382].Field0 == hc_189208[hc_189208_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_189206.data[h_189382].Field1, key_189207);						}					if (Tmp3) {
					result_189209 = h_189382;
					break BeforeRet;
					}
					
					h_189382 = next_try_67035(h_189382, (t_189206.data != null ? (t_189206.data.length-1) : -1));
				}
		} while(false);
		result_189209 = (-1 - h_189382);
	} while (false);

	return result_189209;

}

function raw_insert_191736(t_191742, data_191745, data_191745_Idx, key_191746, val_191747, hc_191748, h_191749) {
		data_191745[data_191745_Idx][h_191749].Field1 = nimCopy(null, key_191746, NTI138);
		data_191745[data_191745_Idx][h_191749].Field2 = val_191747;
		data_191745[data_191745_Idx][h_191749].Field0 = hc_191748;

	
}

function enlarge_190779(t_190785) {
		var n_190793 = null;
		n_190793 = new Array(((t_190785.data != null ? t_190785.data.length : 0) * 2)); for (var i=0;i<((t_190785.data != null ? t_190785.data.length : 0) * 2);++i) {n_190793[i]={Field0: 0, Field1: null, Field2: null};}		var Tmp1 = t_190785.data; t_190785.data = n_190793; n_190793 = Tmp1;		L2: do {
			var i_190983 = 0;
			var colontmp__211822 = 0;
			colontmp__211822 = (n_190793 != null ? (n_190793.length-1) : -1);
			var res_211823 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_211823 <= colontmp__211822)) break L4;
						i_190983 = res_211823;
						var eh_191146 = n_190793[i_190983].Field0;
						if (is_filled_67018(eh_191146)) {
						var j_191153 = (eh_191146 & (t_190785.data != null ? (t_190785.data.length-1) : -1));
						L5: do {
								L6: while (true) {
								if (!is_filled_67018(t_190785.data[j_191153].Field0)) break L6;
									j_191153 = next_try_67035(j_191153, (t_190785.data != null ? (t_190785.data.length-1) : -1));
								}
						} while(false);
						raw_insert_191736(t_190785, t_190785, "data", n_190793[i_190983].Field1, n_190793[i_190983].Field2, eh_191146, j_191153);
						}
						
						res_211823 += 1;
					}
			} while(false);
		} while(false);

	
}

function raw_get_known_hc_192263(t_192267, key_192268, hc_192269) {
	var result_192270 = 0;

	BeforeRet: do {
		if (((t_192267.data != null ? t_192267.data.length : 0) == 0)) {
		result_192270 = -1;
		break BeforeRet;
		}
		
		var h_192440 = (hc_192269 & (t_192267.data != null ? (t_192267.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_67018(t_192267.data[h_192440].Field0)) break L2;
					if (((t_192267.data[h_192440].Field0 == hc_192269) && eqStrings(t_192267.data[h_192440].Field1, key_192268))) {
					result_192270 = h_192440;
					break BeforeRet;
					}
					
					h_192440 = next_try_67035(h_192440, (t_192267.data != null ? (t_192267.data.length-1) : -1));
				}
		} while(false);
		result_192270 = (-1 - h_192440);
	} while (false);

	return result_192270;

}

function HEX5BHEX5DHEX3D_188775(t_188781, key_188782, val_188783) {
		if (((t_188781.data != null ? t_188781.data.length : 0) == 0)) {
		t_188781.counter = 0;
		t_188781.data = new Array(64); for (var i=0;i<64;++i) {t_188781.data[i]={Field0: 0, Field1: null, Field2: null};}		}
		
		var hc_189201 = [0];
		var index_189892 = raw_get_189202(t_188781, key_188782, hc_189201, 0);
		if ((0 <= index_189892)) {
		t_188781.data[index_189892].Field2 = val_188783;
		}
		else {
			if (((t_188781.data != null ? t_188781.data.length : 0) == 0)) {
			t_188781.counter = 0;
			t_188781.data = new Array(64); for (var i=0;i<64;++i) {t_188781.data[i]={Field0: 0, Field1: null, Field2: null};}			}
			
			if (must_rehash_67053((t_188781.data != null ? t_188781.data.length : 0), t_188781.counter)) {
			enlarge_190779(t_188781);
			index_189892 = raw_get_known_hc_192263(t_188781, key_188782, hc_189201[0]);
			}
			
			index_189892 = (-1 - index_189892);
			raw_insert_191736(t_188781, t_188781, "data", key_188782, val_188783, hc_189201[0], index_189892);
			t_188781.counter += 1;
		}
		

	
}

function HEX5BHEX5D_188187(t_188193, key_188194) {
	var result_188196 = null;

		var hcHEX60gensym67565_188197 = [0];
		var indexHEX60gensym67566_188206 = raw_get_183377(t_188193, key_188194, hcHEX60gensym67565_188197, 0);
		if ((0 <= indexHEX60gensym67566_188206)) {
		result_188196 = t_188193.data[indexHEX60gensym67566_188206].Field2;
		}
		else {
			var eHEX60gensym188406_188603 = null;
			eHEX60gensym188406_188603 = {m_type: NTI3654, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym188406_188603.message = nimCopy(null, (makeNimstrLit("key not found: ") || []).concat(reprEnum(key_188194, NTI176044) || []), NTI138);
			eHEX60gensym188406_188603.parent = null;
			raiseException(eHEX60gensym188406_188603, "KeyError");
		}
		

	return result_188196;

}

function read_eplets_182875(data_182877) {
						var Tmp6;

	var result_182924 = [{data: null, counter: 0}];

		var first_row_182925 = true;
		L1: do {
			var line_182926 = null;
			var first_211779 = 0;
			var last_211780 = 0;
			var eolpos_211781 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!((last_211780 < (data_182877 != null ? data_182877.length : 0)) && !((ConstSet2[data_182877[last_211780]] != undefined)))) break L5;
									last_211780 += 1;
								}
						} while(false);
						eolpos_211781 = last_211780;
						if ((last_211780 < (data_182877 != null ? data_182877.length : 0))) {
						if ((data_182877[last_211780] == 10)) {
						last_211780 += 1;
						}
						else {
						if ((data_182877[last_211780] == 13)) {
						last_211780 += 1;
						if (((last_211780 < (data_182877 != null ? data_182877.length : 0)) && (data_182877[last_211780] == 10))) {
						last_211780 += 1;
						}
						
						}
						}
						}
						
						if (false) {
						Tmp6 = (last_211780 - 1);
						}
						else {
						Tmp6 = (eolpos_211781 - 1);
						}
						
						line_182926 = substr_30222(data_182877, first_211779, Tmp6);
						L7: do {
							var fields_182927 = nsuSplitCharSet(line_182926, ConstSet3, -1);
							if (first_row_182925) {
							if (!(check_eplet_header_177342(fields_182927))) {
							var eHEX60gensym182930_183003 = null;
							eHEX60gensym182930_183003 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
							eHEX60gensym182930_183003.message = nimCopy(null, makeNimstrLit("unknown file format for eplet data"), NTI138);
							eHEX60gensym182930_183003.parent = null;
							raiseException(eHEX60gensym182930_183003, "ValueError");
							}
							else {
								first_row_182925 = false;
								break L7;
							}
							
							}
							else {
							if (((line_182926 != null ? line_182926.length : 0) == 0)) {
							break L7;
							}
							else {
							if (!(((fields_182927 != null ? fields_182927.length : 0) == 3))) {
							var eHEX60gensym183017_183203 = null;
							eHEX60gensym183017_183203 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
							eHEX60gensym183017_183203.message = nimCopy(null, (makeNimstrLit("unknown format of line: \'") || []).concat(line_182926 || [],makeNimstrLit("\'") || []), NTI138);
							eHEX60gensym183017_183203.parent = null;
							raiseException(eHEX60gensym183017_183203, "ValueError");
							}
							}}
							var ep_183210 = new_eplet_177238(fields_182927[0], fields_182927[1], fields_182927[2]);
							if (!(contains_183358(result_182924[0], ep_183210.locus))) {
							HEX5BHEX5DHEX3D_184467(result_182924[0], ep_183210.locus, init_table_184172(64));
							}
							
							HEX5BHEX5DHEX3D_188775(HEX5BHEX5D_188187(result_182924[0], ep_183210.locus), ep_183210.name, ep_183210);
						} while(false);
						if ((eolpos_211781 == last_211780)) {
						break L2;
						}
						
						first_211779 = last_211780;
					}
			} while(false);
		} while(false);

	return result_182924[0];

}

function init_table_194533(initial_size_194537) {
	var result_194539 = {data: null, counter: 0};

		result_194539.counter = 0;
		result_194539.data = new Array(initial_size_194537); for (var i=0;i<initial_size_194537;++i) {result_194539.data[i]={Field0: 0, Field1: null, Field2: null};}
	return result_194539;

}

function check_allele_header_194450(fields_194453) {
	var result_194454 = false;

		result_194454 = HEX3DHEX3D_177361(fields_194453, expected_header_194466);

	return result_194454;

}

function has_key_195370(t_195375, key_195376) {
	var result_195377 = false;

		var hc_195378 = [0];
		result_195377 = (0 <= raw_get_195379(t_195375, key_195376, hc_195378, 0));

	return result_195377;

}

function contains_195360(t_195365, key_195366) {
	var result_195367 = false;

	BeforeRet: do {
		result_195367 = has_key_195370(t_195365, key_195366);
		break BeforeRet;
	} while (false);

	return result_195367;

}

function raw_insert_198536(t_198542, data_198545, data_198545_Idx, key_198546, val_198547, hc_198548, h_198549) {
		data_198545[data_198545_Idx][h_198549].Field1 = nimCopy(null, key_198546, NTI138);
		data_198545[data_198545_Idx][h_198549].Field2 = val_198547;
		data_198545[data_198545_Idx][h_198549].Field0 = hc_198548;

	
}

function enlarge_197579(t_197585) {
		var n_197593 = null;
		n_197593 = new Array(((t_197585.data != null ? t_197585.data.length : 0) * 2)); for (var i=0;i<((t_197585.data != null ? t_197585.data.length : 0) * 2);++i) {n_197593[i]={Field0: 0, Field1: null, Field2: null};}		var Tmp1 = t_197585.data; t_197585.data = n_197593; n_197593 = Tmp1;		L2: do {
			var i_197783 = 0;
			var colontmp__211838 = 0;
			colontmp__211838 = (n_197593 != null ? (n_197593.length-1) : -1);
			var res_211839 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_211839 <= colontmp__211838)) break L4;
						i_197783 = res_211839;
						var eh_197946 = n_197593[i_197783].Field0;
						if (is_filled_67018(eh_197946)) {
						var j_197953 = (eh_197946 & (t_197585.data != null ? (t_197585.data.length-1) : -1));
						L5: do {
								L6: while (true) {
								if (!is_filled_67018(t_197585.data[j_197953].Field0)) break L6;
									j_197953 = next_try_67035(j_197953, (t_197585.data != null ? (t_197585.data.length-1) : -1));
								}
						} while(false);
						raw_insert_198536(t_197585, t_197585, "data", n_197593[i_197783].Field1, n_197593[i_197783].Field2, eh_197946, j_197953);
						}
						
						res_211839 += 1;
					}
			} while(false);
		} while(false);

	
}

function raw_get_known_hc_199078(t_199082, key_199083, hc_199084) {
	var result_199085 = 0;

	BeforeRet: do {
		if (((t_199082.data != null ? t_199082.data.length : 0) == 0)) {
		result_199085 = -1;
		break BeforeRet;
		}
		
		var h_199255 = (hc_199084 & (t_199082.data != null ? (t_199082.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!is_filled_67018(t_199082.data[h_199255].Field0)) break L2;
					if (((t_199082.data[h_199255].Field0 == hc_199084) && eqStrings(t_199082.data[h_199255].Field1, key_199083))) {
					result_199085 = h_199255;
					break BeforeRet;
					}
					
					h_199255 = next_try_67035(h_199255, (t_199082.data != null ? (t_199082.data.length-1) : -1));
				}
		} while(false);
		result_199085 = (-1 - h_199255);
	} while (false);

	return result_199085;

}

function HEX5BHEX5DHEX3D_196205(t_196211, key_196212, val_196213) {
		if (((t_196211.data != null ? t_196211.data.length : 0) == 0)) {
		t_196211.counter = 0;
		t_196211.data = new Array(64); for (var i=0;i<64;++i) {t_196211.data[i]={Field0: 0, Field1: null, Field2: null};}		}
		
		var hc_196801 = [0];
		var index_196810 = raw_get_195379(t_196211, key_196212, hc_196801, 0);
		if ((0 <= index_196810)) {
		t_196211.data[index_196810].Field2 = val_196213;
		}
		else {
			if (((t_196211.data != null ? t_196211.data.length : 0) == 0)) {
			t_196211.counter = 0;
			t_196211.data = new Array(64); for (var i=0;i<64;++i) {t_196211.data[i]={Field0: 0, Field1: null, Field2: null};}			}
			
			if (must_rehash_67053((t_196211.data != null ? t_196211.data.length : 0), t_196211.counter)) {
			enlarge_197579(t_196211);
			index_196810 = raw_get_known_hc_199078(t_196211, key_196212, hc_196801[0]);
			}
			
			index_196810 = (-1 - index_196810);
			raw_insert_198536(t_196211, t_196211, "data", key_196212, val_196213, hc_196801[0], index_196810);
			t_196211.counter += 1;
		}
		

	
}

function new_allele_194033(name_194035, locus_194036) {
	var result_194037 = null;

		result_194037 = {name: null, eplets: {data: null, counter: 0}, locus: 0};
		result_194037.name = nimCopy(null, name_194035, NTI138);
		init_194075(result_194037.eplets, 64);
		result_194037.locus = locus_194036;

	return result_194037;

}

function has_key_200580(t_200585, key_200586) {
	var result_200587 = false;

		var hc_200588 = [0];
		result_200587 = (0 <= raw_get_189202(t_200585, key_200586, hc_200588, 0));

	return result_200587;

}

function contains_200570(t_200575, key_200576) {
	var result_200577 = false;

	BeforeRet: do {
		result_200577 = has_key_200580(t_200575, key_200576);
		break BeforeRet;
	} while (false);

	return result_200577;

}

function HEX5BHEX5D_199969(t_199974, key_199975) {
	var result_199976 = {data: null, counter: 0};

		var hcHEX60gensym67547_199977 = [0];
		var indexHEX60gensym67548_199986 = raw_get_183377(t_199974, key_199975, hcHEX60gensym67547_199977, 0);
		if ((0 <= indexHEX60gensym67548_199986)) {
		nimCopy(result_199976, t_199974.data[indexHEX60gensym67548_199986].Field2, NTI182890);
		}
		else {
			var eHEX60gensym200206_200403 = null;
			eHEX60gensym200206_200403 = {m_type: NTI3654, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym200206_200403.message = nimCopy(null, (makeNimstrLit("key not found: ") || []).concat(reprEnum(key_199975, NTI176044) || []), NTI138);
			eHEX60gensym200206_200403.parent = null;
			raiseException(eHEX60gensym200206_200403, "KeyError");
		}
		

	return result_199976;

}

function HEX5BHEX5D_201573(t_201578, key_201579) {
	var result_201580 = null;

		var hcHEX60gensym67547_201581 = [0];
		var indexHEX60gensym67548_201590 = raw_get_189202(t_201578, key_201579, hcHEX60gensym67547_201581, 0);
		if ((0 <= indexHEX60gensym67548_201590)) {
		result_201580 = t_201578.data[indexHEX60gensym67548_201590].Field2;
		}
		else {
			var eHEX60gensym201803_202003 = null;
			eHEX60gensym201803_202003 = {m_type: NTI3654, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
			eHEX60gensym201803_202003.message = nimCopy(null, (makeNimstrLit("key not found: ") || []).concat(key_201579 || []), NTI138);
			eHEX60gensym201803_202003.parent = null;
			raiseException(eHEX60gensym201803_202003, "KeyError");
		}
		

	return result_201580;

}

function read_alleles_194489(data_194491, eplets_194507) {
						var Tmp6;
							var Tmp8;

	var result_194530 = [{data: null, counter: 0}];

		nimCopy(result_194530[0], init_table_194533(64), NTI194517);
		var first_row_194829 = true;
		L1: do {
			var line_194830 = null;
			var first_211831 = 0;
			var last_211832 = 0;
			var eolpos_211833 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!((last_211832 < (data_194491 != null ? data_194491.length : 0)) && !((ConstSet5[data_194491[last_211832]] != undefined)))) break L5;
									last_211832 += 1;
								}
						} while(false);
						eolpos_211833 = last_211832;
						if ((last_211832 < (data_194491 != null ? data_194491.length : 0))) {
						if ((data_194491[last_211832] == 10)) {
						last_211832 += 1;
						}
						else {
						if ((data_194491[last_211832] == 13)) {
						last_211832 += 1;
						if (((last_211832 < (data_194491 != null ? data_194491.length : 0)) && (data_194491[last_211832] == 10))) {
						last_211832 += 1;
						}
						
						}
						}
						}
						
						if (false) {
						Tmp6 = (last_211832 - 1);
						}
						else {
						Tmp6 = (eolpos_211833 - 1);
						}
						
						line_194830 = substr_30222(data_194491, first_211831, Tmp6);
						L7: do {
							var fields_194831 = nsuSplitCharSet(line_194830, ConstSet6, -1);
							if (first_row_194829) {
							if (!(check_allele_header_194450(fields_194831))) {
							var eHEX60gensym194834_195003 = null;
							eHEX60gensym194834_195003 = {m_type: NTI3626, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
							eHEX60gensym194834_195003.message = nimCopy(null, makeNimstrLit("unknown file format for allele data"), NTI138);
							eHEX60gensym194834_195003.parent = null;
							raiseException(eHEX60gensym194834_195003, "Exception");
							}
							else {
								first_row_194829 = false;
								break L7;
							}
							
							}
							else {
							if (((line_194830 != null ? line_194830.length : 0) == 0)) {
							break L7;
							}
							else {
							if (!(((fields_194831 != null ? fields_194831.length : 0) == 3))) {
							var eHEX60gensym195017_195203 = null;
							eHEX60gensym195017_195203 = {m_type: NTI3626, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
							eHEX60gensym195017_195203.message = nimCopy(null, (makeNimstrLit("unknown format of line: \'") || []).concat(line_194830 || [],makeNimstrLit("\'") || []), NTI138);
							eHEX60gensym195017_195203.parent = null;
							raiseException(eHEX60gensym195017_195203, "Exception");
							}
							}}
							var allelename_195210 = nimCopy(null, fields_194831[0], NTI138);
							var epletname_195211 = nimCopy(null, fields_194831[1], NTI138);
							var locus_195212 = parse_locus_176051(fields_194831[2]);
							if (!(contains_195360(result_194530[0], allelename_195210))) {
							HEX5BHEX5DHEX3D_196205(result_194530[0], allelename_195210, new_allele_194033(allelename_195210, locus_195212));
							}
							
							if (contains_200570(HEX5BHEX5D_199969(eplets_194507, locus_195212), epletname_195211)) {
							incl_178670((Tmp8 = HEX5BHEX5D_200782(result_194530[0], allelename_195210), Tmp8)[0][Tmp8[1]].eplets, HEX5BHEX5D_201573(HEX5BHEX5D_199969(eplets_194507, locus_195212), epletname_195211));
							}
							
						} while(false);
						if ((eolpos_211833 == last_211832)) {
						break L2;
						}
						
						first_211831 = last_211832;
					}
			} while(false);
		} while(false);

	return result_194530[0];

}

function len_207774(t_207779) {
	var result_207780 = 0;

		result_207780 = t_207779.counter;

	return result_207780;

}

function merge_table_207601(t1_207607, t2_207609) {
		L1: do {
			var key_208614 = 0;
			var value_208615 = {data: null, counter: 0};
			var l_211853 = len_207774(t2_207609);
			L2: do {
				var h_211855 = 0;
				var colontmp__211856 = 0;
				colontmp__211856 = (t2_207609.data != null ? (t2_207609.data.length-1) : -1);
				var res_211857 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_211857 <= colontmp__211856)) break L4;
							h_211855 = res_211857;
							if (is_filled_67018(t2_207609.data[h_211855].Field0)) {
							key_208614 = t2_207609.data[h_211855].Field1;
							nimCopy(value_208615, t2_207609.data[h_211855].Field2, NTI182890);
							HEX5BHEX5DHEX3D_184467(t1_207607, key_208614, value_208615);
							}
							
							res_211857 += 1;
						}
				} while(false);
			} while(false);
		} while(false);

	
}

function len_203490(t_203495) {
	var result_203496 = 0;

		result_203496 = t_203495.counter;

	return result_203496;

}

function merge_table_206425(t1_206431, t2_206433) {
		L1: do {
			var key_207414 = null;
			var value_207415 = null;
			var l_211869 = len_203490(t2_206433);
			L2: do {
				var h_211871 = 0;
				var colontmp__211872 = 0;
				colontmp__211872 = (t2_206433.data != null ? (t2_206433.data.length-1) : -1);
				var res_211873 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_211873 <= colontmp__211872)) break L4;
							h_211871 = res_211873;
							if (is_filled_67018(t2_206433.data[h_211871].Field0)) {
							key_207414 = t2_206433.data[h_211871].Field1;
							value_207415 = t2_206433.data[h_211871].Field2;
							HEX5BHEX5DHEX3D_196205(t1_206431, key_207414, value_207415);
							}
							
							res_211873 += 1;
						}
				} while(false);
			} while(false);
		} while(false);

	
}

function new_seq_40234(len_40237) {
	var result_40239 = null;

		result_40239 = new Array(len_40237); for (var i=0;i<len_40237;++i) {result_40239[i]=null;}
	return result_40239;

}

function HEX5BHEX5D_86281(s_86285, x_86287) {
	var result_86288 = null;

		var a_86401 = x_86287.a;
		var l_86601 = ((x_86287.b - a_86401) + 1);
		result_86288 = nimCopy(null, mnewString(l_86601), NTI138);
		L1: do {
			var i_86609 = 0;
			var i_211986 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_211986 < l_86601)) break L3;
						i_86609 = i_211986;
						result_86288[i_86609] = s_86285[(i_86609 + a_86401)];
						i_211986 += 1;
					}
			} while(false);
		} while(false);

	return result_86288;

}

function HEX2EHEX2E_86220(a_86224, b_86225) {
	var result_86227 = {a: 0, b: 0};

		nimCopy(result_86227, {a: a_86224, b: b_86225}, NTI64907);

	return result_86227;

}

function fill_select_203172() {
		var allele_a_203190 = new_seq_40234(0);
		var allele_b_203207 = new_seq_40234(0);
		var allele_c_203224 = new_seq_40234(0);
		var allele_drb1_203241 = new_seq_40234(0);
		var allele_drb345_203258 = new_seq_40234(0);
		var allele_dqa1_203275 = new_seq_40234(0);
		var allele_dqb1_203292 = new_seq_40234(0);
		var allele_dpa1_203309 = new_seq_40234(0);
		var allele_dpb1_203326 = new_seq_40234(0);
		L1: do {
			var allele_204214 = null;
			var l_211885 = len_203490(alleles_table_203037[0]);
			L2: do {
				var h_211887 = 0;
				var colontmp__211888 = 0;
				colontmp__211888 = (alleles_table_203037[0].data != null ? (alleles_table_203037[0].data.length-1) : -1);
				var res_211889 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_211889 <= colontmp__211888)) break L4;
							h_211887 = res_211889;
							if (is_filled_67018(alleles_table_203037[0].data[h_211887].Field0)) {
							allele_204214 = alleles_table_203037[0].data[h_211887].Field2;
							switch (allele_204214.locus) {
							case 0:
								switch (allele_204214.name[0]) {
								case 65:
									var Tmp5 = nimCopy(null, allele_204214.name, NTI138);
									if (allele_a_203190 != null) { allele_a_203190.push(Tmp5); } else { allele_a_203190 = [Tmp5]; };
									break;
								case 66:
									var Tmp6 = nimCopy(null, allele_204214.name, NTI138);
									if (allele_b_203207 != null) { allele_b_203207.push(Tmp6); } else { allele_b_203207 = [Tmp6]; };
									break;
								case 67:
									var Tmp7 = nimCopy(null, allele_204214.name, NTI138);
									if (allele_c_203224 != null) { allele_c_203224.push(Tmp7); } else { allele_c_203224 = [Tmp7]; };
									break;
								default: 
									rawEcho(makeNimstrLit("unknown locus in allele "), allele_204214.name);
									break;
								}
								break;
							case 1:
								switch (toJSStr(HEX5BHEX5D_86281(allele_204214.name, HEX2EHEX2E_86220(0, 3)))) {
								case "DRB1":
									var Tmp8 = nimCopy(null, allele_204214.name, NTI138);
									if (allele_drb1_203241 != null) { allele_drb1_203241.push(Tmp8); } else { allele_drb1_203241 = [Tmp8]; };
									break;
								case "DRB3":
								case "DRB4":
								case "DRB5":
									var Tmp9 = nimCopy(null, allele_204214.name, NTI138);
									if (allele_drb345_203258 != null) { allele_drb345_203258.push(Tmp9); } else { allele_drb345_203258 = [Tmp9]; };
									break;
								default: 
									break;
								}
								break;
							case 2:
								var Tmp10 = nimCopy(null, allele_204214.name, NTI138);
								if (allele_dqa1_203275 != null) { allele_dqa1_203275.push(Tmp10); } else { allele_dqa1_203275 = [Tmp10]; };
								break;
							case 3:
								var Tmp11 = nimCopy(null, allele_204214.name, NTI138);
								if (allele_dqb1_203292 != null) { allele_dqb1_203292.push(Tmp11); } else { allele_dqb1_203292 = [Tmp11]; };
								break;
							case 4:
								var Tmp12 = nimCopy(null, allele_204214.name, NTI138);
								if (allele_dpa1_203309 != null) { allele_dpa1_203309.push(Tmp12); } else { allele_dpa1_203309 = [Tmp12]; };
								break;
							case 5:
								var Tmp13 = nimCopy(null, allele_204214.name, NTI138);
								if (allele_dpb1_203326 != null) { allele_dpb1_203326.push(Tmp13); } else { allele_dpb1_203326 = [Tmp13]; };
								break;
							}
							}
							
							res_211889 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		sort_204486(allele_a_203190, 1);
		sort_204486(allele_b_203207, 1);
		sort_204486(allele_c_203224, 1);
		sort_204486(allele_drb1_203241, 1);
		sort_204486(allele_drb345_203258, 1);
		sort_204486(allele_dqa1_203275, 1);
		sort_204486(allele_dqb1_203292, 1);
		sort_204486(allele_dpa1_203309, 1);
		sort_204486(allele_dpb1_203326, 1);
		var allele_list_206013 = makeNimstrLit("<option value=\"\"></option>");
		L14: do {
			var allele_206020 = null;
			var i_211894 = 0;
			var l_211895 = (allele_a_203190 != null ? allele_a_203190.length : 0);
			L15: do {
					L16: while (true) {
					if (!(i_211894 < l_211895)) break L16;
						allele_206020 = allele_a_203190[i_211894];
						if (allele_list_206013 != null) { allele_list_206013 = (allele_list_206013).concat((makeNimstrLit("<option value=\"") || []).concat(allele_206020 || [],makeNimstrLit("\">") || [],allele_206020 || [],makeNimstrLit("</option>\x0A") || [])); } else { allele_list_206013 = (makeNimstrLit("<option value=\"") || []).concat(allele_206020 || [],makeNimstrLit("\">") || [],allele_206020 || [],makeNimstrLit("</option>\x0A") || []).slice(); };
						i_211894 += 1;
					}
			} while(false);
		} while(false);
		L17: do {
			var element_206084 = null;
			var i_211898 = 0;
			if ((i_211898 <= 1)) {
			L18: do {
					L19: while (true) {
					if (!true) break L19;
						element_206084 = rec_elements_a_203053[i_211898];
						document.getElementById(toJSStr(element_206084)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211898)) {
						break L18;
						}
						
						i_211898 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L20: do {
			var element_206092 = null;
			var i_211901 = 0;
			if ((i_211901 <= 1)) {
			L21: do {
					L22: while (true) {
					if (!true) break L22;
						element_206092 = don_elements_a_203092[i_211901];
						document.getElementById(toJSStr(element_206092)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211901)) {
						break L21;
						}
						
						i_211901 += 1;
					}
			} while(false);
			}
			
		} while(false);
		allele_list_206013 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L23: do {
			var allele_206102 = null;
			var i_211904 = 0;
			var l_211905 = (allele_b_203207 != null ? allele_b_203207.length : 0);
			L24: do {
					L25: while (true) {
					if (!(i_211904 < l_211905)) break L25;
						allele_206102 = allele_b_203207[i_211904];
						if (allele_list_206013 != null) { allele_list_206013 = (allele_list_206013).concat((makeNimstrLit("<option value=\"") || []).concat(allele_206102 || [],makeNimstrLit("\">") || [],allele_206102 || [],makeNimstrLit("</option>\x0A") || [])); } else { allele_list_206013 = (makeNimstrLit("<option value=\"") || []).concat(allele_206102 || [],makeNimstrLit("\">") || [],allele_206102 || [],makeNimstrLit("</option>\x0A") || []).slice(); };
						i_211904 += 1;
					}
			} while(false);
		} while(false);
		L26: do {
			var element_206113 = null;
			var i_211908 = 0;
			if ((i_211908 <= 1)) {
			L27: do {
					L28: while (true) {
					if (!true) break L28;
						element_206113 = rec_elements_b_203056[i_211908];
						document.getElementById(toJSStr(element_206113)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211908)) {
						break L27;
						}
						
						i_211908 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L29: do {
			var element_206121 = null;
			var i_211911 = 0;
			if ((i_211911 <= 1)) {
			L30: do {
					L31: while (true) {
					if (!true) break L31;
						element_206121 = don_elements_b_203095[i_211911];
						document.getElementById(toJSStr(element_206121)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211911)) {
						break L30;
						}
						
						i_211911 += 1;
					}
			} while(false);
			}
			
		} while(false);
		allele_list_206013 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L32: do {
			var allele_206131 = null;
			var i_211914 = 0;
			var l_211915 = (allele_c_203224 != null ? allele_c_203224.length : 0);
			L33: do {
					L34: while (true) {
					if (!(i_211914 < l_211915)) break L34;
						allele_206131 = allele_c_203224[i_211914];
						if (allele_list_206013 != null) { allele_list_206013 = (allele_list_206013).concat((makeNimstrLit("<option value=\"") || []).concat(allele_206131 || [],makeNimstrLit("\">") || [],allele_206131 || [],makeNimstrLit("</option>\x0A") || [])); } else { allele_list_206013 = (makeNimstrLit("<option value=\"") || []).concat(allele_206131 || [],makeNimstrLit("\">") || [],allele_206131 || [],makeNimstrLit("</option>\x0A") || []).slice(); };
						i_211914 += 1;
					}
			} while(false);
		} while(false);
		L35: do {
			var element_206142 = null;
			var i_211918 = 0;
			if ((i_211918 <= 1)) {
			L36: do {
					L37: while (true) {
					if (!true) break L37;
						element_206142 = rec_elements_c_203059[i_211918];
						document.getElementById(toJSStr(element_206142)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211918)) {
						break L36;
						}
						
						i_211918 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L38: do {
			var element_206150 = null;
			var i_211921 = 0;
			if ((i_211921 <= 1)) {
			L39: do {
					L40: while (true) {
					if (!true) break L40;
						element_206150 = don_elements_c_203098[i_211921];
						document.getElementById(toJSStr(element_206150)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211921)) {
						break L39;
						}
						
						i_211921 += 1;
					}
			} while(false);
			}
			
		} while(false);
		allele_list_206013 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L41: do {
			var allele_206160 = null;
			var i_211924 = 0;
			var l_211925 = (allele_drb1_203241 != null ? allele_drb1_203241.length : 0);
			L42: do {
					L43: while (true) {
					if (!(i_211924 < l_211925)) break L43;
						allele_206160 = allele_drb1_203241[i_211924];
						if (allele_list_206013 != null) { allele_list_206013 = (allele_list_206013).concat((makeNimstrLit("<option value=\"") || []).concat(allele_206160 || [],makeNimstrLit("\">") || [],allele_206160 || [],makeNimstrLit("</option>\x0A") || [])); } else { allele_list_206013 = (makeNimstrLit("<option value=\"") || []).concat(allele_206160 || [],makeNimstrLit("\">") || [],allele_206160 || [],makeNimstrLit("</option>\x0A") || []).slice(); };
						i_211924 += 1;
					}
			} while(false);
		} while(false);
		L44: do {
			var element_206171 = null;
			var i_211928 = 0;
			if ((i_211928 <= 1)) {
			L45: do {
					L46: while (true) {
					if (!true) break L46;
						element_206171 = rec_elements_drb1_203062[i_211928];
						document.getElementById(toJSStr(element_206171)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211928)) {
						break L45;
						}
						
						i_211928 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L47: do {
			var element_206179 = null;
			var i_211931 = 0;
			if ((i_211931 <= 1)) {
			L48: do {
					L49: while (true) {
					if (!true) break L49;
						element_206179 = don_elements_drb1_203101[i_211931];
						document.getElementById(toJSStr(element_206179)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211931)) {
						break L48;
						}
						
						i_211931 += 1;
					}
			} while(false);
			}
			
		} while(false);
		allele_list_206013 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L50: do {
			var allele_206189 = null;
			var i_211934 = 0;
			var l_211935 = (allele_drb345_203258 != null ? allele_drb345_203258.length : 0);
			L51: do {
					L52: while (true) {
					if (!(i_211934 < l_211935)) break L52;
						allele_206189 = allele_drb345_203258[i_211934];
						if (allele_list_206013 != null) { allele_list_206013 = (allele_list_206013).concat((makeNimstrLit("<option value=\"") || []).concat(allele_206189 || [],makeNimstrLit("\">") || [],allele_206189 || [],makeNimstrLit("</option>\x0A") || [])); } else { allele_list_206013 = (makeNimstrLit("<option value=\"") || []).concat(allele_206189 || [],makeNimstrLit("\">") || [],allele_206189 || [],makeNimstrLit("</option>\x0A") || []).slice(); };
						i_211934 += 1;
					}
			} while(false);
		} while(false);
		L53: do {
			var element_206200 = null;
			var i_211938 = 0;
			if ((i_211938 <= 1)) {
			L54: do {
					L55: while (true) {
					if (!true) break L55;
						element_206200 = rec_elements_drb345_203065[i_211938];
						document.getElementById(toJSStr(element_206200)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211938)) {
						break L54;
						}
						
						i_211938 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L56: do {
			var element_206208 = null;
			var i_211941 = 0;
			if ((i_211941 <= 1)) {
			L57: do {
					L58: while (true) {
					if (!true) break L58;
						element_206208 = don_elements_drb345_203104[i_211941];
						document.getElementById(toJSStr(element_206208)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211941)) {
						break L57;
						}
						
						i_211941 += 1;
					}
			} while(false);
			}
			
		} while(false);
		allele_list_206013 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L59: do {
			var allele_206218 = null;
			var i_211944 = 0;
			var l_211945 = (allele_dqa1_203275 != null ? allele_dqa1_203275.length : 0);
			L60: do {
					L61: while (true) {
					if (!(i_211944 < l_211945)) break L61;
						allele_206218 = allele_dqa1_203275[i_211944];
						if (allele_list_206013 != null) { allele_list_206013 = (allele_list_206013).concat((makeNimstrLit("<option value=\"") || []).concat(allele_206218 || [],makeNimstrLit("\">") || [],allele_206218 || [],makeNimstrLit("</option>\x0A") || [])); } else { allele_list_206013 = (makeNimstrLit("<option value=\"") || []).concat(allele_206218 || [],makeNimstrLit("\">") || [],allele_206218 || [],makeNimstrLit("</option>\x0A") || []).slice(); };
						i_211944 += 1;
					}
			} while(false);
		} while(false);
		L62: do {
			var element_206229 = null;
			var i_211948 = 0;
			if ((i_211948 <= 1)) {
			L63: do {
					L64: while (true) {
					if (!true) break L64;
						element_206229 = rec_elements_dqa1_203068[i_211948];
						document.getElementById(toJSStr(element_206229)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211948)) {
						break L63;
						}
						
						i_211948 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L65: do {
			var element_206237 = null;
			var i_211951 = 0;
			if ((i_211951 <= 1)) {
			L66: do {
					L67: while (true) {
					if (!true) break L67;
						element_206237 = don_elements_dqa1_203107[i_211951];
						document.getElementById(toJSStr(element_206237)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211951)) {
						break L66;
						}
						
						i_211951 += 1;
					}
			} while(false);
			}
			
		} while(false);
		allele_list_206013 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L68: do {
			var allele_206247 = null;
			var i_211954 = 0;
			var l_211955 = (allele_dqb1_203292 != null ? allele_dqb1_203292.length : 0);
			L69: do {
					L70: while (true) {
					if (!(i_211954 < l_211955)) break L70;
						allele_206247 = allele_dqb1_203292[i_211954];
						if (allele_list_206013 != null) { allele_list_206013 = (allele_list_206013).concat((makeNimstrLit("<option value=\"") || []).concat(allele_206247 || [],makeNimstrLit("\">") || [],allele_206247 || [],makeNimstrLit("</option>\x0A") || [])); } else { allele_list_206013 = (makeNimstrLit("<option value=\"") || []).concat(allele_206247 || [],makeNimstrLit("\">") || [],allele_206247 || [],makeNimstrLit("</option>\x0A") || []).slice(); };
						i_211954 += 1;
					}
			} while(false);
		} while(false);
		L71: do {
			var element_206258 = null;
			var i_211958 = 0;
			if ((i_211958 <= 1)) {
			L72: do {
					L73: while (true) {
					if (!true) break L73;
						element_206258 = rec_elements_dqb1_203071[i_211958];
						document.getElementById(toJSStr(element_206258)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211958)) {
						break L72;
						}
						
						i_211958 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L74: do {
			var element_206266 = null;
			var i_211961 = 0;
			if ((i_211961 <= 1)) {
			L75: do {
					L76: while (true) {
					if (!true) break L76;
						element_206266 = don_elements_dqb1_203110[i_211961];
						document.getElementById(toJSStr(element_206266)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211961)) {
						break L75;
						}
						
						i_211961 += 1;
					}
			} while(false);
			}
			
		} while(false);
		allele_list_206013 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L77: do {
			var allele_206276 = null;
			var i_211964 = 0;
			var l_211965 = (allele_dpa1_203309 != null ? allele_dpa1_203309.length : 0);
			L78: do {
					L79: while (true) {
					if (!(i_211964 < l_211965)) break L79;
						allele_206276 = allele_dpa1_203309[i_211964];
						if (allele_list_206013 != null) { allele_list_206013 = (allele_list_206013).concat((makeNimstrLit("<option value=\"") || []).concat(allele_206276 || [],makeNimstrLit("\">") || [],allele_206276 || [],makeNimstrLit("</option>\x0A") || [])); } else { allele_list_206013 = (makeNimstrLit("<option value=\"") || []).concat(allele_206276 || [],makeNimstrLit("\">") || [],allele_206276 || [],makeNimstrLit("</option>\x0A") || []).slice(); };
						i_211964 += 1;
					}
			} while(false);
		} while(false);
		L80: do {
			var element_206287 = null;
			var i_211968 = 0;
			if ((i_211968 <= 1)) {
			L81: do {
					L82: while (true) {
					if (!true) break L82;
						element_206287 = rec_elements_dpa1_203074[i_211968];
						document.getElementById(toJSStr(element_206287)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211968)) {
						break L81;
						}
						
						i_211968 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L83: do {
			var element_206295 = null;
			var i_211971 = 0;
			if ((i_211971 <= 1)) {
			L84: do {
					L85: while (true) {
					if (!true) break L85;
						element_206295 = don_elements_dpa1_203113[i_211971];
						document.getElementById(toJSStr(element_206295)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211971)) {
						break L84;
						}
						
						i_211971 += 1;
					}
			} while(false);
			}
			
		} while(false);
		allele_list_206013 = nimCopy(null, makeNimstrLit("<option value=\"\"></option>"), NTI138);
		L86: do {
			var allele_206305 = null;
			var i_211974 = 0;
			var l_211975 = (allele_dpb1_203326 != null ? allele_dpb1_203326.length : 0);
			L87: do {
					L88: while (true) {
					if (!(i_211974 < l_211975)) break L88;
						allele_206305 = allele_dpb1_203326[i_211974];
						if (allele_list_206013 != null) { allele_list_206013 = (allele_list_206013).concat((makeNimstrLit("<option value=\"") || []).concat(allele_206305 || [],makeNimstrLit("\">") || [],allele_206305 || [],makeNimstrLit("</option>\x0A") || [])); } else { allele_list_206013 = (makeNimstrLit("<option value=\"") || []).concat(allele_206305 || [],makeNimstrLit("\">") || [],allele_206305 || [],makeNimstrLit("</option>\x0A") || []).slice(); };
						i_211974 += 1;
					}
			} while(false);
		} while(false);
		L89: do {
			var element_206316 = null;
			var i_211978 = 0;
			if ((i_211978 <= 1)) {
			L90: do {
					L91: while (true) {
					if (!true) break L91;
						element_206316 = rec_elements_dpb1_203077[i_211978];
						document.getElementById(toJSStr(element_206316)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211978)) {
						break L90;
						}
						
						i_211978 += 1;
					}
			} while(false);
			}
			
		} while(false);
		L92: do {
			var element_206324 = null;
			var i_211981 = 0;
			if ((i_211981 <= 1)) {
			L93: do {
					L94: while (true) {
					if (!true) break L94;
						element_206324 = don_elements_dpb1_203116[i_211981];
						document.getElementById(toJSStr(element_206324)).innerHTML = toJSStr(allele_list_206013);
						if ((1 <= i_211981)) {
						break L93;
						}
						
						i_211981 += 1;
					}
			} while(false);
			}
			
		} while(false);

	
}

function read_possible_eplets_178253(data_178255) {
						var Tmp6;

	var result_178274 = [{data: null, counter: 0}];

		var first_row_178275 = true;
		L1: do {
			var line_178276 = null;
			var first_211993 = 0;
			var last_211994 = 0;
			var eolpos_211995 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!((last_211994 < (data_178255 != null ? data_178255.length : 0)) && !((ConstSet7[data_178255[last_211994]] != undefined)))) break L5;
									last_211994 += 1;
								}
						} while(false);
						eolpos_211995 = last_211994;
						if ((last_211994 < (data_178255 != null ? data_178255.length : 0))) {
						if ((data_178255[last_211994] == 10)) {
						last_211994 += 1;
						}
						else {
						if ((data_178255[last_211994] == 13)) {
						last_211994 += 1;
						if (((last_211994 < (data_178255 != null ? data_178255.length : 0)) && (data_178255[last_211994] == 10))) {
						last_211994 += 1;
						}
						
						}
						}
						}
						
						if (false) {
						Tmp6 = (last_211994 - 1);
						}
						else {
						Tmp6 = (eolpos_211995 - 1);
						}
						
						line_178276 = substr_30222(data_178255, first_211993, Tmp6);
						L7: do {
							var fields_178277 = nsuSplitCharSet(line_178276, ConstSet8, -1);
							if (first_row_178275) {
							if (!(check_eplet_header_177342(fields_178277))) {
							var eHEX60gensym178280_178403 = null;
							eHEX60gensym178280_178403 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
							eHEX60gensym178280_178403.message = nimCopy(null, makeNimstrLit("unknown file format for eplet data"), NTI138);
							eHEX60gensym178280_178403.parent = null;
							raiseException(eHEX60gensym178280_178403, "ValueError");
							}
							else {
								first_row_178275 = false;
								break L7;
							}
							
							}
							else {
							if (((line_178276 != null ? line_178276.length : 0) == 0)) {
							break L7;
							}
							else {
							if (!(((fields_178277 != null ? fields_178277.length : 0) == 3))) {
							var eHEX60gensym178417_178603 = null;
							eHEX60gensym178417_178603 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
							eHEX60gensym178417_178603.message = nimCopy(null, (makeNimstrLit("unknown format of line: \'") || []).concat(line_178276 || [],makeNimstrLit("\'") || []), NTI138);
							eHEX60gensym178417_178603.parent = null;
							raiseException(eHEX60gensym178417_178603, "ValueError");
							}
							}}
							var ep_178610 = new_eplet_177238(fields_178277[0], fields_178277[1], fields_178277[2]);
							incl_178670(result_178274[0], ep_178610);
						} while(false);
						if ((eolpos_211995 == last_211994)) {
						break L2;
						}
						
						first_211993 = last_211994;
					}
			} while(false);
		} while(false);

	return result_178274[0];

}

function get_possible_eplets_206384(data_206386) {
		nimCopy(mm_possible_eplets_203042[0], read_possible_eplets_178253(cstrToNimstr(data_206386)), NTI178262);
		rawEcho(makeNimstrLit("possible eplets loaded from \'"), makeNimstrLit("https://kitcalc.github.io/data/epitopes/mm_possible_eplets.txt"), makeNimstrLit("\'"));

	
}

function get_allele_dp_206405(data_206407) {
		merge_table_206425(alleles_table_203037[0], read_alleles_194489(cstrToNimstr(data_206407), eplets_table_203029[0]));
		rawEcho(makeNimstrLit("alleles loaded from \'"), makeNimstrLit("https://kitcalc.github.io/data/epitopes/dp_alleles.txt"), makeNimstrLit("\'"));
		fill_select_203172();
		make_request_175014("https://kitcalc.github.io/data/epitopes/mm_possible_eplets.txt", get_possible_eplets_206384);

	
}

function get_eplet_dp_207581(data_207583) {
		merge_table_207601(eplets_table_203029[0], read_eplets_182875(cstrToNimstr(data_207583)));
		rawEcho(makeNimstrLit("eplets loaded from \'"), makeNimstrLit("https://kitcalc.github.io/data/epitopes/dp_eplets.txt"), makeNimstrLit("\'"));
		make_request_175014("https://kitcalc.github.io/data/epitopes/dp_alleles.txt", get_allele_dp_206405);

	
}

function get_allele_drdq_208781(data_208783) {
		merge_table_206425(alleles_table_203037[0], read_alleles_194489(cstrToNimstr(data_208783), eplets_table_203029[0]));
		rawEcho(makeNimstrLit("alleles loaded from \'"), makeNimstrLit("https://kitcalc.github.io/data/epitopes/drdq_alleles.txt"), makeNimstrLit("\'"));
		make_request_175014("https://kitcalc.github.io/data/epitopes/dp_eplets.txt", get_eplet_dp_207581);

	
}

function get_eplet_drdq_208829(data_208831) {
		merge_table_207601(eplets_table_203029[0], read_eplets_182875(cstrToNimstr(data_208831)));
		rawEcho(makeNimstrLit("eplets loaded from \'"), makeNimstrLit("https://kitcalc.github.io/data/epitopes/drdq_eplets.txt"), makeNimstrLit("\'"));
		make_request_175014("https://kitcalc.github.io/data/epitopes/drdq_alleles.txt", get_allele_drdq_208781);

	
}

function get_allele_abc_208877(data_208879) {
		nimCopy(alleles_table_203037[0], read_alleles_194489(cstrToNimstr(data_208879), eplets_table_203029[0]), NTI194517);
		rawEcho(makeNimstrLit("alleles loaded from \'"), makeNimstrLit("https://kitcalc.github.io/data/epitopes/abc_alleles.txt"), makeNimstrLit("\'"));
		make_request_175014("https://kitcalc.github.io/data/epitopes/drdq_eplets.txt", get_eplet_drdq_208829);

	
}

function get_eplet_abc_208898(data_208900) {
		nimCopy(eplets_table_203029[0], read_eplets_182875(cstrToNimstr(data_208900)), NTI182911);
		rawEcho(makeNimstrLit("eplets loaded from \'"), makeNimstrLit("https://kitcalc.github.io/data/epitopes/abc_eplets.txt"), makeNimstrLit("\'"));
		make_request_175014("https://kitcalc.github.io/data/epitopes/abc_alleles.txt", get_allele_abc_208877);

	
}
make_request_175014("https://kitcalc.github.io/data/epitopes/abc_eplets.txt", get_eplet_abc_208898);
