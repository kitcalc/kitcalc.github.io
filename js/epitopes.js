/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI71003 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI71002 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI71258 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI71255 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI71252 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI66103 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI39154 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI66667 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI66664 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI66661 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI82032 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI82029 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI82026 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI82023 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI82020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI82017 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3652 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI65005 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI66002 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI66008 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI66004 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI46002 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI71015 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI71012 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI71009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NNI66002 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI66002, name: "epVerified", len: 0, sons: null},
"1": {kind: 1, offset: 1, typ: NTI66002, name: "epVerifiedPair", len: 0, sons: null},
"2": {kind: 1, offset: 2, typ: NTI66002, name: "epOther", len: 0, sons: null}}};
NTI66002.node = NNI66002;
var NNI65005 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI65005, name: "ABC", len: 0, sons: null},
"1": {kind: 1, offset: 1, typ: NTI65005, name: "DRB", len: 0, sons: null},
"2": {kind: 1, offset: 2, typ: NTI65005, name: "DQA1", len: 0, sons: null},
"3": {kind: 1, offset: 3, typ: NTI65005, name: "DQB1", len: 0, sons: null},
"4": {kind: 1, offset: 4, typ: NTI65005, name: "DPA1", len: 0, sons: null},
"5": {kind: 1, offset: 5, typ: NTI65005, name: "DPB1", len: 0, sons: null}}};
NTI65005.node = NNI65005;
var NNI66008 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null},
{kind: 1, offset: "evidence", len: 0, typ: NTI66002, name: "evidence", sons: null},
{kind: 1, offset: "locus", len: 0, typ: NTI65005, name: "locus", sons: null}]};
NTI66008.node = NNI66008;
NTI66004.base = NTI66008;
var NNI71015 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI46002, name: "Field0", sons: null},
{kind: 1, offset: "Field1", len: 0, typ: NTI66004, name: "Field1", sons: null}]};
NTI71015.node = NNI71015;
NTI71012.base = NTI71015;
var NNI71009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI71012, name: "data", sons: null},
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI71009.node = NNI71009;
var NNI3652 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3652.node = NNI3652;
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
NTI3706.base = NTI3626;
NTI3711.base = NTI3626;
var NNI3626 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3706, name: "parent", sons: null},
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null},
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null},
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null},
{kind: 1, offset: "up", len: 0, typ: NTI3711, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3650.base = NTI3626;
NTI3652.base = NTI3650;
NTI82017.base = NTI138;
NTI82020.base = NTI138;
NTI82023.base = NTI138;
NTI82026.base = NTI138;
NTI82029.base = NTI138;
NTI82032.base = NTI138;
var NNI66667 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI46002, name: "Field0", sons: null},
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null},
{kind: 1, offset: "Field2", len: 0, typ: NTI66004, name: "Field2", sons: null}]};
NTI66667.node = NNI66667;
NTI66664.base = NTI66667;
var NNI66661 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI66664, name: "data", sons: null},
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI66661.node = NNI66661;
NTI39154.base = NTI138;
NTI66103.base = NTI138;
var NNI71003 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null},
{kind: 1, offset: "eplets", len: 0, typ: NTI71009, name: "eplets", sons: null},
{kind: 1, offset: "locus", len: 0, typ: NTI65005, name: "locus", sons: null}]};
NTI71003.node = NNI71003;
NTI71002.base = NTI71003;
var NNI71258 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI46002, name: "Field0", sons: null},
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null},
{kind: 1, offset: "Field2", len: 0, typ: NTI71002, name: "Field2", sons: null}]};
NTI71258.node = NNI71258;
NTI71255.base = NTI71258;
var NNI71252 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI71255, name: "data", sons: null},
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI71252.node = NNI71252;

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;



}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}

			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;

			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }

			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }

			break;
		default:
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function cstrToNimstr(c_15203) {
		  var ln = c_15203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_15203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_15203.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;



}

function toJSStr(s_15403) {
		    var len = s_15403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15403[i] < 128)
        asciiPart[i] = fcc(s_15403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));



}

function eqStrings(a_17603, b_17604) {
		    if (a_17603 == b_17604) return true;
    if ((!a_17603) || (!b_17604)) return false;
    var alen = a_17603.length;
    if (alen != b_17604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17603[i] != b_17604[i]) return false;
    return true;



}

function makeNimstrLit(c_15003) {
		    var ln = c_15003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_15003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;



}

function raiseException(e_14406, ename_14407) {
		e_14406.name = ename_14407;
		if ((excHandler == 0)) {
		unhandledException(e_14406);
		}

		throw e_14406;


}
		var recElementsA_82016 = nimCopy(null, [makeNimstrLit("recA1"), makeNimstrLit("recA2")], NTI82017);
		var recElementsB_82019 = nimCopy(null, [makeNimstrLit("recB1"), makeNimstrLit("recB2")], NTI82020);
		var recElementsC_82022 = nimCopy(null, [makeNimstrLit("recC1"), makeNimstrLit("recC2")], NTI82023);
		var donElementsA_82025 = nimCopy(null, [makeNimstrLit("donA1"), makeNimstrLit("donA2")], NTI82026);
		var donElementsB_82028 = nimCopy(null, [makeNimstrLit("donB1"), makeNimstrLit("donB2")], NTI82029);
		var donElementsC_82031 = nimCopy(null, [makeNimstrLit("donC1"), makeNimstrLit("donC2")], NTI82032);

function nimMax(a_19844, b_19845) {
		var Tmp1;

	var result_19846 = 0;

	BeforeRet: do {
		if ((b_19845 <= a_19844)) {
		Tmp1 = a_19844;
		}
		else {
		Tmp1 = b_19845;
		}

		result_19846 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_19846;

}

function mnewString(len_15603) {
		      var result = new Array(len_15603+1);
      result[0] = 0;
      result[len_15603] = 0;
      return result;



}

function rawEcho() {
		      var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);



}
var ConstSet2 = setConstr(0, 13, 10);
var ConstSet3 = setConstr(32, 9, 11, 13, 10, 12);
		var expectedHeader_66091 = nimCopy(null, [makeNimstrLit("eplet"), makeNimstrLit("evidence"), makeNimstrLit("locus")], NTI66103);
var ConstSet4 = setConstr([65, 90]);

function reprEnum(e_21228, typ_21229) {
	var result_21230 = null;

		if (!(isUndefined_21232(typ_21229.node.sons[e_21228]))) {
		result_21230 = nimCopy(null, makeNimstrLit(typ_21229.node.sons[e_21228].name), NTI138);
		}
		else {
			result_21230 = nimCopy(null, (cstrToNimstr((e_21228)+"").slice(0,-1)).concat(makeNimstrLit(" (invalid data!)")), NTI138);
		}


	return result_21230;

}
var ConstSet5 = setConstr(0, 13, 10);
var ConstSet6 = setConstr(32, 9, 11, 13, 10, 12);
		var expectedHeader_71217 = nimCopy(null, [makeNimstrLit("allele"), makeNimstrLit("eplet"), makeNimstrLit("locus")], NTI66103);
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];
var objectID_46231 = [0];
var epletABC_82004 = [{data: null, counter: 0}];
var alleleABC_82008 = [{data: null, counter: 0}];

function init_71090(s_71096, initialSize_71098) {
		s_71096.counter = 0;
		s_71096.data = new Array(initialSize_71098); for (var i=0;i<initialSize_71098;++i) {s_71096.data[i]={Field0: 0, Field1: null};}

}

function initSet_84295(initialSize_84299) {
	var result_84301 = [{data: null, counter: 0}];

		init_71090(result_84301[0], initialSize_84299);

	return result_84301[0];

}

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);

			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }

			break;
		}


}

function isFilled_53256(hcode_53258) {
	var result_53259 = false;

		result_53259 = !((hcode_53258 == 0));

	return result_53259;

}

function emarkamp__46005(h_46007, val_46008) {
	var result_46009 = 0;

		result_46009 = ((h_46007 + val_46008) >>> 0);
		result_46009 = ((result_46009 + (result_46009 << 10)) >>> 0);
		result_46009 = (result_46009 ^ ((result_46009 >>> 0) >>> 6));

	return result_46009;

}

function emarkdollar__46042(h_46044) {
	var result_46045 = 0;

		result_46045 = ((h_46044 + (h_46044 << 3)) >>> 0);
		result_46045 = (result_46045 ^ ((result_46045 >>> 0) >>> 11));
		result_46045 = ((result_46045 + (result_46045 << 15)) >>> 0);

	return result_46045;

}

function hash_46835(x_46837) {
	var result_46838 = 0;

		var h_46839 = 0;
		L1: do {
			var i_46848 = 0;
			var colontmp__46857 = 0;
			colontmp__46857 = ((x_46837 != null ? x_46837.length-1 : 0) - 1);
			var res_46860 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_46860 <= colontmp__46857)) break L3;
						i_46848 = res_46860;
						h_46839 = emarkamp__46005(h_46839, x_46837[i_46848]);
						res_46860 += 1;
					}
			} while(false);
		} while(false);
		result_46838 = emarkdollar__46042(h_46839);

	return result_46838;

}

function hash_66060(x_66064) {
	var result_66065 = 0;

		result_66065 = x_66064;

	return result_66065;

}

function hash_66073(x_66077) {
	var result_66078 = 0;

		result_66078 = x_66077;

	return result_66078;

}

function hash_66052(ep_66054) {
	var result_66055 = 0;

		var h_66056 = 0;
		h_66056 = emarkamp__46005(h_66056, hash_46835(ep_66054.name));
		h_66056 = emarkamp__46005(h_66056, hash_66060(ep_66054.evidence));
		h_66056 = emarkamp__46005(h_66056, hash_66073(ep_66054.locus));
		result_66055 = emarkdollar__46042(h_66056);

	return result_66055;

}

function nextTry_53405(h_53407, maxHash_53408) {
	var result_53409 = 0;

		result_53409 = ((h_53407 + 1) & maxHash_53408);

	return result_53409;

}

function rawGet_77421(s_77426, key_77428, hc_77430, hc_77430_Idx) {
						var Tmp3;

	var result_77431 = 0;

	BeforeRet: do {
		hc_77430[hc_77430_Idx] = hash_66052(key_77428);
		if ((hc_77430[hc_77430_Idx] == 0)) {
		hc_77430[hc_77430_Idx] = 314159265;
		}

		var h_77441 = (hc_77430[hc_77430_Idx] & (s_77426.data != null ? (s_77426.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_53256(s_77426.data[h_77441].Field0)) break L2;
						if (!(s_77426.data[h_77441].Field0 == hc_77430[hc_77430_Idx])) Tmp3 = false; else {							Tmp3 = (s_77426.data[h_77441].Field1 == key_77428);						}					if (Tmp3) {
					result_77431 = h_77441;
					break BeforeRet;
					}

					h_77441 = nextTry_53405(h_77441, (s_77426.data != null ? (s_77426.data.length-1) : -1));
				}
		} while(false);
		result_77431 = (-1 - h_77441);
	} while (false);

	return result_77431;

}

function mustRehash_53296(length_53298, counter_53299) {
	var result_53300 = false;

		result_53300 = (((length_53298 * 2) < (counter_53299 * 3)) || ((length_53298 - counter_53299) < 4));

	return result_53300;

}

function rawGetKnownHC_79391(s_79396, key_79398, hc_79400) {
	var result_79401 = 0;

	BeforeRet: do {
		var h_79410 = (hc_79400 & (s_79396.data != null ? (s_79396.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_53256(s_79396.data[h_79410].Field0)) break L2;
					if (((s_79396.data[h_79410].Field0 == hc_79400) && (s_79396.data[h_79410].Field1 == key_79398))) {
					result_79401 = h_79410;
					break BeforeRet;
					}

					h_79410 = nextTry_53405(h_79410, (s_79396.data != null ? (s_79396.data.length-1) : -1));
				}
		} while(false);
		result_79401 = (-1 - h_79410);
	} while (false);

	return result_79401;

}

function rawInsert_80627(s_80633, data_80637, data_80637_Idx, key_80639, hc_80641, h_80643) {
		data_80637[data_80637_Idx][h_80643].Field1 = key_80639;
		data_80637[data_80637_Idx][h_80643].Field0 = hc_80641;


}

function enlarge_78403(s_78409) {
		var n_78412 = null;
		n_78412 = new Array(((s_78409.data != null ? s_78409.data.length : 0) * 2)); for (var i=0;i<((s_78409.data != null ? s_78409.data.length : 0) * 2);++i) {n_78412[i]={Field0: 0, Field1: null};}		var Tmp1 = s_78409.data; s_78409.data = n_78412; n_78412 = Tmp1;		L2: do {
			var i_78666 = 0;
			var colontmp__81117 = 0;
			colontmp__81117 = (n_78412 != null ? (n_78412.length-1) : -1);
			var res_81120 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_81120 <= colontmp__81117)) break L4;
						i_78666 = res_81120;
						if (isFilled_53256(n_78412[i_78666].Field0)) {
						var j_80136 = (-1 - rawGetKnownHC_79391(s_78409, n_78412[i_78666].Field1, n_78412[i_78666].Field0));
						rawInsert_80627(s_78409, s_78409, "data", n_78412[i_78666].Field1, n_78412[i_78666].Field0, j_80136);
						}

						res_81120 += 1;
					}
			} while(false);
		} while(false);


}

function incl_77278(s_77284, key_77286) {
		var hc_77401 = [0];
		var index_78168 = rawGet_77421(s_77284, key_77286, hc_77401, 0);
		if ((index_78168 < 0)) {
		if (mustRehash_53296((s_77284.data != null ? s_77284.data.length : 0), s_77284.counter)) {
		enlarge_78403(s_77284);
		index_78168 = rawGetKnownHC_79391(s_77284, key_77286, hc_77401[0]);
		}

		rawInsert_80627(s_77284, s_77284, "data", key_77286, hc_77401[0], (-1 - index_78168));
		s_77284.counter += 1;
		}



}

function incl_84689(s_84695, other_84698) {
		L1: do {
			var item_85696 = null;
			L2: do {
				var h_85789 = 0;
				var colontmp__85791 = 0;
				colontmp__85791 = (other_84698.data != null ? (other_84698.data.length-1) : -1);
				var res_85793 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_85793 <= colontmp__85791)) break L4;
							h_85789 = res_85793;
							if (isFilled_53256(other_84698.data[h_85789].Field0)) {
							item_85696 = other_84698.data[h_85789].Field1;
							incl_77278(s_84695, item_85696);
							}

							res_85793 += 1;
						}
				} while(false);
			} while(false);
		} while(false);


}

function isFilled_49465(hcode_49467) {
	var result_49468 = false;

		result_49468 = !((hcode_49467 == 0));

	return result_49468;

}

function nextTry_49601(h_49603, maxHash_49604) {
	var result_49605 = 0;

		result_49605 = ((h_49603 + 1) & maxHash_49604);

	return result_49605;

}

function rawGet_71676(t_71681, key_71683, hc_71685, hc_71685_Idx) {
						var Tmp3;

	var result_71686 = 0;

	BeforeRet: do {
		hc_71685[hc_71685_Idx] = hash_46835(key_71683);
		if ((hc_71685[hc_71685_Idx] == 0)) {
		hc_71685[hc_71685_Idx] = 314159265;
		}

		var h_71698 = (hc_71685[hc_71685_Idx] & (t_71681.data != null ? (t_71681.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_49465(t_71681.data[h_71698].Field0)) break L2;
						if (!(t_71681.data[h_71698].Field0 == hc_71685[hc_71685_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_71681.data[h_71698].Field1, key_71683);						}					if (Tmp3) {
					result_71686 = h_71698;
					break BeforeRet;
					}

					h_71698 = nextTry_49601(h_71698, (t_71681.data != null ? (t_71681.data.length-1) : -1));
				}
		} while(false);
		result_71686 = (-1 - h_71698);
	} while (false);

	return result_71686;

}

function add_12029(x_12032, x_12032_Idx, y_12033) {
		        var len = x_12032[0].length-1;
        for (var i = 0; i < y_12033.length; ++i) {
          x_12032[0][len] = y_12033.charCodeAt(i);
          ++len;
        }
        x_12032[0][len] = 0



}

function unhandledException(e_14253) {
			var Tmp1;

		var buf_14254 = [makeNimstrLit("")];
			if (!!(eqStrings(e_14253.message, null))) Tmp1 = false; else {				Tmp1 = !((e_14253.message[0] == 0));			}		if (Tmp1) {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(e_14253.message); } else { buf_14254[0] = e_14253.message;};
		}
		else {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception");};
		}

		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_14254[0] = makeNimstrLit(" [");};
		add_12029(buf_14254, 0, e_14253.name);
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_14254[0] = makeNimstrLit("]\x0A");};
		var cbuf_14401 = toJSStr(buf_14254[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14401);
  }
  else {
    throw cbuf_14401;
  }



}

function X5BX5D__76285(t_76292, key_76294) {
	var result_76296 = [null, 0];
	var result_76296_Idx = 0;

		var hc_76298 = [0];
		var index_76312 = rawGet_71676(t_76292, key_76294, hc_76298, 0);
		if ((0 <= index_76312)) {
		result_76296 = t_76292.data[index_76312]; result_76296_Idx = "Field2";
		}
		else {
			var e_76606 = null;
			e_76606 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, up: null};
			e_76606.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(key_76294), NTI138);
			e_76606.parent = null;
			raiseException(e_76606, "KeyError");
		}


	return [result_76296, result_76296_Idx];

}

function getEplets_84283(elementsA_84287, elementsB_84288, elementsC_84289) {
						var Tmp4;
						var Tmp8;
						var Tmp12;

	var result_84292 = [{data: null, counter: 0}];

		nimCopy(result_84292[0], initSet_84295(64), NTI71009);
		L1: do {
			var element_84340 = null;
			var i_86539 = 0;
			if ((i_86539 <= 1)) {
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						element_84340 = elementsA_84287[i_86539];
						var allele_84341 = cstrToNimstr(document.getElementById(toJSStr(element_84340)).value);
						incl_84689(result_84292[0], (Tmp4 = X5BX5D__76285(alleleABC_82008[0], allele_84341), Tmp4[0])[Tmp4[1]].eplets);
						if ((1 <= i_86539)) {
						break L2;
						}

						i_86539 += 1;
					}
			} while(false);
			}

		} while(false);
		L5: do {
			var element_85806 = null;
			var i_86544 = 0;
			if ((i_86544 <= 1)) {
			L6: do {
					L7: while (true) {
					if (!true) break L7;
						element_85806 = elementsB_84288[i_86544];
						var allele_85807 = cstrToNimstr(document.getElementById(toJSStr(element_85806)).value);
						incl_84689(result_84292[0], (Tmp8 = X5BX5D__76285(alleleABC_82008[0], allele_85807), Tmp8[0])[Tmp8[1]].eplets);
						if ((1 <= i_86544)) {
						break L6;
						}

						i_86544 += 1;
					}
			} while(false);
			}

		} while(false);
		L9: do {
			var element_86175 = null;
			var i_86549 = 0;
			if ((i_86549 <= 1)) {
			L10: do {
					L11: while (true) {
					if (!true) break L11;
						element_86175 = elementsC_84289[i_86549];
						var allele_86176 = cstrToNimstr(document.getElementById(toJSStr(element_86175)).value);
						incl_84689(result_84292[0], (Tmp12 = X5BX5D__76285(alleleABC_82008[0], allele_86176), Tmp12[0])[Tmp12[1]].eplets);
						if ((1 <= i_86549)) {
						break L10;
						}

						i_86549 += 1;
					}
			} while(false);
			}

		} while(false);

	return result_84292[0];

}

function contains_87214(s_87219, key_87221) {
	var result_87222 = false;

		var hc_87401 = [0];
		var index_87432 = rawGet_77421(s_87219, key_87221, hc_87401, 0);
		result_87222 = (0 <= index_87432);

	return result_87222;

}

function difference_86742(s1_86747, s2_86750) {
	var result_86752 = [{data: null, counter: 0}];

		nimCopy(result_86752[0], initSet_84295(64), NTI71009);
		L1: do {
			var item_87016 = null;
			L2: do {
				var h_87527 = 0;
				var colontmp__87529 = 0;
				colontmp__87529 = (s1_86747.data != null ? (s1_86747.data.length-1) : -1);
				var res_87531 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_87531 <= colontmp__87529)) break L4;
							h_87527 = res_87531;
							if (isFilled_53256(s1_86747.data[h_87527].Field0)) {
							item_87016 = s1_86747.data[h_87527].Field1;
							if (!(contains_87214(s2_86750, item_87016))) {
							incl_77278(result_86752[0], item_87016);
							}

							}

							res_87531 += 1;
						}
				} while(false);
			} while(false);
		} while(false);

	return result_86752[0];

}

function minus__86711(s1_86716, s2_86719) {
	var result_86721 = {data: null, counter: 0};

		nimCopy(result_86721, difference_86742(s1_86716, s2_86719), NTI71009);

	return result_86721;

}

function card_86598(s_86603) {
	var result_86604 = 0;

		result_86604 = s_86603.counter;

	return result_86604;

}

function newSeq_82040(len_82044) {
	var result_82046 = null;

		result_82046 = new Array(len_82044); for (var i=0;i<len_82044;++i) {result_82046[i]=null;}
	return result_82046;

}

function star__35008(x_35010, order_35011) {
	var result_35012 = 0;

		var y_35019 = (order_35011 - 1);
		result_35012 = ((x_35010 ^ y_35019) - y_35019);

	return result_35012;

}

function merge_82719(a_82725, b_82729, lo_82731, m_82733, hi_82735, cmp_82742, order_82744) {
	BeforeRet: do {
		if ((star__35008(cmp_82742(a_82725[m_82733], a_82725[(m_82733 + 1)]), order_82744) <= 0)) {
		break BeforeRet;
		}

		var j_82745 = lo_82731;
		var bb_83001 = 0;
		L1: do {
				L2: while (true) {
				if (!(j_82745 <= m_82733)) break L2;
					b_82729[bb_83001] = a_82725[j_82745];
					bb_83001 += 1;
					j_82745 += 1;
				}
		} while(false);
		var i_83219 = 0;
		var k_83220 = lo_82731;
		L3: do {
				L4: while (true) {
				if (!((k_83220 < j_82745) && (j_82745 <= hi_82735))) break L4;
					if ((star__35008(cmp_82742(b_82729[i_83219], a_82725[j_82745]), order_82744) <= 0)) {
					a_82725[k_83220] = b_82729[i_83219];
					i_83219 += 1;
					}
					else {
						a_82725[k_83220] = a_82725[j_82745];
						j_82745 += 1;
					}

					k_83220 += 1;
				}
		} while(false);
		L5: do {
				L6: while (true) {
				if (!(k_83220 < j_82745)) break L6;
					a_82725[k_83220] = b_82729[i_83219];
					k_83220 += 1;
					i_83219 += 1;
				}
		} while(false);
	} while (false);


}

function sort_82676(a_82682, cmp_82689, order_82691) {
		var n_82698 = (a_82682 != null ? a_82682.length : 0);
		var b_82700 = null;
		b_82700 = new Array(Math.trunc(n_82698 / 2)); for (var i=0;i<Math.trunc(n_82698 / 2);++i) {b_82700[i]=null;}		var s_82714 = 1;
		L1: do {
				L2: while (true) {
				if (!(s_82714 < n_82698)) break L2;
					var m_82715 = ((n_82698 - 1) - s_82714);
					L3: do {
							L4: while (true) {
							if (!(0 <= m_82715)) break L4;
								merge_82719(a_82682, b_82700, nimMax(((m_82715 - s_82714) + 1), 0), m_82715, (m_82715 + s_82714), cmp_82689, order_82691);
								m_82715 -= (s_82714 * 2);
							}
					} while(false);
					s_82714 = (s_82714 * 2);
				}
		} while(false);


}

function cmpStrings(a_17403, b_17404) {
		    if (a_17403 == b_17404) return 0;
    if (!a_17403) return -1;
    if (!b_17404) return 1;
    for (var i = 0; i < a_17403.length-1; ++i) {
      var result = a_17403[i] - b_17404[i];
      if (result != 0) return result;
    }
    return 0;



}

function cmp_6445(x_6447, y_6448) {
	var result_17410 = 0;

	BeforeRet: do {
		result_17410 = cmpStrings(x_6447, y_6448);
		break BeforeRet;
	} while (false);

	return result_17410;

}

function nsuJoinSep(a_41582, sep_41583) {
	var result_41584 = null;

		if ((0 < (a_41582 != null ? a_41582.length : 0))) {
		var L_41597 = ((sep_41583 != null ? sep_41583.length-1 : 0) * ((a_41582 != null ? a_41582.length : 0) - 1));
		L1: do {
			var i_41613 = 0;
			var colontmp__41640 = 0;
			colontmp__41640 = (a_41582 != null ? (a_41582.length-1) : -1);
			var res_41643 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_41643 <= colontmp__41640)) break L3;
						i_41613 = res_41643;
						L_41597 += (a_41582[i_41613] != null ? a_41582[i_41613].length-1 : 0);
						res_41643 += 1;
					}
			} while(false);
		} while(false);
		result_41584 = nimCopy(null, mnewString(0), NTI138);
		if (result_41584 != null) { result_41584 = (result_41584.slice(0, -1)).concat(a_41582[0]); } else { result_41584 = a_41582[0];};
		L4: do {
			var i_41638 = 0;
			var colontmp__41648 = 0;
			colontmp__41648 = (a_41582 != null ? (a_41582.length-1) : -1);
			var res_41651 = 1;
			L5: do {
					L6: while (true) {
					if (!(res_41651 <= colontmp__41648)) break L6;
						i_41638 = res_41651;
						if (result_41584 != null) { result_41584 = (result_41584.slice(0, -1)).concat(sep_41583); } else { result_41584 = sep_41583;};
						if (result_41584 != null) { result_41584 = (result_41584.slice(0, -1)).concat(a_41582[i_41638]); } else { result_41584 = a_41582[i_41638];};
						res_41651 += 1;
					}
			} while(false);
		} while(false);
		}
		else {
			result_41584 = nimCopy(null, makeNimstrLit(""), NTI138);
		}


	return result_41584;

}

function outputMismatchedEplets_86550(eplets_86554) {
		document.getElementById("hvgEpletCount").innerHTML = toJSStr(cstrToNimstr((card_86598(eplets_86554))+""));
		var sortedEplets_86632 = newSeq_82040(0);
		L1: do {
			var eplet_86640 = null;
			L2: do {
				var h_86680 = 0;
				var colontmp__86682 = 0;
				colontmp__86682 = (eplets_86554.data != null ? (eplets_86554.data.length-1) : -1);
				var res_86684 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_86684 <= colontmp__86682)) break L4;
							h_86680 = res_86684;
							if (isFilled_53256(eplets_86554.data[h_86680].Field0)) {
							eplet_86640 = eplets_86554.data[h_86680].Field1;
							var Tmp5 = nimCopy(null, eplet_86640.name, NTI138);
							if (sortedEplets_86632 != null) { sortedEplets_86632.push(Tmp5); } else { sortedEplets_86632 = [Tmp5]; };
							}

							res_86684 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		sort_82676(sortedEplets_86632, cmp_6445, 1);
		document.getElementById("hvgMismatchedEplets").innerHTML = toJSStr(nsuJoinSep(sortedEplets_86632, makeNimstrLit(", ")));


}

function showMismatchedEplets() {
		var recEplets_86689 = getEplets_84283(recElementsA_82016, recElementsB_82019, recElementsC_82022);
		var donEplets_86690 = getEplets_84283(donElementsA_82025, donElementsB_82028, donElementsC_82031);
		var hvgEplets_87534 = minus__86711(donEplets_86690, recEplets_86689);
		if (document.getElementById("includeOther").checked) {
		outputMismatchedEplets_86550(hvgEplets_87534);
		}
		else {
			var otherExcluded_87543 = [initSet_84295(64)];
			L1: do {
				var eplet_87551 = null;
				L2: do {
					var h_87653 = 0;
					var colontmp__87655 = 0;
					colontmp__87655 = (hvgEplets_87534.data != null ? (hvgEplets_87534.data.length-1) : -1);
					var res_87657 = 0;
					L3: do {
							L4: while (true) {
							if (!(res_87657 <= colontmp__87655)) break L4;
								h_87653 = res_87657;
								if (isFilled_53256(hvgEplets_87534.data[h_87653].Field0)) {
								eplet_87551 = hvgEplets_87534.data[h_87653].Field1;
								if (!((eplet_87551.evidence == 2))) {
								incl_77278(otherExcluded_87543[0], eplet_87551);
								}

								}

								res_87657 += 1;
							}
					} while(false);
				} while(false);
			} while(false);
			outputMismatchedEplets_86550(otherExcluded_87543[0]);
		}



}

function makeRequest_64001(url_64003, cb_64007) {

		function alertContents_64018(e_64020) {
				if ((xhr_64008.readyState == 4)) {
				if ((xhr_64008.status == 200)) {
				cb_64007(xhr_64008.responseText);
				}
				else {
				rawEcho(makeNimstrLit("Could not retrieve data from "), cstrToNimstr(url_64003));
				}

				}



		}

	BeforeRet: do {
		var xhr_64008 = new XMLHttpRequest();
		xhr_64008.responseType = "text";
		if ((xhr_64008 === null)) {
		rawEcho(makeNimstrLit("Cannot create an XMLHTTP instance for url "), cstrToNimstr(url_64003));
		break BeforeRet;
		}

		xhr_64008.onreadystatechange = alertContents_64018;
		xhr_64008.open("GET", url_64003, true, null, null);
		xhr_64008.send();
	} while (false);


}

function initTable_66683(initialSize_66688) {
	var result_66690 = {data: null, counter: 0};

		result_66690.counter = 0;
		result_66690.data = new Array(initialSize_66688); for (var i=0;i<initialSize_66688;++i) {result_66690.data[i]={Field0: 0, Field1: null, Field2: null};}
	return result_66690;

}

function nsuSplitCharSet(s_39132, seps_39134, maxsplit_39135) {
	var result_39137 = null;

		result_39137 = nimCopy(null, [], NTI39154);
		L1: do {
			var x_39156 = null;
			var last_39171 = 0;
			var splits_39173 = maxsplit_39135;
			L2: do {
					L3: while (true) {
					if (!(last_39171 <= (s_39132 != null ? s_39132.length-1 : 0))) break L3;
						var first_39175 = last_39171;
						L4: do {
								L5: while (true) {
								if (!((last_39171 < (s_39132 != null ? s_39132.length-1 : 0)) && !((seps_39134[s_39132[last_39171]] != undefined)))) break L5;
									last_39171 += 1;
								}
						} while(false);
						if ((splits_39173 == 0)) {
						last_39171 = (s_39132 != null ? s_39132.length-1 : 0);
						}

						x_39156 = (s_39132.slice(first_39175, ((last_39171 - 1))+1).concat(0));
						var Tmp6 = nimCopy(null, x_39156, NTI138);
						if (result_39137 != null) { result_39137.push(Tmp6); } else { result_39137 = [Tmp6]; };
						if ((splits_39173 == 0)) {
						break L2;
						}

						splits_39173 -= 1;
						last_39171 += 1;
					}
			} while(false);
		} while(false);

	return result_39137;

}

function seqToPtr_66409(x_66414) {
		return x_66414


}

function eqeq__66105(x_66110, y_66113) {
	var result_66114 = false;

	BeforeRet: do {
		if ((seqToPtr_66409(x_66110) == seqToPtr_66409(y_66113))) {
		result_66114 = true;
		break BeforeRet;
		}

		if (((x_66110 === null) || (y_66113 === null))) {
		result_66114 = false;
		break BeforeRet;
		}

		if (!(((x_66110 != null ? x_66110.length : 0) == (y_66113 != null ? y_66113.length : 0)))) {
		result_66114 = false;
		break BeforeRet;
		}

		L1: do {
			var i_66644 = 0;
			var colontmp__66646 = 0;
			colontmp__66646 = ((x_66110 != null ? x_66110.length : 0) - 1);
			var res_66649 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_66649 <= colontmp__66646)) break L3;
						i_66644 = res_66649;
						if (!(eqStrings(x_66110[i_66644], y_66113[i_66644]))) {
						result_66114 = false;
						break BeforeRet;
						}

						res_66649 += 1;
					}
			} while(false);
		} while(false);
		result_66114 = true;
		break BeforeRet;
	} while (false);

	return result_66114;

}

function checkEpletHeader_66086(fields_66089) {
	var result_66090 = false;

		result_66090 = eqeq__66105(fields_66089, expectedHeader_66091);

	return result_66090;

}

function parseEvidence_66018(evidence_66020) {
	var result_66021 = 0;

		switch (toJSStr(evidence_66020)) {
		case "verified_eplet":
			result_66021 = 0;
			break;
		case "verified_pair":
			result_66021 = 1;
			break;
		case "other_eplet":
			result_66021 = 2;
			break;
		default:
			var e_66028 = null;
			e_66028 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, up: null};
			e_66028.message = nimCopy(null, (makeNimstrLit("unknown eplet evidence: ").slice(0,-1)).concat(evidence_66020), NTI138);
			e_66028.parent = null;
			raiseException(e_66028, "ValueError");
			break;
		}

	return result_66021;

}

function nsuToLowerAsciiChar(c_37782) {
	var result_37783 = 0;

		if ((ConstSet4[c_37782] != undefined)) {
		result_37783 = (c_37782 + 32);
		}
		else {
			result_37783 = c_37782;
		}


	return result_37783;

}

function nsuCmpIgnoreStyle(a_38047, b_38048) {
						var Tmp7;

	var result_38049 = 0;

		var i_38050 = 0;
		var j_38051 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!(a_38047[i_38050] == 95)) break L4;
								i_38050 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!(b_38048[j_38051] == 95)) break L6;
								j_38051 += 1;
							}
					} while(false);
					var aa_38070 = nsuToLowerAsciiChar(a_38047[i_38050]);
					var bb_38071 = nsuToLowerAsciiChar(b_38048[j_38051]);
					result_38049 = (aa_38070 - bb_38071);
						if (!((result_38049 == 0))) Tmp7 = true; else {							Tmp7 = (aa_38070 == 0);						}					if (Tmp7) {
					break L1;
					}

					i_38050 += 1;
					j_38051 += 1;
				}
		} while(false);

	return result_38049;

}

function isUndefined_21232(x_21236) {
	var result_21237 = false;

		result_21237 = x_21236 === undefined;

	return result_21237;

}

function parseEnum_65020(s_65024) {
	var result_65025 = 0;

	BeforeRet: do {
		L1: do {
			var e_65214 = 0;
			var res_65240 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_65240 <= 5)) break L3;
						e_65214 = res_65240;
						if ((nsuCmpIgnoreStyle(s_65024, reprEnum(e_65214, NTI65005)) == 0)) {
						result_65025 = e_65214;
						break BeforeRet;
						}

						res_65240 += 1;
					}
			} while(false);
		} while(false);
		var e_65226 = null;
		e_65226 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, up: null};
		e_65226.message = nimCopy(null, (makeNimstrLit("invalid enum value: ").slice(0,-1)).concat(s_65024), NTI138);
		e_65226.parent = null;
		raiseException(e_65226, "ValueError");
	} while (false);

	return result_65025;

}

function parseLocus_65012(locusstr_65014) {
	var result_65015 = 0;

		result_65015 = parseEnum_65020(locusstr_65014);

	return result_65015;

}

function newEplet_66038(name_66040, evidence_66041, locus_66042) {
	var result_66043 = null;

		result_66043 = {name: null, evidence: 0, locus: 0};
		result_66043.name = nimCopy(null, name_66040, NTI138);
		result_66043.evidence = parseEvidence_66018(evidence_66041);
		result_66043.locus = parseLocus_65012(locus_66042);

	return result_66043;

}

function rawGet_67012(t_67017, key_67019, hc_67021, hc_67021_Idx) {
						var Tmp3;

	var result_67022 = 0;

	BeforeRet: do {
		hc_67021[hc_67021_Idx] = hash_46835(key_67019);
		if ((hc_67021[hc_67021_Idx] == 0)) {
		hc_67021[hc_67021_Idx] = 314159265;
		}

		var h_67034 = (hc_67021[hc_67021_Idx] & (t_67017.data != null ? (t_67017.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_49465(t_67017.data[h_67034].Field0)) break L2;
						if (!(t_67017.data[h_67034].Field0 == hc_67021[hc_67021_Idx])) Tmp3 = false; else {							Tmp3 = eqStrings(t_67017.data[h_67034].Field1, key_67019);						}					if (Tmp3) {
					result_67022 = h_67034;
					break BeforeRet;
					}

					h_67034 = nextTry_49601(h_67034, (t_67017.data != null ? (t_67017.data.length-1) : -1));
				}
		} while(false);
		result_67022 = (-1 - h_67034);
	} while (false);

	return result_67022;

}

function mustRehash_49470(length_49472, counter_49473) {
	var result_49474 = false;

		result_49474 = (((length_49472 * 2) < (counter_49473 * 3)) || ((length_49472 - counter_49473) < 4));

	return result_49474;

}

function rawInsert_69235(t_69242, data_69246, data_69246_Idx, key_69248, val_69250, hc_69252, h_69254) {
		data_69246[data_69246_Idx][h_69254].Field1 = nimCopy(null, key_69248, NTI138);
		data_69246[data_69246_Idx][h_69254].Field2 = val_69250;
		data_69246[data_69246_Idx][h_69254].Field0 = hc_69252;


}

function enlarge_68110(t_68117) {
		var n_68121 = null;
		n_68121 = new Array(((t_68117.data != null ? t_68117.data.length : 0) * 2)); for (var i=0;i<((t_68117.data != null ? t_68117.data.length : 0) * 2);++i) {n_68121[i]={Field0: 0, Field1: null, Field2: null};}		var Tmp1 = t_68117.data; t_68117.data = n_68121; n_68121 = Tmp1;		L2: do {
			var i_68333 = 0;
			var colontmp__69911 = 0;
			colontmp__69911 = (n_68121 != null ? (n_68121.length-1) : -1);
			var res_69914 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_69914 <= colontmp__69911)) break L4;
						i_68333 = res_69914;
						var eh_68551 = n_68121[i_68333].Field0;
						if (isFilled_49465(eh_68551)) {
						var j_68560 = (eh_68551 & (t_68117.data != null ? (t_68117.data.length-1) : -1));
						L5: do {
								L6: while (true) {
								if (!isFilled_49465(t_68117.data[j_68560].Field0)) break L6;
									j_68560 = nextTry_49601(j_68560, (t_68117.data != null ? (t_68117.data.length-1) : -1));
								}
						} while(false);
						rawInsert_69235(t_68117, t_68117, "data", n_68121[i_68333].Field1, n_68121[i_68333].Field2, eh_68551, j_68560);
						}

						res_69914 += 1;
					}
			} while(false);
		} while(false);


}

function rawGetKnownHC_69919(t_69924, key_69926, hc_69928) {
	var result_69929 = 0;

	BeforeRet: do {
		var h_69938 = (hc_69928 & (t_69924.data != null ? (t_69924.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_49465(t_69924.data[h_69938].Field0)) break L2;
					if (((t_69924.data[h_69938].Field0 == hc_69928) && eqStrings(t_69924.data[h_69938].Field1, key_69926))) {
					result_69929 = h_69938;
					break BeforeRet;
					}

					h_69938 = nextTry_49601(h_69938, (t_69924.data != null ? (t_69924.data.length-1) : -1));
				}
		} while(false);
		result_69929 = (-1 - h_69938);
	} while (false);

	return result_69929;

}

function X5BX5Deq__66998(t_67005, key_67007, val_67009) {
		var hc_67010 = [0];
		var index_67697 = rawGet_67012(t_67005, key_67007, hc_67010, 0);
		if ((0 <= index_67697)) {
		t_67005.data[index_67697].Field2 = val_67009;
		}
		else {
			if (mustRehash_49470((t_67005.data != null ? t_67005.data.length : 0), t_67005.counter)) {
			enlarge_68110(t_67005);
			index_67697 = rawGetKnownHC_69919(t_67005, key_67007, hc_67010[0]);
			}

			index_67697 = (-1 - index_67697);
			rawInsert_69235(t_67005, t_67005, "data", key_67007, val_67009, hc_67010[0], index_67697);
			t_67005.counter += 1;
		}



}

function readEplets_66653(data_66655) {
	var result_66679 = [{data: null, counter: 0}];

		nimCopy(result_66679[0], initTable_66683(64), NTI66661);
		var firstRow_66811 = true;
		L1: do {
			var line_66812 = null;
			var first_70654 = 0;
			var last_70656 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!!((ConstSet2[data_66655[last_70656]] != undefined))) break L5;
									last_70656 += 1;
								}
						} while(false);
						line_66812 = (data_66655.slice(first_70654, ((last_70656 - 1))+1).concat(0));
						L6: do {
							var fields_66813 = nsuSplitCharSet(line_66812, ConstSet3, -1);
							if (firstRow_66811) {
							if (!(checkEpletHeader_66086(fields_66813))) {
							var e_66820 = null;
							e_66820 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, up: null};
							e_66820.message = nimCopy(null, makeNimstrLit("unknown file format for eplet data"), NTI138);
							e_66820.parent = null;
							raiseException(e_66820, "ValueError");
							}
							else {
								firstRow_66811 = false;
								break L6;
							}

							}
							else {
							if (((line_66812 != null ? line_66812.length-1 : 0) == 0)) {
							break L6;
							}
							else {
							if (!(((fields_66813 != null ? fields_66813.length : 0) == 3))) {
							var e_66842 = null;
							e_66842 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, up: null};
							e_66842.message = nimCopy(null, (makeNimstrLit("unknown format of line: \'").slice(0,-1)).concat(line_66812.slice(0,-1),makeNimstrLit("\'")), NTI138);
							e_66842.parent = null;
							raiseException(e_66842, "ValueError");
							}
							}}
							var ep_66851 = newEplet_66038(fields_66813[0], fields_66813[1], fields_66813[2]);
							X5BX5Deq__66998(result_66679[0], ep_66851.name, ep_66851);
						} while(false);
						if ((data_66655[last_70656] == 10)) {
						last_70656 += 1;
						}
						else {
						if ((data_66655[last_70656] == 13)) {
						last_70656 += 1;
						if ((data_66655[last_70656] == 10)) {
						last_70656 += 1;
						}

						}
						else {
							break L2;
						}
						}
						first_70654 = last_70656;
					}
			} while(false);
		} while(false);

	return result_66679[0];

}

function initTable_71274(initialSize_71279) {
	var result_71281 = {data: null, counter: 0};

		result_71281.counter = 0;
		result_71281.data = new Array(initialSize_71279); for (var i=0;i<initialSize_71279;++i) {result_71281.data[i]={Field0: 0, Field1: null, Field2: null};}
	return result_71281;

}

function checkAlleleHeader_71212(fields_71215) {
	var result_71216 = false;

		result_71216 = eqeq__66105(fields_71215, expectedHeader_71217);

	return result_71216;

}

function hasKey_71664(t_71670, key_71672) {
	var result_71673 = false;

		var hc_71674 = [0];
		result_71673 = (0 <= rawGet_71676(t_71670, key_71672, hc_71674, 0));

	return result_71673;

}

function contains_71651(t_71657, key_71659) {
	var result_71660 = false;

	BeforeRet: do {
		result_71660 = hasKey_71664(t_71657, key_71659);
		break BeforeRet;
	} while (false);

	return result_71660;

}

function rawInsert_74299(t_74306, data_74310, data_74310_Idx, key_74312, val_74314, hc_74316, h_74318) {
		data_74310[data_74310_Idx][h_74318].Field1 = nimCopy(null, key_74312, NTI138);
		data_74310[data_74310_Idx][h_74318].Field2 = val_74314;
		data_74310[data_74310_Idx][h_74318].Field0 = hc_74316;


}

function enlarge_73060(t_73067) {
		var n_73071 = null;
		n_73071 = new Array(((t_73067.data != null ? t_73067.data.length : 0) * 2)); for (var i=0;i<((t_73067.data != null ? t_73067.data.length : 0) * 2);++i) {n_73071[i]={Field0: 0, Field1: null, Field2: null};}		var Tmp1 = t_73067.data; t_73067.data = n_73071; n_73071 = Tmp1;		L2: do {
			var i_73325 = 0;
			var colontmp__75029 = 0;
			colontmp__75029 = (n_73071 != null ? (n_73071.length-1) : -1);
			var res_75032 = 0;
			L3: do {
					L4: while (true) {
					if (!(res_75032 <= colontmp__75029)) break L4;
						i_73325 = res_75032;
						var eh_73561 = n_73071[i_73325].Field0;
						if (isFilled_49465(eh_73561)) {
						var j_73570 = (eh_73561 & (t_73067.data != null ? (t_73067.data.length-1) : -1));
						L5: do {
								L6: while (true) {
								if (!isFilled_49465(t_73067.data[j_73570].Field0)) break L6;
									j_73570 = nextTry_49601(j_73570, (t_73067.data != null ? (t_73067.data.length-1) : -1));
								}
						} while(false);
						rawInsert_74299(t_73067, t_73067, "data", n_73071[i_73325].Field1, n_73071[i_73325].Field2, eh_73561, j_73570);
						}

						res_75032 += 1;
					}
			} while(false);
		} while(false);


}

function rawGetKnownHC_75037(t_75042, key_75044, hc_75046) {
	var result_75047 = 0;

	BeforeRet: do {
		var h_75056 = (hc_75046 & (t_75042.data != null ? (t_75042.data.length-1) : -1));
		L1: do {
				L2: while (true) {
				if (!isFilled_49465(t_75042.data[h_75056].Field0)) break L2;
					if (((t_75042.data[h_75056].Field0 == hc_75046) && eqStrings(t_75042.data[h_75056].Field1, key_75044))) {
					result_75047 = h_75056;
					break BeforeRet;
					}

					h_75056 = nextTry_49601(h_75056, (t_75042.data != null ? (t_75042.data.length-1) : -1));
				}
		} while(false);
		result_75047 = (-1 - h_75056);
	} while (false);

	return result_75047;

}

function X5BX5Deq__72562(t_72569, key_72571, val_72573) {
		var hc_72574 = [0];
		var index_72587 = rawGet_71676(t_72569, key_72571, hc_72574, 0);
		if ((0 <= index_72587)) {
		t_72569.data[index_72587].Field2 = val_72573;
		}
		else {
			if (mustRehash_49470((t_72569.data != null ? t_72569.data.length : 0), t_72569.counter)) {
			enlarge_73060(t_72569);
			index_72587 = rawGetKnownHC_75037(t_72569, key_72571, hc_72574[0]);
			}

			index_72587 = (-1 - index_72587);
			rawInsert_74299(t_72569, t_72569, "data", key_72571, val_72573, hc_72574[0], index_72587);
			t_72569.counter += 1;
		}



}

function newAllele_71034(name_71036, locus_71037) {
	var result_71038 = null;

		result_71038 = {name: null, eplets: {data: null, counter: 0}, locus: 0};
		result_71038.name = nimCopy(null, name_71036, NTI138);
		init_71090(result_71038.eplets, 64);
		result_71038.locus = parseLocus_65012(locus_71037);

	return result_71038;

}

function hasKey_76029(t_76035, key_76037) {
	var result_76038 = false;

		var hc_76039 = [0];
		result_76038 = (0 <= rawGet_67012(t_76035, key_76037, hc_76039, 0));

	return result_76038;

}

function contains_76016(t_76022, key_76024) {
	var result_76025 = false;

	BeforeRet: do {
		result_76025 = hasKey_76029(t_76022, key_76024);
		break BeforeRet;
	} while (false);

	return result_76025;

}

function X5BX5D__76868(t_76874, key_76876) {
	var result_76877 = null;

		var hc_76879 = [0];
		var index_76893 = rawGet_67012(t_76874, key_76876, hc_76879, 0);
		if ((0 <= index_76893)) {
		result_76877 = t_76874.data[index_76893].Field2;
		}
		else {
			var e_77206 = null;
			e_77206 = {m_type: NTI3652, parent: null, name: null, message: null, trace: null, up: null};
			e_77206.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(key_76876), NTI138);
			e_77206.parent = null;
			raiseException(e_77206, "KeyError");
		}


	return result_76877;

}

function readAlleles_71240(data_71242, eplets_71246) {
							var Tmp7;

	var result_71270 = [{data: null, counter: 0}];

		nimCopy(result_71270[0], initTable_71274(64), NTI71252);
		var firstRow_71411 = true;
		L1: do {
			var line_71412 = null;
			var first_81209 = 0;
			var last_81211 = 0;
			L2: do {
					L3: while (true) {
					if (!true) break L3;
						L4: do {
								L5: while (true) {
								if (!!((ConstSet5[data_71242[last_81211]] != undefined))) break L5;
									last_81211 += 1;
								}
						} while(false);
						line_71412 = (data_71242.slice(first_81209, ((last_81211 - 1))+1).concat(0));
						L6: do {
							var fields_71413 = nsuSplitCharSet(line_71412, ConstSet6, -1);
							if (firstRow_71411) {
							if (!(checkAlleleHeader_71212(fields_71413))) {
							var e_71420 = null;
							e_71420 = {m_type: NTI3626, parent: null, name: null, message: null, trace: null, up: null};
							e_71420.message = nimCopy(null, makeNimstrLit("unknown file format for allele data"), NTI138);
							e_71420.parent = null;
							raiseException(e_71420, "Exception");
							}
							else {
								firstRow_71411 = false;
								break L6;
							}

							}
							else {
							if (((line_71412 != null ? line_71412.length-1 : 0) == 0)) {
							break L6;
							}
							else {
							if (!(((fields_71413 != null ? fields_71413.length : 0) == 3))) {
							var e_71442 = null;
							e_71442 = {m_type: NTI3626, parent: null, name: null, message: null, trace: null, up: null};
							e_71442.message = nimCopy(null, (makeNimstrLit("unknown format of line: \'").slice(0,-1)).concat(line_71412.slice(0,-1),makeNimstrLit("\'")), NTI138);
							e_71442.parent = null;
							raiseException(e_71442, "Exception");
							}
							}}
							var allelename_71451 = nimCopy(null, fields_71413[0], NTI138);
							var epletname_71452 = nimCopy(null, fields_71413[1], NTI138);
							var locus_71453 = nimCopy(null, fields_71413[2], NTI138);
							if (!(contains_71651(result_71270[0], allelename_71451))) {
							X5BX5Deq__72562(result_71270[0], allelename_71451, newAllele_71034(allelename_71451, locus_71453));
							}

							if (contains_76016(eplets_71246, epletname_71452)) {
							incl_77278((Tmp7 = X5BX5D__76285(result_71270[0], allelename_71451), Tmp7[0])[Tmp7[1]].eplets, X5BX5D__76868(eplets_71246, epletname_71452));
							}

						} while(false);
						if ((data_71242[last_81211] == 10)) {
						last_81211 += 1;
						}
						else {
						if ((data_71242[last_81211] == 13)) {
						last_81211 += 1;
						if ((data_71242[last_81211] == 10)) {
						last_81211 += 1;
						}

						}
						else {
							break L2;
						}
						}
						first_81209 = last_81211;
					}
			} while(false);
		} while(false);

	return result_71270[0];

}

function fillSelect_82034() {
		var alleleA_82074 = newSeq_82040(0);
		var alleleB_82102 = newSeq_82040(0);
		var alleleC_82130 = newSeq_82040(0);
		L1: do {
			var allele_82634 = null;
			L2: do {
				var h_84224 = 0;
				var colontmp__84226 = 0;
				colontmp__84226 = (alleleABC_82008[0].data != null ? (alleleABC_82008[0].data.length-1) : -1);
				var res_84228 = 0;
				L3: do {
						L4: while (true) {
						if (!(res_84228 <= colontmp__84226)) break L4;
							h_84224 = res_84228;
							if (isFilled_49465(alleleABC_82008[0].data[h_84224].Field0)) {
							allele_82634 = alleleABC_82008[0].data[h_84224].Field1;
							switch (allele_82634[0]) {
							case 65:
								var Tmp5 = nimCopy(null, allele_82634, NTI138);
								if (alleleA_82074 != null) { alleleA_82074.push(Tmp5); } else { alleleA_82074 = [Tmp5]; };
								break;
							case 66:
								var Tmp6 = nimCopy(null, allele_82634, NTI138);
								if (alleleB_82102 != null) { alleleB_82102.push(Tmp6); } else { alleleB_82102 = [Tmp6]; };
								break;
							case 67:
								var Tmp7 = nimCopy(null, allele_82634, NTI138);
								if (alleleC_82130 != null) { alleleC_82130.push(Tmp7); } else { alleleC_82130 = [Tmp7]; };
								break;
							default:
								rawEcho(makeNimstrLit("unknown locus in allele "), allele_82634);
								break;
							}
							}

							res_84228 += 1;
						}
				} while(false);
			} while(false);
		} while(false);
		sort_82676(alleleA_82074, cmp_6445, 1);
		sort_82676(alleleB_82102, cmp_6445, 1);
		sort_82676(alleleC_82130, cmp_6445, 1);
		var alleleList_84085 = makeNimstrLit("");
		L8: do {
			var allele_84094 = null;
			var i_84234 = 0;
			var L_84236 = (alleleA_82074 != null ? alleleA_82074.length : 0);
			L9: do {
					L10: while (true) {
					if (!(i_84234 < L_84236)) break L10;
						allele_84094 = alleleA_82074[i_84234];
						if (alleleList_84085 != null) { alleleList_84085 = (alleleList_84085.slice(0, -1)).concat((makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_84094.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_84094.slice(0,-1),makeNimstrLit("</option>\x0A"))); } else { alleleList_84085 = (makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_84094.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_84094.slice(0,-1),makeNimstrLit("</option>\x0A"));};
						i_84234 += 1;
					}
			} while(false);
		} while(false);
		L11: do {
			var element_84145 = null;
			var i_84240 = 0;
			if ((i_84240 <= 1)) {
			L12: do {
					L13: while (true) {
					if (!true) break L13;
						element_84145 = recElementsA_82016[i_84240];
						document.getElementById(toJSStr(element_84145)).innerHTML = toJSStr(alleleList_84085);
						if ((1 <= i_84240)) {
						break L12;
						}

						i_84240 += 1;
					}
			} while(false);
			}

		} while(false);
		L14: do {
			var element_84155 = null;
			var i_84244 = 0;
			if ((i_84244 <= 1)) {
			L15: do {
					L16: while (true) {
					if (!true) break L16;
						element_84155 = donElementsA_82025[i_84244];
						document.getElementById(toJSStr(element_84155)).innerHTML = toJSStr(alleleList_84085);
						if ((1 <= i_84244)) {
						break L15;
						}

						i_84244 += 1;
					}
			} while(false);
			}

		} while(false);
		alleleList_84085 = nimCopy(null, makeNimstrLit(""), NTI138);
		L17: do {
			var allele_84164 = null;
			var i_84248 = 0;
			var L_84250 = (alleleB_82102 != null ? alleleB_82102.length : 0);
			L18: do {
					L19: while (true) {
					if (!(i_84248 < L_84250)) break L19;
						allele_84164 = alleleB_82102[i_84248];
						if (alleleList_84085 != null) { alleleList_84085 = (alleleList_84085.slice(0, -1)).concat((makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_84164.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_84164.slice(0,-1),makeNimstrLit("</option>\x0A"))); } else { alleleList_84085 = (makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_84164.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_84164.slice(0,-1),makeNimstrLit("</option>\x0A"));};
						i_84248 += 1;
					}
			} while(false);
		} while(false);
		L20: do {
			var element_84177 = null;
			var i_84254 = 0;
			if ((i_84254 <= 1)) {
			L21: do {
					L22: while (true) {
					if (!true) break L22;
						element_84177 = recElementsB_82019[i_84254];
						document.getElementById(toJSStr(element_84177)).innerHTML = toJSStr(alleleList_84085);
						if ((1 <= i_84254)) {
						break L21;
						}

						i_84254 += 1;
					}
			} while(false);
			}

		} while(false);
		L23: do {
			var element_84187 = null;
			var i_84258 = 0;
			if ((i_84258 <= 1)) {
			L24: do {
					L25: while (true) {
					if (!true) break L25;
						element_84187 = donElementsB_82028[i_84258];
						document.getElementById(toJSStr(element_84187)).innerHTML = toJSStr(alleleList_84085);
						if ((1 <= i_84258)) {
						break L24;
						}

						i_84258 += 1;
					}
			} while(false);
			}

		} while(false);
		alleleList_84085 = nimCopy(null, makeNimstrLit(""), NTI138);
		L26: do {
			var allele_84196 = null;
			var i_84262 = 0;
			var L_84264 = (alleleC_82130 != null ? alleleC_82130.length : 0);
			L27: do {
					L28: while (true) {
					if (!(i_84262 < L_84264)) break L28;
						allele_84196 = alleleC_82130[i_84262];
						if (alleleList_84085 != null) { alleleList_84085 = (alleleList_84085.slice(0, -1)).concat((makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_84196.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_84196.slice(0,-1),makeNimstrLit("</option>\x0A"))); } else { alleleList_84085 = (makeNimstrLit("<option value=\"").slice(0,-1)).concat(allele_84196.slice(0,-1),makeNimstrLit("\">").slice(0,-1),allele_84196.slice(0,-1),makeNimstrLit("</option>\x0A"));};
						i_84262 += 1;
					}
			} while(false);
		} while(false);
		L29: do {
			var element_84209 = null;
			var i_84268 = 0;
			if ((i_84268 <= 1)) {
			L30: do {
					L31: while (true) {
					if (!true) break L31;
						element_84209 = recElementsC_82022[i_84268];
						document.getElementById(toJSStr(element_84209)).innerHTML = toJSStr(alleleList_84085);
						if ((1 <= i_84268)) {
						break L30;
						}

						i_84268 += 1;
					}
			} while(false);
			}

		} while(false);
		L32: do {
			var element_84219 = null;
			var i_84272 = 0;
			if ((i_84272 <= 1)) {
			L33: do {
					L34: while (true) {
					if (!true) break L34;
						element_84219 = donElementsC_82031[i_84272];
						document.getElementById(toJSStr(element_84219)).innerHTML = toJSStr(alleleList_84085);
						if ((1 <= i_84272)) {
						break L33;
						}

						i_84272 += 1;
					}
			} while(false);
			}

		} while(false);


}

function getAlleleABC_84273(data_84275) {
		nimCopy(alleleABC_82008[0], readAlleles_71240(cstrToNimstr(data_84275), epletABC_82004[0]), NTI71252);
		rawEcho(makeNimstrLit("alleles loaded from \'"), makeNimstrLit("data/epitopes/abc_alleles.txt"), makeNimstrLit("\'"));
		fillSelect_82034();


}

function getEpletABC_84278(data_84280) {
		nimCopy(epletABC_82004[0], readEplets_66653(cstrToNimstr(data_84280)), NTI66661);
		rawEcho(makeNimstrLit("eplets loaded from \'"), makeNimstrLit("data/epitopes/abc_eplets.txt"), makeNimstrLit("\'"));
		makeRequest_64001("data/epitopes/abc_alleles.txt", getAlleleABC_84273);


}
makeRequest_64001("data/epitopes/abc_eplets.txt", getEpletABC_84278);
