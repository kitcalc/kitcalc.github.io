/* Generated by the Nim Compiler v2.0.4 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI553648131 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1275068500 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI1275068476 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1275068477 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1258291284 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI1258291260 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1258291261 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1241514068 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI1241514044 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1241514045 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1073741841 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1073741840 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI1107296438 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1107296439 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217750 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1090519191 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI1090519172 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1090519171 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1090519173 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1090519116 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1090519115 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI1090519117 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554435 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI754974789 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1056964701 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI134217753 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217743 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555178 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217741 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217742 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555173 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555181 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554450 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555180 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555177 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555179 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217746 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI134217746 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217746.node = NNI134217746;
var NNI33555179 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555179.node = NNI33555179;
NTI33555180.base = NTI33555177;
NTI33555181.base = NTI33555177;
var NNI33555177 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555180, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554450, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554449, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555181, name: "up", sons: null}]};
NTI33555177.node = NNI33555177;
var NNI33555173 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555173.node = NNI33555173;
NTI33555177.base = NTI33555173;
NTI33555179.base = NTI33555177;
NTI134217746.base = NTI33555179;
var NNI134217742 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217742.node = NNI134217742;
var NNI134217741 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217741.node = NNI134217741;
var NNI33555178 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555178.node = NNI33555178;
NTI33555178.base = NTI33555177;
NTI134217741.base = NTI33555178;
NTI134217742.base = NTI134217741;
var NNI134217743 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217743.node = NNI134217743;
NTI134217743.base = NTI134217741;
var NNI134217753 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217753.node = NNI134217753;
NTI134217753.base = NTI33555178;
var NNI1056964701 = {kind: 2, offset: 0, typ: null, name: null, len: 5, sons: {"0": {kind: 1, offset: 0, typ: NTI1056964701, name: "Anv\xC3\xA4nds ej", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1056964701, name: "Typ 1, processkontroll som definierats av ICCBBA", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1056964701, name: "Typ 2, processkontroll som definierats lokalt", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1056964701, name: "Typ 3, checksumma", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1056964701, name: "Ok\xC3\xA4nd", len: 0, sons: null}}};
NTI1056964701.node = NNI1056964701;
var NNI754974789 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554435, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI754974789.node = NNI754974789;
var NNI1090519115 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1090519115, name: "bloodGroup", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1090519115, name: "specialMessage", len: 0, sons: null}}};
NTI1090519115.node = NNI1090519115;
var NNI1090519116 = {kind: 2, offset: 0, typ: null, name: null, len: 8, sons: {"0": {kind: 1, offset: 0, typ: NTI1090519116, name: "Default: Intended Use Not Specified", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1090519116, name: "Directed (Dedicated/Designated) Collection Use Only", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1090519116, name: "For Emergency Use Only", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1090519116, name: "Directed (Dedicated/Designated) Collection/Biohazardous", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI1090519116, name: "Directed (Dedicated/Designated) Collection/Eligible for Crossover", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI1090519116, name: "Autologous Collection/Eligible for Crossover", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI1090519116, name: "For Autologous Use Only", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI1090519116, name: "For Autologous Use Only/Biohazardous", len: 0, sons: null}}};
NTI1090519116.node = NNI1090519116;
var NNI1090519117 = {kind: 3, offset: "kind", len: 2, typ: NTI1090519115, name: "kind", sons: [[setConstr(0), {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "group", len: 0, typ: NTI33554449, name: "group", sons: null}, 
{kind: 1, offset: "collectionInformation", len: 0, typ: NTI1090519116, name: "collectionInformation", sons: null}]}], 
[setConstr(1), {kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "message", sons: null}]]};
NTI1090519117.node = NNI1090519117;
var NNI1090519171 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI1090519171, name: "rhK", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1090519171, name: "mi", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1090519171, name: "special", len: 0, sons: null}}};
NTI1090519171.node = NNI1090519171;
var NNI1090519172 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI1090519172, name: "+", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1090519172, name: "\xE2\x88\x92", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1090519172, name: "?", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1090519172, name: "unknown", len: 0, sons: null}}};
NTI1090519172.node = NNI1090519172;
var NNI1090519173 = {kind: 3, offset: "kind", len: 3, typ: NTI1090519171, name: "kind", sons: [[setConstr(0), {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "kell", len: 0, typ: NTI1090519172, name: "kell", sons: null}, 
{kind: 1, offset: "rhC", len: 0, typ: NTI1090519172, name: "rhC", sons: null}, 
{kind: 1, offset: "rhsmallc", len: 0, typ: NTI1090519172, name: "rhsmallc", sons: null}, 
{kind: 1, offset: "rhE", len: 0, typ: NTI1090519172, name: "rhE", sons: null}, 
{kind: 1, offset: "rhsmalle", len: 0, typ: NTI1090519172, name: "rhsmalle", sons: null}]}], 
[setConstr(1), {kind: 1, offset: "mipheno", len: 0, typ: NTI1090519172, name: "mipheno", sons: null}], 
[setConstr(2), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}]]};
NTI1090519173.node = NNI1090519173;
NTI1090519191.base = NTI1090519172;
var NNI134217750 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217750.node = NNI134217750;
NTI134217750.base = NTI33555178;
var NNI1107296438 = {kind: 2, offset: 0, typ: null, name: null, len: 2, sons: {"0": {kind: 1, offset: 0, typ: NTI1107296438, name: "simple", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1107296438, name: "complex", len: 0, sons: null}}};
NTI1107296438.node = NNI1107296438;
var NNI1107296439 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "division", len: 0, typ: NTI33554449, name: "division", sons: null}, 
{kind: 3, offset: "kind", len: 2, typ: NTI1107296438, name: "kind", sons: [[setConstr(0), {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []}], 
[setConstr(1), {kind: 1, offset: "collectionType", len: 0, typ: NTI33554449, name: "collectionType", sons: null}]]}]};
NTI1107296439.node = NNI1107296439;
NTI1073741840.base = NTI1073741841;
var NNI1241514044 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI1241514044, name: "+", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1241514044, name: "\xE2\x88\x92", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1241514044, name: "ingen info", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1241514044, name: "ej testad", len: 0, sons: null}}};
NTI1241514044.node = NNI1241514044;
var NNI1241514045 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554449, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1241514044, name: "Field1", sons: null}]};
NTI1241514045.node = NNI1241514045;
NTI1241514068.base = NTI1241514045;
var NNI1258291260 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI1258291260, name: "+", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1258291260, name: "\xE2\x88\x92", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1258291260, name: "ingen info", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1258291260, name: "ej testad", len: 0, sons: null}}};
NTI1258291260.node = NNI1258291260;
var NNI1258291261 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554449, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1258291260, name: "Field1", sons: null}]};
NTI1258291261.node = NNI1258291261;
NTI1258291284.base = NTI1258291261;
var NNI1275068476 = {kind: 2, offset: 0, typ: null, name: null, len: 4, sons: {"0": {kind: 1, offset: 0, typ: NTI1275068476, name: "+", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI1275068476, name: "\xE2\x88\x92", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI1275068476, name: "ingen info", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI1275068476, name: "ej testad", len: 0, sons: null}}};
NTI1275068476.node = NNI1275068476;
var NNI1275068477 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554449, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI1275068476, name: "Field1", sons: null}]};
NTI1275068477.node = NNI1275068477;
NTI1275068500.base = NTI1275068477;
var NNI553648131 = {kind: 2, offset: 0, typ: null, name: null, len: 43, sons: {"0": {kind: 1, offset: 0, typ: NTI553648131, name: "donationIdentificationNumber", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI553648131, name: "bloodGroupsABORhD", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI553648131, name: "productCode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI553648131, name: "expirationDate", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI553648131, name: "expirationDateAndTime", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI553648131, name: "collectionDate", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI553648131, name: "collectionDateAndTime", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI553648131, name: "productionDate", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI553648131, name: "productionDateAndTime", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI553648131, name: "specialTestingGeneral", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI553648131, name: "specialTestingAntigensRetired", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI553648131, name: "specialTestingAntigensGeneral", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI553648131, name: "specialTestingAntigensFinnish", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI553648131, name: "specialTestingPlatelet", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI553648131, name: "specialTestingHLAAB", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI553648131, name: "specialTestingHLADRB1", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI553648131, name: "containerManufacturerAndCatalogNumber", len: 0, sons: null}, 
"17": {kind: 1, offset: 17, typ: NTI553648131, name: "containerLotNumber", len: 0, sons: null}, 
"18": {kind: 1, offset: 18, typ: NTI553648131, name: "donorIdentificationNumber", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI553648131, name: "staffMemberIdentificationNumber", len: 0, sons: null}, 
"20": {kind: 1, offset: 20, typ: NTI553648131, name: "manufacturerAndCatalogNumber", len: 0, sons: null}, 
"21": {kind: 1, offset: 21, typ: NTI553648131, name: "lotNumber", len: 0, sons: null}, 
"22": {kind: 1, offset: 22, typ: NTI553648131, name: "compoundMessage", len: 0, sons: null}, 
"23": {kind: 1, offset: 23, typ: NTI553648131, name: "patientDateOfBirth", len: 0, sons: null}, 
"24": {kind: 1, offset: 24, typ: NTI553648131, name: "patientIdentificationNumber", len: 0, sons: null}, 
"25": {kind: 1, offset: 25, typ: NTI553648131, name: "expirationMonthAndYear", len: 0, sons: null}, 
"26": {kind: 1, offset: 26, typ: NTI553648131, name: "ttiMarker", len: 0, sons: null}, 
"27": {kind: 1, offset: 27, typ: NTI553648131, name: "productConsignment", len: 0, sons: null}, 
"28": {kind: 1, offset: 28, typ: NTI553648131, name: "dimensions", len: 0, sons: null}, 
"29": {kind: 1, offset: 29, typ: NTI553648131, name: "redCellAntigensWithTestHistory", len: 0, sons: null}, 
"30": {kind: 1, offset: 30, typ: NTI553648131, name: "flexibleDateAndTime", len: 0, sons: null}, 
"31": {kind: 1, offset: 31, typ: NTI553648131, name: "productDivisions", len: 0, sons: null}, 
"32": {kind: 1, offset: 32, typ: NTI553648131, name: "processingFacilityInformationCode", len: 0, sons: null}, 
"33": {kind: 1, offset: 33, typ: NTI553648131, name: "processorProductIdentificationCode", len: 0, sons: null}, 
"34": {kind: 1, offset: 34, typ: NTI553648131, name: "mphoLotNumber", len: 0, sons: null}, 
"35": {kind: 1, offset: 35, typ: NTI553648131, name: "mphoSupplementalIdentificationNumber", len: 0, sons: null}, 
"36": {kind: 1, offset: 36, typ: NTI553648131, name: "globalRegistrationIdentifierForDonorsRetired", len: 0, sons: null}, 
"37": {kind: 1, offset: 37, typ: NTI553648131, name: "singleEuropeanCode", len: 0, sons: null}, 
"38": {kind: 1, offset: 38, typ: NTI553648131, name: "globalRegistrationIdentifierForDonors", len: 0, sons: null}, 
"39": {kind: 1, offset: 39, typ: NTI553648131, name: "chainOfIdentityIdentifier", len: 0, sons: null}, 
"40": {kind: 1, offset: 40, typ: NTI553648131, name: "nonIccba", len: 0, sons: null}, 
"41": {kind: 1, offset: 41, typ: NTI553648131, name: "reservedNationalDonorIdentificationNumber", len: 0, sons: null}, 
"42": {kind: 1, offset: 42, typ: NTI553648131, name: "confidentialUnitExclusion", len: 0, sons: null}}};
NTI553648131.node = NNI553648131;

function cstrToNimstr(c_33556898) {
      var ln = c_33556898.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556898.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556898.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr([65, 78], [80, 90], [49, 57]);
var ConstSet2 = setConstr([97, 122]);

function toJSStr(s_33556901) {
  var result_33556902 = null;

    var res_33556943 = newSeq_33556919((s_33556901).length);
    var i_33556944 = 0;
    var j_33556945 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556944 < (s_33556901).length)) break Label2;
          var c_33556946 = s_33556901[i_33556944];
          if ((c_33556946 < 128)) {
          res_33556943[j_33556945] = String.fromCharCode(c_33556946);
          i_33556944 += 1;
          }
          else {
            var helper_33556959 = newSeq_33556919(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556960 = c_33556946.toString(16);
                  if ((((code_33556960) == null ? 0 : (code_33556960).length) == 1)) {
                  helper_33556959.push("%0");;
                  }
                  else {
                  helper_33556959.push("%");;
                  }
                  
                  helper_33556959.push(code_33556960);;
                  i_33556944 += 1;
                  if ((((s_33556901).length <= i_33556944) || (s_33556901[i_33556944] < 128))) {
                  break Label3;
                  }
                  
                  c_33556946 = s_33556901[i_33556944];
                }
            };
++excHandler;
            try {
            res_33556943[j_33556945] = decodeURIComponent(helper_33556959.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556943[j_33556945] = helper_33556959.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556945 += 1;
        }
    };
    if (res_33556943.length < j_33556945) { for (var i = res_33556943.length ; i < j_33556945 ; ++i) res_33556943.push(null); }
               else { res_33556943.length = j_33556945; };
    result_33556902 = res_33556943.join("");

  return result_33556902;

}

function raiseException(e_33556653, ename_33556654) {
    e_33556653.name = ename_33556654;
    if ((excHandler == 0)) {
    unhandledException(e_33556653);
    }
    
    throw e_33556653;

  
}
var ConstSet3 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557268, src_33557269, ti_33557270) {
  var result_33557279 = null;

    switch (ti_33557270.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557259(ti_33557270))) {
      result_33557279 = src_33557269;
      }
      else {
        result_33557279 = [src_33557269[0], src_33557269[1]];
      }
      
      break;
    case 19:
            if (dest_33557268 === null || dest_33557268 === undefined) {
        dest_33557268 = {};
      }
      else {
        for (var key in dest_33557268) { delete dest_33557268[key]; }
      }
      for (var key in src_33557269) { dest_33557268[key] = src_33557269[key]; }
      result_33557279 = dest_33557268;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557270.base == null))) {
      result_33557279 = nimCopy(dest_33557268, src_33557269, ti_33557270.base);
      }
      else {
      if ((ti_33557270.kind == 17)) {
      result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {m_type: ti_33557270} : dest_33557268;
      }
      else {
        result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {} : dest_33557268;
      }
      }
      nimCopyAux(result_33557279, src_33557269, ti_33557270.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_33557269)) { 
        if(dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new src_33557269.constructor(src_33557269);
        } else {
          dest_33557268.set(src_33557269, 0);
        }
        result_33557279 = dest_33557268;
      } else {
        if (src_33557269 === null) {
          result_33557279 = null;
        }
        else {
          if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
            dest_33557268 = new Array(src_33557269.length);
          }
          result_33557279 = dest_33557268;
          for (var i = 0; i < src_33557269.length; ++i) {
            result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_33557269 === null) {
        result_33557279 = null;
      }
      else {
        if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new Array(src_33557269.length);
        }
        result_33557279 = dest_33557268;
        for (var i = 0; i < src_33557269.length; ++i) {
          result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
        }
      }
    
      break;
    case 28:
            if (src_33557269 !== null) {
        result_33557279 = src_33557269.slice(0);
      }
    
      break;
    default: 
      result_33557279 = src_33557269;
      break;
    }

  return result_33557279;

}
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([48, 57]);

function divInt64(a_33557084, b_33557085) {
        if (b_33557085 == 0n) raiseDivByZero();
    if (b_33557085 == -1n && a_33557084 == 9223372036854775807n) raiseOverflow();
    return a_33557084 / b_33557085;
  

  
}

function makeNimstrLit(c_33556895) {
      var result = [];
  for (var i = 0; i < c_33556895.length; ++i) {
    result[i] = c_33556895.charCodeAt(i);
  }
  return result;
  

  
}

function isObj(obj_33557398, subclass_33557399) {
  var result_33557400 = false;

  BeforeRet: {
    var x_33557401 = obj_33557398;
    if ((x_33557401 == subclass_33557399)) {
    result_33557400 = true;
    break BeforeRet;
    }
    
    Label1: {
        Label2: while (true) {
        if (!!((x_33557401 == subclass_33557399))) break Label2;
          if ((x_33557401 == null)) {
          result_33557400 = false;
          break BeforeRet;
          }
          
          x_33557401 = x_33557401.base;
        }
    };
    result_33557400 = true;
    break BeforeRet;
  };

  return result_33557400;

}

function reraiseException() {
    if ((lastJSError == null)) {
    raiseException({message: [110,111,32,101,120,99,101,112,116,105,111,110,32,116,111,32,114,101,114,97,105,115,101], parent: null, m_type: NTI134217753, name: null, trace: [], up: null}, "ReraiseDefect");
    }
    else {
      if ((excHandler == 0)) {
      if (isNimException_33556443()) {
      unhandledException(lastJSError);
      }
      
      }
      
      throw lastJSError;
    }
    

  
}

function eqStrings(a_33557041, b_33557042) {
        if (a_33557041 == b_33557042) return true;
    if (a_33557041 === null && b_33557042.length == 0) return true;
    if (b_33557042 === null && a_33557041.length == 0) return true;
    if ((!a_33557041) || (!b_33557042)) return false;
    var alen = a_33557041.length;
    if (alen != b_33557042.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33557041[i] != b_33557042[i]) return false;
    return true;
  

  
}

function mnewString(len_33557003) {
        var result = new Array(len_33557003);
    for (var i = 0; i < len_33557003; i++) {result[i] = 0;}
    return result;
  

  
}

function reprEnum(e_33557576, typ_33557577) {
  var result_33557578 = [];

    var tmp_33557579 = false;
    var item_33557580 = typ_33557577.node.sons[e_33557576];
    tmp_33557579 = item_33557580 !== undefined
    if (tmp_33557579) {
    result_33557578 = nimCopy(null, makeNimstrLit(item_33557580.name), NTI33554449);
    }
    else {
      result_33557578 = nimCopy(null, (HEX24_369098760(e_33557576) || []).concat([32,40,105,110,118,97,108,105,100,32,100,97,116,97,33,41] || []), NTI33554449);
    }
    

  return result_33557578;

}
var ConstSet6 = setConstr([50, 57]);
var ConstSet7 = setConstr(0);

function raiseFieldError2(f_33556854, discVal_33556855) {
    raiseException({message: (f_33556854 || []).concat(discVal_33556855 || [],[39] || []), parent: null, m_type: NTI134217750, name: null, trace: [], up: null}, "FieldDefect");

  
}

function nimBoolToStr(x_33556438) {
  var result_33556439 = [];

    if (x_33556438) {
    result_33556439 = nimCopy(null, [116,114,117,101], NTI33554449);
    }
    else {
      result_33556439 = nimCopy(null, [102,97,108,115,101], NTI33554449);
    }
    

  return result_33556439;

}

function reprDiscriminant(e_33557614, typ_33557615) {
    var Temporary1;

  var result_33557616 = [];

    switch (typ_33557615.kind) {
    case 14:
      Temporary1 = reprEnum(e_33557614, typ_33557615);
      break;
    case 1:
      Temporary1 = nimBoolToStr(!((e_33557614 == 0)));
      break;
    default: 
      Temporary1 = HEX24_369098760(e_33557614);
      break;
    }
    result_33557616 = nimCopy(null, Temporary1, NTI33554449);

  return result_33557616;

}
var ConstSet8 = setConstr(0);
var ConstSet9 = setConstr(1);
var ConstSet10 = setConstr(0);
var ConstSet11 = setConstr(0);
var ConstSet12 = setConstr(0);
var ConstSet13 = setConstr(0);
var ConstSet14 = setConstr(0);
var ConstSet15 = setConstr(1);
var ConstSet16 = setConstr([65, 89]);
var ConstSet17 = setConstr([49, 57]);
var ConstSet18 = setConstr([65, 89]);
var ConstSet19 = setConstr(1);
var ConstSet20 = setConstr([65, 68]);
    var monthsL_1073741836 = new Int32Array([31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]);
      var months_1073741835 = new Int32Array([31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]);
              var antigens_1241514066 = [[75], [107], [67,60,115,117,112,62,119,60,47,115,117,112,62], [86,115,47,86], [65,49], [77], [78], [83], [115], [85], [77,105,60,115,117,112,62,97,60,47,115,117,112,62], [80,49], [76,117,60,115,117,112,62,97,60,47,115,117,112,62], [75,112,60,115,117,112,62,97,60,47,115,117,112,62], [74,115,60,115,117,112,62,97,60,47,115,117,112,62], [87,114,60,115,117,112,62,97,60,47,115,117,112,62], [76,101,60,115,117,112,62,97,60,47,115,117,112,62], [76,101,60,115,117,112,62,98,60,47,115,117,112,62], [70,121,60,115,117,112,62,97,60,47,115,117,112,62], [70,121,60,115,117,112,62,98,60,47,115,117,112,62], [74,107,60,115,117,112,62,97,60,47,115,117,112,62], [74,107,60,115,117,112,62,98,60,47,115,117,112,62], [68,105,60,115,117,112,62,97,60,47,115,117,112,62], [68,105,60,115,117,112,62,98,60,47,115,117,112,62], [68,111,60,115,117,112,62,97,60,47,115,117,112,62], [68,111,60,115,117,112,62,98,60,47,115,117,112,62], [67,111,60,115,117,112,62,97,60,47,115,117,112,62], [67,111,60,115,117,112,62,98,60,47,115,117,112,62], [67,77,86,45,97,107]];
              var phenoOne_1241514067 = new Uint8Array([3, 3, 3, 1, 1, 1, 0, 0, 0, 2]);
              var phenoTwo_1241514068 = new Uint8Array([3, 1, 0, 3, 1, 0, 3, 1, 0, 2]);
    var antigenNegativ_1241514221 = [[114,101,116,105,114,101,100], [69,110,60,115,117,112,62,97,60,47,115,117,112,62], [226,128,153,78,226,128,153], [86,60,115,117,112,62,119,60,47,115,117,112,62], [77,117,114], [72,117,116], [72,105,108], [], [], [104,114,60,115,117,112,62,83,60,47,115,117,112,62], [104,114,60,115,117,112,62,66,60,47,115,117,112,62], [102], [67,101], [71], [72,114,60,115,117,98,62,48,60,47,115,117,98,62], [67,69], [99,69], [67,60,115,117,112,62,120,60,47,115,117,112,62], [69,60,115,117,112,62,119,60,47,115,117,112,62], [68,60,115,117,112,62,119,60,47,115,117,112,62], [104,114,60,115,117,112,62,72,60,47,115,117,112,62], [71,111,60,115,117,112,62,97,60,47,115,117,112,62], [82,104,51,50], [82,104,51,51], [84,97,114], [75,112,60,115,117,112,62,98,60,47,115,117,112,62], [75,112,60,115,117,112,62,99,60,47,115,117,112,62], [74,115,60,115,117,112,62,97,60,47,115,117,112,62], [85,108,60,115,117,112,62,97,60,47,115,117,112,62], [75,49,49], [75,49,50], [75,49,51], [], [], [75,49,56], [75,49,57], [75,50,50], [75,50,51], [75,50,52], [76,117,60,115,117,112,62,98,60,47,115,117,112,62], [76,117,51], [76,117,52], [76,117,53], [76,117,54], [76,117,55], [76,117,56], [76,117,49,49], [76,117,49,50], [76,117,49,51], [76,117,50,48], [65,117,60,115,117,112,62,97,60,47,115,117,112,62], [65,117,60,115,117,112,62,98,60,47,115,117,112,62], [70,121,52], [70,121,53], [70,121,54], [114,101,109,111,118,101,100], [83,100,60,115,117,112,62,97,60,47,115,117,112,62], [], [], [88,103,60,115,117,112,62,97,60,47,115,117,112,62], [83,99,49], [83,99,50], [83,99,51], [74,111,60,115,117,112,62,97,60,47,115,117,112,62], [68,111,60,115,117,112,62,98,60,47,115,117,112,62], [72,121], [71,121,60,115,117,112,62,97,60,47,115,117,112,62], [67,111,51], [76,87,60,115,117,112,62,97,60,47,115,117,112,62], [76,87,60,115,117,112,62,98,60,47,115,117,112,62], [75,120], [71,101,50], [71,101,51], [87,98], [76,115,60,115,117,112,62,97,60,47,115,117,112,62], [65,110,60,115,117,112,62,97,60,47,115,117,112,62], [68,104,60,115,117,112,62,97,60,47,115,117,112,62], [67,114,60,115,117,112,62,97,60,47,115,117,112,62], [73,70,67], [75,110,60,115,117,112,62,97,60,47,115,117,112,62], [73,110,60,115,117,112,62,98,60,47,115,117,112,62], [67,115,60,115,117,112,62,97,60,47,115,117,112,62], [], [], [86,101,108], [76,97,110], [65,116,60,115,117,112,62,97,60,47,115,117,112,62], [74,114,60,115,117,112,62,97,60,47,115,117,112,62], [79,107,60,115,117,112,62,97,60,47,115,117,112,62], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [73,103,65,32,100,101,102,105,99,105,101,110,116], [40,105,110,103,101,116,41]];
              var antigens_1258291282 = [[75], [107], [67,60,115,117,112,62,119,60,47,115,117,112,62], [77,105,60,115,117,112,62,97,60,47,115,117,112,62], [77], [78], [83], [115], [85], [80,49], [76,117,60,115,117,112,62,97,60,47,115,117,112,62], [75,112,60,115,117,112,62,97,60,47,115,117,112,62], [76,101,60,115,117,112,62,97,60,47,115,117,112,62], [76,101,60,115,117,112,62,98,60,47,115,117,112,62], [70,121,60,115,117,112,62,97,60,47,115,117,112,62], [70,121,60,115,117,112,62,98,60,47,115,117,112,62], [74,107,60,115,117,112,62,97,60,47,115,117,112,62], [74,107,60,115,117,112,62,98,60,47,115,117,112,62], [68,111,60,115,117,112,62,97,60,47,115,117,112,62], [68,111,60,115,117,112,62,98,60,47,115,117,112,62], [73,110,60,115,117,112,62,97,60,47,115,117,112,62], [67,111,60,115,117,112,62,98,60,47,115,117,112,62], [68,105,60,115,117,112,62,97,60,47,115,117,112,62], [86,83,47,86], [74,115,60,115,117,112,62,97,60,47,115,117,112,62], [67], [99], [69], [101], [67,77,86,45,97,107]];
              var phenoOne_1258291283 = new Uint8Array([3, 3, 3, 1, 1, 1, 0, 0, 0, 2]);
              var phenoTwo_1258291284 = new Uint8Array([3, 1, 0, 3, 1, 0, 3, 1, 0, 2]);
    var antigenNegativ_1258291421 = [[105,110,102,111,114,109,97,116,105,111,110,32,101,108,115,101,119,104,101,114,101], [69,110,60,115,117,112,62,97,60,47,115,117,112,62], [226,128,153,78,226,128,153], [86,60,115,117,112,62,119,60,47,115,117,112,62], [77,117,114], [72,117,116], [72,105,108], [80], [80,80,60,115,117,98,62,49,60,47,115,117,98,62,80,60,115,117,112,62,107,60,47,115,117,112,62], [104,114,60,115,117,112,62,83,60,47,115,117,112,62], [104,114,60,115,117,112,62,66,60,47,115,117,112,62], [102], [67,101], [71], [72,114,60,115,117,98,62,48,60,47,115,117,98,62], [67,69], [99,69], [67,60,115,117,112,62,120,60,47,115,117,112,62], [69,60,115,117,112,62,119,60,47,115,117,112,62], [68,60,115,117,112,62,119,60,47,115,117,112,62], [104,114,60,115,117,112,62,72,60,47,115,117,112,62], [71,111,60,115,117,112,62,97,60,47,115,117,112,62], [82,104,51,50], [82,104,51,51], [84,97,114], [75,112,60,115,117,112,62,98,60,47,115,117,112,62], [75,112,60,115,117,112,62,99,60,47,115,117,112,62], [74,115,60,115,117,112,62,98,60,47,115,117,112,62], [85,108,60,115,117,112,62,97,60,47,115,117,112,62], [75,49,49], [75,49,50], [75,49,51], [75,49,52], [75,49,55], [75,49,56], [75,49,57], [75,50,50], [75,50,51], [75,50,52], [76,117,60,115,117,112,62,98,60,47,115,117,112,62], [76,117,51], [76,117,52], [76,117,53], [76,117,54], [76,117,55], [76,117,56], [76,117,49,49], [76,117,49,50], [76,117,49,51], [76,117,50,48], [65,117,60,115,117,112,62,97,60,47,115,117,112,62], [65,117,60,115,117,112,62,98,60,47,115,117,112,62], [70,121,52], [70,121,53], [70,121,54], [68,105,60,115,117,112,62,98,60,47,115,117,112,62], [83,100,60,115,117,112,62,97,60,47,115,117,112,62], [87,114,60,115,117,112,62,98,60,47,115,117,112,62], [89,116,60,115,117,112,62,98,60,47,115,117,112,62], [88,103,60,115,117,112,62,97,60,47,115,117,112,62], [83,99,49], [83,99,50], [83,99,51], [74,111,60,115,117,112,62,97,60,47,115,117,112,62], [114,101,109,111,118,101,100], [72,121], [71,121,60,115,117,112,62,97,60,47,115,117,112,62], [67,111,51], [76,87,60,115,117,112,62,97,60,47,115,117,112,62], [76,87,60,115,117,112,62,98,60,47,115,117,112,62], [75,120], [71,101,50], [71,101,51], [87,98], [76,115,60,115,117,112,62,97,60,47,115,117,112,62], [65,110,60,115,117,112,62,97,60,47,115,117,112,62], [68,104,60,115,117,112,62,97,60,47,115,117,112,62], [67,114,60,115,117,112,62,97,60,47,115,117,112,62], [73,70,67], [75,110,60,115,117,112,62,97,60,47,115,117,112,62], [73,110,60,115,117,112,62,98,60,47,115,117,112,62], [67,115,60,115,117,112,62,97,60,47,115,117,112,62], [73], [69,114,60,115,117,112,62,97,60,47,115,117,112,62], [86,101,108], [76,97,110], [65,116,60,115,117,112,62,97,60,47,115,117,112,62], [74,114,60,115,117,112,62,97,60,47,115,117,112,62], [79,107,60,115,117,112,62,97,60,47,115,117,112,62], [87,114,60,115,117,112,62,97,60,47,115,117,112,62], [71,101,52], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [78,97,116,105,111,110,97,108,108,121,32,115,112,101,99,105,102,105,101,100], [72,101,109,111,103,108,111,98,105,110,32,83,32,110,101,103,97,116,105,118,101], [112,97,114,118,111,118,105,114,117,115,32,66,49,57,32,97,110,116,105,98,111,100,121,32,112,114,101,115,101,110,116], [73,103,65,32,100,101,102,105,99,105,101,110,116], [110,111,32,105,110,102,111,114,109,97,116,105,111,110,32,112,114,111,118,105,100,101,100]];
              var antigens_1275068498 = [[75], [107], [67,60,115,117,112,62,119,60,47,115,117,112,62], [77,105,60,115,117,112,62,97,60,47,115,117,112,62], [77], [78], [83], [115], [85], [80,49], [76,117,60,115,117,112,62,97,60,47,115,117,112,62], [75,112,60,115,117,112,62,97,60,47,115,117,112,62], [76,101,60,115,117,112,62,97,60,47,115,117,112,62], [76,101,60,115,117,112,62,98,60,47,115,117,112,62], [70,121,60,115,117,112,62,97,60,47,115,117,112,62], [70,121,60,115,117,112,62,98,60,47,115,117,112,62], [74,107,60,115,117,112,62,97,60,47,115,117,112,62], [74,107,60,115,117,112,62,98,60,47,115,117,112,62], [68,111,60,115,117,112,62,97,60,47,115,117,112,62], [68,111,60,115,117,112,62,98,60,47,115,117,112,62], [67,60,115,117,112,62,120,60,47,115,117,112,62], [67,111,60,115,117,112,62,98,60,47,115,117,112,62], [87,69,83,60,115,117,112,62,97,60,47,115,117,112,62], [76,87,60,115,117,112,62,98,60,47,115,117,112,62], [85,108,60,115,117,112,62,97,60,47,115,117,112,62], [76,115,60,115,117,112,62,97,60,47,115,117,112,62], [65,110,60,115,117,112,62,97,60,47,115,117,112,62], [114,101,115], [114,101,115], [67,77,86,45,97,107]];
              var phenoOne_1275068499 = new Uint8Array([3, 3, 3, 1, 1, 1, 0, 0, 0, 2]);
              var phenoTwo_1275068500 = new Uint8Array([3, 1, 0, 3, 1, 0, 3, 1, 0, 2]);
    var antigenNegativ_1275068621 = [[105,110,102,111,114,109,97,116,105,111,110,32,101,108,115,101,119,104,101,114,101], [69,110,60,115,117,112,62,97,60,47,115,117,112,62], [226,128,153,78,226,128,153], [86,60,115,117,112,62,119,60,47,115,117,112,62], [77,117,114], [72,117,116], [72,105,108], [80], [80,80,60,115,117,98,62,49,60,47,115,117,98,62,80,60,115,117,112,62,107,60,47,115,117,112,62], [104,114,60,115,117,112,62,83,60,47,115,117,112,62], [104,114,60,115,117,112,62,66,60,47,115,117,112,62], [102], [67,101], [71], [72,114,60,115,117,98,62,48,60,47,115,117,98,62], [67,69], [99,69], [67,60,115,117,112,62,120,60,47,115,117,112,62], [69,60,115,117,112,62,119,60,47,115,117,112,62], [68,60,115,117,112,62,119,60,47,115,117,112,62], [104,114,60,115,117,112,62,72,60,47,115,117,112,62], [71,111,60,115,117,112,62,97,60,47,115,117,112,62], [82,104,51,50], [82,104,51,51], [84,97,114], [75,112,60,115,117,112,62,98,60,47,115,117,112,62], [75,112,60,115,117,112,62,99,60,47,115,117,112,62], [74,115,60,115,117,112,62,98,60,47,115,117,112,62], [85,108,60,115,117,112,62,97,60,47,115,117,112,62], [75,49,49], [75,49,50], [75,49,51], [75,49,52], [75,49,55], [75,49,56], [75,49,57], [75,50,50], [75,50,51], [75,50,52], [76,117,60,115,117,112,62,98,60,47,115,117,112,62], [76,117,51], [76,117,52], [76,117,53], [76,117,54], [76,117,55], [76,117,56], [76,117,49,49], [76,117,49,50], [76,117,49,51], [76,117,50,48], [65,117,60,115,117,112,62,97,60,47,115,117,112,62], [65,117,60,115,117,112,62,98,60,47,115,117,112,62], [70,121,52], [70,121,53], [70,121,54], [114,101,109,111,118,101,100], [83,100,60,115,117,112,62,97,60,47,115,117,112,62], [87,114,60,115,117,112,62,98,60,47,115,117,112,62], [89,116,60,115,117,112,62,98,60,47,115,117,112,62], [88,103,60,115,117,112,62,97,60,47,115,117,112,62], [83,99,49], [83,99,50], [83,99,51], [74,111,60,115,117,112,62,97,60,47,115,117,112,62], [68,111,60,115,117,112,62,98,60,47,115,117,112,62], [72,121], [71,121,60,115,117,112,62,97,60,47,115,117,112,62], [67,111,51], [76,87,60,115,117,112,62,97,60,47,115,117,112,62], [76,87,60,115,117,112,62,98,60,47,115,117,112,62], [75,120], [71,101,50], [71,101,51], [87,98], [76,115,60,115,117,112,62,97,60,47,115,117,112,62], [65,110,60,115,117,112,62,97,60,47,115,117,112,62], [68,104,60,115,117,112,62,97,60,47,115,117,112,62], [67,114,60,115,117,112,62,97,60,47,115,117,112,62], [73,70,67], [75,110,60,115,117,112,62,97,60,47,115,117,112,62], [73,110,60,115,117,112,62,98,60,47,115,117,112,62], [67,115,60,115,117,112,62,97,60,47,115,117,112,62], [73], [69,114,60,115,117,112,62,97,60,47,115,117,112,62], [86,101,108], [76,97,110], [65,116,60,115,117,112,62,97,60,47,115,117,112,62], [74,114,60,115,117,112,62,97,60,47,115,117,112,62], [79,107,60,115,117,112,62,97,60,47,115,117,112,62], [87,114,60,115,117,112,62,97,60,47,115,117,112,62], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [114,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,117,115,101], [73,103,65,32,100,101,102,105,99,105,101,110,116], [110,111,32,105,110,102,111,114,109,97,116,105,111,110,32,112,114,111,118,105,100,101,100]];

function nimMax(a_33557108, b_33557109) {
    var Temporary1;

  var result_33557110 = 0;

  BeforeRet: {
    if ((b_33557109 <= a_33557108)) {
    Temporary1 = a_33557108;
    }
    else {
    Temporary1 = b_33557109;
    }
    
    result_33557110 = Temporary1;
    break BeforeRet;
  };

  return result_33557110;

}

function nimMin(a_33557104, b_33557105) {
    var Temporary1;

  var result_33557106 = 0;

  BeforeRet: {
    if ((a_33557104 <= b_33557105)) {
    Temporary1 = a_33557104;
    }
    else {
    Temporary1 = b_33557105;
    }
    
    result_33557106 = Temporary1;
    break BeforeRet;
  };

  return result_33557106;

}
    var dataStructureNames_553648178 = [[84,97,112,112,110,105,110,103,115,110,117,109,109,101,114,32,40,68,111,110,97,116,105,111,110,32,73,100,101,110,116,105,102,105,99,97,116,105,111,110,32,78,117,109,98,101,114,41], [66,108,111,100,103,114,117,112,112,32,40,65,66,79,32,111,99,104,32,82,104,68,41], [80,114,111,100,117,107,116,107,111,100], [85,116,103,195,165,110,103,115,100,97,116,117,109], [85,116,103,195,165,110,103,115,100,97,116,117,109,32,111,99,104,32,116,105,100], [84,97,112,112,110,105,110,103,115,100,97,116,117,109], [84,97,112,112,110,105,110,103,115,100,97,116,117,109,32,111,99,104,32,116,105,100], [80,114,111,100,117,107,116,105,111,110,115,100,97,116,117,109], [80,114,111,100,117,107,116,105,111,110,115,100,97,116,117,109,32,111,99,104,32,116,105,100], [83,112,101,99,105,97,108,32,84,101,115,116,105,110,103,58,32,71,101,110,101,114,97,108], [83,112,101,99,105,97,108,32,84,101,115,116,105,110,103,58,32,82,101,100,32,66,108,111,111,100,32,67,101,108,108,32,65,110,116,105,103,101,110,115], [83,112,101,99,105,97,108,32,84,101,115,116,105,110,103,58,32,82,101,100,32,66,108,111,111,100,32,67,101,108,108,32,65,110,116,105,103,101,110,115,226,128,148,71,101,110,101,114,97,108], [83,112,101,99,105,97,108,32,84,101,115,116,105,110,103,58,32,82,101,100,32,66,108,111,111,100,32,67,101,108,108,32,65,110,116,105,103,101,110,115,226,128,148,70,105,110,110,105,115,104], [83,112,101,99,105,97,108,32,84,101,115,116,105,110,103,58,32,80,108,97,116,101,108,101,116,32,72,76,65,32,97,110,100,32,80,108,97,116,101,108,101,116,32,83,112,101,99,105,102,105,99,32,65,110,116,105,103,101,110,115], [83,112,101,99,105,97,108,32,84,101,115,116,105,110,103,58,32,72,76,65,45,65,32,97,110,100,32,45,66,32,65,108,108,101,108,101,115], [83,112,101,99,105,97,108,32,84,101,115,116,105,110,103,58,32,72,76,65,45,68,82,66,49,32,65,108,108,101,108,101,115], [67,111,110,116,97,105,110,101,114,32,77,97,110,117,102,97,99,116,117,114,101,114,32,97,110,100,32,67,97,116,97,108,111,103,32,78,117,109,98,101,114], [67,111,110,116,97,105,110,101,114,32,76,111,116,32,78,117,109,98,101,114], [68,111,110,111,114,32,73,100,101,110,116,105,102,105,99,97,116,105,111,110,32,78,117,109,98,101,114], [83,116,97,102,102,32,77,101,109,98,101,114,32,73,100,101,110,116,105,102,105,99,97,116,105,111,110,32,78,117,109,98,101,114], [77,97,110,117,102,97,99,116,117,114,101,114,32,97,110,100,32,67,97,116,97,108,111,103,32,78,117,109,98,101,114,58,32,73,116,101,109,115,32,79,116,104,101,114,32,84,104,97,110,32,67,111,110,116,97,105,110,101,114,115], [76,111,116,32,78,117,109,98,101,114,58,32,73,116,101,109,115,32,79,116,104,101,114,32,84,104,97,110,32,67,111,110,116,97,105,110,101,114,115], [67,111,109,112,111,117,110,100,32,77,101,115,115,97,103,101], [80,97,116,105,101,110,116,32,68,97,116,101,32,111,102,32,66,105,114,116,104], [80,97,116,105,101,110,116,32,73,100,101,110,116,105,102,105,99,97,116,105,111,110,32,78,117,109,98,101,114], [69,120,112,105,114,97,116,105,111,110,32,77,111,110,116,104,32,97,110,100,32,89,101,97,114], [84,114,97,110,115,102,117,115,105,111,110,32,84,114,97,110,115,109,105,116,116,101,100,32,73,110,102,101,99,116,105,111,110,32,77,97,114,107,101,114], [80,114,111,100,117,99,116,32,67,111,110,115,105,103,110,109,101,110,116], [68,105,109,101,110,115,105,111,110,115], [82,101,100,32,67,101,108,108,32,65,110,116,105,103,101,110,115,32,119,105,116,104,32,84,101,115,116,32,72,105,115,116,111,114,121], [70,108,101,120,105,98,108,101,32,68,97,116,101,32,97,110,100,32,84,105,109,101], [80,114,111,100,117,99,116,32,68,105,118,105,115,105,111,110,115], [80,114,111,99,101,115,115,105,110,103,32,70,97,99,105,108,105,116,121,32,73,110,102,111,114,109,97,116,105,111,110,32,67,111,100,101], [80,114,111,99,101,115,115,111,114,32,80,114,111,100,117,99,116,32,73,100,101,110,116,105,102,105,99,97,116,105,111,110,32,67,111,100,101], [77,80,72,79,32,76,111,116,32,78,117,109,98,101,114], [77,80,72,79,32,83,117,112,112,108,101,109,101,110,116,97,108,32,73,100,101,110,116,105,102,105,99,97,116,105,111,110,32,78,117,109,98,101,114], [71,108,111,98,97,108,32,82,101,103,105,115,116,114,97,116,105,111,110,32,73,100,101,110,116,105,102,105,101,114,32,102,111,114,32,68,111,110,111,114,115], [83,105,110,103,108,101,32,69,117,114,111,112,101,97,110,32,67,111,100,101], [71,108,111,98,97,108,32,82,101,103,105,115,116,114,97,116,105,111,110,32,73,100,101,110,116,105,102,105,101,114,32,102,111,114,32,68,111,110,111,114,115], [67,104,97,105,110,32,111,102,32,73,100,101,110,116,105,116,121,32,73,100,101,110,116,105,102,105,101,114], [68,97,116,97,32,83,116,114,117,99,116,117,114,101,115,32,78,111,116,32,68,101,102,105,110,101,100,32,98,121,32,73,67,67,66,66,65], makeNimstrLit("Reserved Data Identifiers for a Nationally Specified Donor Identification Number"), [67,111,110,102,105,100,101,110,116,105,97,108,32,85,110,105,116,32,69,120,99,108,117,115,105,111,110,32,83,116,97,116,117,115,32,68,97,116,97,32,83,116,114,117,99,116,117,114,101]];
var objectID_1358954673 = [0];

function startsWith_687867237(s_687867238, prefix_687867239) {
  var result_687867240 = false;

    result_687867240 = ((0 < (s_687867238).length) && (s_687867238[0] == prefix_687867239));

  return result_687867240;

}

function nsuStartsWith(s_687867242, prefix_687867243) {
  var result_687867244 = false;

  BeforeRet: {
    var prefixLenHEX60gensym137_687867249 = (prefix_687867243).length;
    var sLenHEX60gensym137_687867250 = (s_687867242).length;
    var iHEX60gensym137_687867251 = 0;
    Label1: {
        Label2: while (true) {
        if (!true) break Label2;
          if ((prefixLenHEX60gensym137_687867249 <= iHEX60gensym137_687867251)) {
          result_687867244 = true;
          break BeforeRet;
          }
          
          if (((sLenHEX60gensym137_687867250 <= iHEX60gensym137_687867251) || !((s_687867242[iHEX60gensym137_687867251] == prefix_687867243[iHEX60gensym137_687867251])))) {
          result_687867244 = false;
          break BeforeRet;
          }
          
          iHEX60gensym137_687867251 += 1;
        }
    };
  };

  return result_687867244;

}

function add_33556373(x_33556374, x_33556374_Idx, y_33556375) {
          if (x_33556374[x_33556374_Idx] === null) { x_33556374[x_33556374_Idx] = []; }
      var off = x_33556374[x_33556374_Idx].length;
      x_33556374[x_33556374_Idx].length += y_33556375.length;
      for (var i = 0; i < y_33556375.length; ++i) {
        x_33556374[x_33556374_Idx][off+i] = y_33556375.charCodeAt(i);
      }
    

  
}

function newSeq_33556919(len_33556921) {
  var result_33556922 = [];

    result_33556922 = new Array(len_33556921); for (var i = 0 ; i < len_33556921 ; ++i) { result_33556922[i] = null; }
  return result_33556922;

}

function unhandledException(e_33556649) {
    var buf_33556650 = [[]];
    if (!(((e_33556649.message).length == 0))) {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32]);;
    buf_33556650[0].push.apply(buf_33556650[0], e_33556649.message);;
    }
    else {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110]);;
    }
    
    buf_33556650[0].push.apply(buf_33556650[0], [32,91]);;
    add_33556373(buf_33556650, 0, e_33556649.name);
    buf_33556650[0].push.apply(buf_33556650[0], [93,10]);;
    var cbuf_33556651 = toJSStr(buf_33556650[0]);
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556651);
  }
  else {
    throw cbuf_33556651;
  }
  

  
}

function classifyDataStructure_553648179(code_553648180) {
    var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_553648181 = 0;

      if (!startsWith_687867237(code_553648180, 61)) Temporary2 = false; else {        Temporary2 = (ConstSet1[code_553648180[1]] != undefined);      }    if (Temporary2) {
    Temporary1 = 0;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,37])) {
    Temporary1 = 1;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,60])) {
    Temporary1 = 2;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,62])) {
    Temporary1 = 3;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,62])) {
    Temporary1 = 4;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,42])) {
    Temporary1 = 5;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,42])) {
    Temporary1 = 6;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,125])) {
    Temporary1 = 7;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,125])) {
    Temporary1 = 8;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,40])) {
    Temporary1 = 9;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,123])) {
    Temporary1 = 10;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,92])) {
    Temporary1 = 11;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,92])) {
    Temporary1 = 12;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,123])) {
    Temporary1 = 13;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,91])) {
    Temporary1 = 14;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,34])) {
    Temporary1 = 15;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,41])) {
    Temporary1 = 16;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,41])) {
    Temporary1 = 17;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,59])) {
    Temporary1 = 18;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,39])) {
    Temporary1 = 19;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,45])) {
    Temporary1 = 20;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,45])) {
    Temporary1 = 21;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,43])) {
    Temporary1 = 22;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,35])) {
    Temporary1 = 23;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,35])) {
    Temporary1 = 24;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,93])) {
    Temporary1 = 25;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,34])) {
    Temporary1 = 26;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,36])) {
    Temporary1 = 27;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,36])) {
    Temporary1 = 28;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,37])) {
    Temporary1 = 29;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,32])) {
    Temporary1 = 30;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,44])) {
    Temporary1 = 31;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,43])) {
    Temporary1 = 32;
    }
    else {
    if (nsuStartsWith(code_553648180, [61,47])) {
    Temporary1 = 33;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,44,49])) {
    Temporary1 = 34;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,44,50])) {
    Temporary1 = 35;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,44,51])) {
    Temporary1 = 36;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,44,52])) {
    Temporary1 = 37;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,41,58])) {
    Temporary1 = 38;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,47])) {
    Temporary1 = 39;
    }
    else {
      if (!startsWith_687867237(code_553648180, 38)) Temporary3 = false; else {        Temporary3 = (ConstSet2[code_553648180[1]] != undefined);      }    if (Temporary3) {
    Temporary1 = 40;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,59])) {
    Temporary1 = 41;
    }
    else {
    if (nsuStartsWith(code_553648180, [38,33])) {
    Temporary1 = 42;
    }
    else {
      raiseException({message: ([111,107,195,164,110,116,32,112,114,101,102,105,120,58,32] || []).concat(code_553648180 || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
    result_553648181 = Temporary1;

  return result_553648181;

}

function isFatPointer_33557259(ti_33557260) {
  var result_33557261 = false;

  BeforeRet: {
    result_33557261 = !((ConstSet3[ti_33557260.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557261;

}

function nimCopyAux(dest_33557272, src_33557273, n_33557274) {
    switch (n_33557274.kind) {
    case 0:
      break;
    case 1:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557274.sons.length; i++) {
      nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i]);
    }
    
      break;
    case 3:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
      for (var i = 0; i < n_33557274.sons.length; ++i) {
        nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i][1]);
      }
    
      break;
    }

  
}

function interpretFlagSwe_1056964727(din_1056964728) {
    var Temporary1;

  var result_1056964729 = [];

    switch (toJSStr(din_1056964728.flagCharacters)) {
    case "01":
      Temporary1 = [80,195,165,115,101,32,49,44,32,112,195,165,32,116,97,112,112,110,105,110,103,115,101,116,105,107,101,116,116,101,110,32,118,105,100,32,116,97,112,112,110,105,110,103];
      break;
    case "02":
      Temporary1 = [80,195,165,115,101,32,50,44,32,112,195,165,32,116,97,112,112,110,105,110,103,115,101,116,105,107,101,116,116,101,110,32,118,105,100,32,116,97,112,112,110,105,110,103];
      break;
    case "03":
      Temporary1 = [80,195,165,115,101,32,51,44,32,112,195,165,32,116,97,112,112,110,105,110,103,115,101,116,105,107,101,116,116,101,110,32,118,105,100,32,116,97,112,112,110,105,110,103];
      break;
    case "04":
      Temporary1 = [80,195,165,115,101,32,52,44,32,112,195,165,32,116,97,112,112,110,105,110,103,115,101,116,105,107,101,116,116,101,110,32,118,105,100,32,116,97,112,112,110,105,110,103];
      break;
    case "31":
      Temporary1 = [80,195,165,115,101,32,49,44,32,112,195,165,32,116,97,112,112,110,105,110,103,115,101,116,105,107,101,116,116,101,110,32,118,105,100,32,111,109,107,108,105,115,116,114,105,110,103];
      break;
    case "32":
      Temporary1 = [80,195,165,115,101,32,50,44,32,112,195,165,32,116,97,112,112,110,105,110,103,115,101,116,105,107,101,116,116,101,110,32,118,105,100,32,111,109,107,108,105,115,116,114,105,110,103];
      break;
    case "33":
      Temporary1 = [80,195,165,115,101,32,51,44,32,112,195,165,32,116,97,112,112,110,105,110,103,115,101,116,105,107,101,116,116,101,110,32,118,105,100,32,111,109,107,108,105,115,116,114,105,110,103];
      break;
    case "34":
      Temporary1 = [80,195,165,115,101,32,52,44,32,112,195,165,32,116,97,112,112,110,105,110,103,115,101,116,105,107,101,116,116,101,110,32,118,105,100,32,111,109,107,108,105,115,116,114,105,110,103];
      break;
    case "41":
      Temporary1 = [80,195,165,115,101,32,49,44,32,112,195,165,32,106,111,117,114,110,97,108,101,116,105,107,101,116,116,101,110,32,118,105,100,32,116,97,112,112,110,105,110,103];
      break;
    case "42":
      Temporary1 = [80,195,165,115,101,32,50,44,32,112,195,165,32,106,111,117,114,110,97,108,101,116,105,107,101,116,116,101,110,32,118,105,100,32,116,97,112,112,110,105,110,103];
      break;
    case "43":
      Temporary1 = [80,195,165,115,101,32,51,44,32,112,195,165,32,106,111,117,114,110,97,108,101,116,105,107,101,116,116,101,110,32,118,105,100,32,116,97,112,112,110,105,110,103];
      break;
    case "44":
      Temporary1 = [80,195,165,115,101,32,52,44,32,112,195,165,32,106,111,117,114,110,97,108,101,116,105,107,101,116,116,101,110,32,118,105,100,32,116,97,112,112,110,105,110,103];
      break;
    case "51":
      Temporary1 = [80,195,165,115,101,32,49,44,32,112,195,165,32,106,111,117,114,110,97,108,101,116,105,107,101,116,116,101,110,32,118,105,100,32,111,109,107,108,105,115,116,114,105,110,103];
      break;
    case "52":
      Temporary1 = [80,195,165,115,101,32,50,44,32,112,195,165,32,106,111,117,114,110,97,108,101,116,105,107,101,116,116,101,110,32,118,105,100,32,111,109,107,108,105,115,116,114,105,110,103];
      break;
    case "53":
      Temporary1 = [80,195,165,115,101,32,51,44,32,112,195,165,32,106,111,117,114,110,97,108,101,116,105,107,101,116,116,101,110,32,118,105,100,32,111,109,107,108,105,115,116,114,105,110,103];
      break;
    case "54":
      Temporary1 = [80,195,165,115,101,32,52,44,32,112,195,165,32,106,111,117,114,110,97,108,101,116,105,107,101,116,116,101,110,32,118,105,100,32,111,109,107,108,105,115,116,114,105,110,103];
      break;
    case "05":
      Temporary1 = [65,110,110,97,110,32,40,117,112,112,114,101,112,97,100,41,32,34,111,110,32,100,101,109,97,110,100,34,45,116,114,121,99,107,116,32,100,101,108,32,97,118,32,101,116,105,107,101,116,116,101,110];
      break;
    case "06":
      Temporary1 = [80,105,108,111,116,114,195,182,114];
      break;
    case "07":
      Temporary1 = [80,114,111,118,32,102,195,182,114,32,115,109,105,116,116,101,115,116,101,114];
      break;
    case "08":
      Temporary1 = [71,105,118,97,114,100,111,107,117,109,101,110,116,97,116,105,111,110,32,40,98,108,97,110,107,101,116,116,32,102,195,182,114,32,104,195,164,108,115,111,100,101,107,108,97,114,97,116,105,111,110,41];
      break;
    case "09":
      Temporary1 = [80,114,111,118,32,102,195,182,114,32,78,65,84];
      break;
    case "10":
      Temporary1 = [80,114,111,118,32,102,195,182,114,32,117,110,100,101,114,115,195,182,107,110,105,110,103,32,97,118,32,98,97,107,116,101,114,105,101,108,108,32,118,195,164,120,116];
      break;
    case "20":
      Temporary1 = [80,97,99,107,115,101,100,101,108,32,40,118,105,100,32,116,114,97,110,115,112,111,114,116,32,97,118,32,98,108,111,100,101,110,104,101,116,101,114,32,116,105,108,108,32,97,110,110,97,110,32,98,108,111,100,99,101,110,116,114,97,108,41];
      break;
    case "30":
      Temporary1 = [70,195,182,108,106,101,115,101,100,101,108,32,116,105,108,108,32,98,108,111,100,112,195,165,115,101,110];
      break;
    case "40":
      Temporary1 = [65,110,118,195,164,110,100,101,115,32,118,105,100,32,105,110,107,195,182,112,32,97,118,32,98,108,111,100,101,110,104,101,116,101,114,32,109,195,164,114,107,116,97,32,109,101,100,32,110,117,109,109,101,114,32,48,48];
      break;
    case "50":
      Temporary1 = [75,118,105,116,116,101,110,115,44,32,97,110,118,195,164,110,100,115,32,118,105,100,32,111,98,101,109,97,110,110,97,100,32,100,101,112,195,165];
      break;
    default: 
      Temporary1 = [69,106,32,100,101,102,105,110,105,101,114,97,100,32,105,32,72,97,110,100,98,111,107,32,102,195,182,114,32,98,108,111,100,118,101,114,107,115,97,109,104,101,116];
      break;
    }
    result_1056964729 = nimCopy(null, Temporary1, NTI33554449);

  return result_1056964729;

}

function raiseDivByZero() {
    raiseException({message: [100,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111], parent: null, m_type: NTI134217742, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function raiseOverflow() {
    raiseException({message: [111,118,101,114,45,32,111,114,32,117,110,100,101,114,102,108,111,119], parent: null, m_type: NTI134217743, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function integerOutOfRangeError_721420613() {
    raiseException({message: [80,97,114,115,101,100,32,105,110,116,101,103,101,114,32,111,117,116,115,105,100,101,32,111,102,32,118,97,108,105,100,32,114,97,110,103,101], parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");

  
}

function rawParseInt_721420651(s_721420652, b_721420653, b_721420653_Idx) {
      var Temporary1;
          var Temporary4;

  var result_721420654 = 0;

    var sign_721420655 = (-1n);
    var i_721420656 = 0;
    if ((i_721420656 < (s_721420652).length)) {
    if ((s_721420652[i_721420656] == 43)) {
    i_721420656 += 1;
    }
    else {
    if ((s_721420652[i_721420656] == 45)) {
    i_721420656 += 1;
    sign_721420655 = 1n;
    }
    }
    }
    
      if (!(i_721420656 < (s_721420652).length)) Temporary1 = false; else {        Temporary1 = (ConstSet4[s_721420652[i_721420656]] != undefined);      }    if (Temporary1) {
    b_721420653[b_721420653_Idx] = 0n;
    Label2: {
        Label3: while (true) {
          if (!(i_721420656 < (s_721420652).length)) Temporary4 = false; else {            Temporary4 = (ConstSet5[s_721420652[i_721420656]] != undefined);          }        if (!Temporary4) break Label3;
          var c_721420690 = (s_721420652[i_721420656] - 48);
          if ((((-9223372036854775808n) + BigInt(c_721420690)) / 10n <= b_721420653[b_721420653_Idx])) {
          b_721420653[b_721420653_Idx] = ((b_721420653[b_721420653_Idx] * 10n) - BigInt(c_721420690));
          }
          else {
          integerOutOfRangeError_721420613();
          }
          
          i_721420656 += 1;
          Label5: {
              Label6: while (true) {
              if (!((i_721420656 < (s_721420652).length) && (s_721420652[i_721420656] == 95))) break Label6;
                i_721420656 += 1;
              }
          };
        }
    };
    if (((sign_721420655 == (-1n)) && (b_721420653[b_721420653_Idx] == (-9223372036854775808n)))) {
    integerOutOfRangeError_721420613();
    }
    else {
      b_721420653[b_721420653_Idx] = (b_721420653[b_721420653_Idx] * sign_721420655);
      result_721420654 = i_721420656;
    }
    
    }
    

  return result_721420654;

}

function npuParseBiggestInt(s_721420713, number_721420714, number_721420714_Idx) {
  var result_721420715 = 0;

    var res_721420716 = [0n];
    result_721420715 = rawParseInt_721420651(s_721420713, res_721420716, 0);
    if (!((result_721420715 == 0))) {
    number_721420714[number_721420714_Idx] = res_721420716[0];
    }
    

  return result_721420715;

}

function npuParseInt(s_721420718, number_721420719, number_721420719_Idx) {
  var result_721420720 = 0;

    var res_721420721 = [0n];
    result_721420720 = npuParseBiggestInt(s_721420718, res_721420721, 0);
    if (((res_721420721[0] < (-2147483648n)) || (2147483647n < res_721420721[0]))) {
    integerOutOfRangeError_721420613();
    }
    
    if (!((result_721420720 == 0))) {
    number_721420719[number_721420719_Idx] = Number(res_721420721[0]);
    }
    

  return result_721420720;

}

function parseInt_721421231(s_721421232, number_721421233, number_721421233_Idx, start_721421234) {
  var result_721421235 = 0;

    result_721421235 = npuParseInt((s_721421232.slice(start_721421234, (s_721421232).length - 1 + 1)), number_721421233, number_721421233_Idx);

  return result_721421235;

}

function nsuParseInt(s_687866707) {
  var result_687866708 = [0];

    result_687866708[0] = 0;
    var L_687866709 = parseInt_721421231(s_687866707, result_687866708, 0, 0);
    if ((!((L_687866709 == (s_687866707).length)) || (L_687866709 == 0))) {
    raiseException({message: ([105,110,118,97,108,105,100,32,105,110,116,101,103,101,114,58,32] || []).concat(s_687866707 || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_687866708[0];

}

function isNimException_33556443() {
    return lastJSError && lastJSError.m_type;

  
}

function interpretFlagEng_1056964730(din_1056964731) {
  var result_1056964732 = [];

    switch (toJSStr(din_1056964731.flagCharacters)) {
    case "00":
      result_1056964732 = nimCopy(null, [70,108,97,103,32,110,111,116,32,117,115,101,100,59,32,110,117,108,108,32,118,97,108,117,101], NTI33554449);
      break;
    case "01":
      result_1056964732 = nimCopy(null, [67,111,110,116,97,105,110,101,114,32,49,32,111,102,32,97,32,115,101,116], NTI33554449);
      break;
    case "02":
      result_1056964732 = nimCopy(null, [67,111,110,116,97,105,110,101,114,32,50,32,111,102,32,97,32,115,101,116], NTI33554449);
      break;
    case "03":
      result_1056964732 = nimCopy(null, [67,111,110,116,97,105,110,101,114,32,51,32,111,102,32,97,32,115,101,116], NTI33554449);
      break;
    case "04":
      result_1056964732 = nimCopy(null, [67,111,110,116,97,105,110,101,114,32,52,32,111,102,32,97,32,115,101,116], NTI33554449);
      break;
    case "05":
      result_1056964732 = nimCopy(null, [83,101,99,111,110,100,32,40,111,114,32,114,101,112,101,97,116,101,100,41,32,226,128,156,100,101,109,97,110,100,45,112,114,105,110,116,101,100,226,128,157,32,108,97,98,101,108], NTI33554449);
      break;
    case "06":
      result_1056964732 = nimCopy(null, [80,105,108,111,116,32,116,117,98,101,32,108,97,98,101,108], NTI33554449);
      break;
    case "07":
      result_1056964732 = nimCopy(null, [84,101,115,116,32,116,117,98,101,32,108,97,98,101,108], NTI33554449);
      break;
    case "08":
      result_1056964732 = nimCopy(null, [68,111,110,111,114,32,114,101,99,111,114,100,32,108,97,98,101,108], NTI33554449);
      break;
    case "09":
      result_1056964732 = nimCopy(null, [83,97,109,112,108,101,32,116,117,98,101,32,102,111,114,32,78,65,84,32,116,101,115,116,105,110,103], NTI33554449);
      break;
    case "10":
      result_1056964732 = nimCopy(null, [83,97,109,112,108,101,115,32,102,111,114,32,98,97,99,116,101,114,105,97,108,32,116,101,115,116,105,110,103], NTI33554449);
      break;
    case "11":
      result_1056964732 = nimCopy(null, [77,97,116,99,104,32,119,105,116,104,32,85,110,105,116,32,108,97,98,101,108], NTI33554449);
      break;
    case "12":
      result_1056964732 = nimCopy(null, [65,102,102,105,120,101,100,32,112,97,114,116,105,97,108,32,108,97,98,101,108], NTI33554449);
      break;
    case "13":
      result_1056964732 = nimCopy(null, [65,116,116,97,99,104,101,100,32,108,97,98,101,108,32,40,105,110,116,101,110,100,101,100,32,116,111,32,98,101,32,117,115,101,100,32,119,105,116,104,32,97,102,102,105,120,101,100,32,112,97,114,116,105,97,108,32,108,97,98,101,108,41], NTI33554449);
      break;
    case "14":
      result_1056964732 = nimCopy(null, [82,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,97,115,115,105,103,110,109,101,110,116], NTI33554449);
      break;
    case "15":
      result_1056964732 = nimCopy(null, [67,111,110,116,97,105,110,101,114,32,53,32,111,102,32,97,32,115,101,116], NTI33554449);
      break;
    case "16":
      result_1056964732 = nimCopy(null, [67,111,110,116,97,105,110,101,114,32,54,32,111,102,32,97,32,115,101,116], NTI33554449);
      break;
    case "17":
      result_1056964732 = nimCopy(null, [67,111,110,116,97,105,110,101,114,32,55,32,111,102,32,97,32,115,101,116], NTI33554449);
      break;
    case "18":
      result_1056964732 = nimCopy(null, [67,111,110,116,97,105,110,101,114,32,56,32,111,102,32,97,32,115,101,116], NTI33554449);
      break;
    case "19":
      result_1056964732 = nimCopy(null, [67,111,110,116,97,105,110,101,114,32,57,32,111,102,32,97,32,115,101,116], NTI33554449);
      break;
    default: 
++excHandler;
      try {
      var numeric_1056964733 = nsuParseInt(din_1056964731.flagCharacters);
      if (      numeric_1056964733 >= 20 && numeric_1056964733 <= 59      ){        result_1056964732 = nimCopy(null, makeNimstrLit("Reserved for assignment and use by each local facility. Therefore the meaning and interpretation of flag values 20\xE2\x80\x9359 may differ with each FIN and should not be interpreted at any other site"), NTI33554449);
        }
      else if (      numeric_1056964733 >= 60 && numeric_1056964733 <= 96      ){        result_1056964732 = nimCopy(null, makeNimstrLit("ISO/IEC 7064 modulo 37-2 check character on the preceding thirteen (13) data characters, \xCE\xB1ppppyynnnnnn including the FIN, year and the unit sequence number \xE2\x80\x94 value is assigned as 60 plus the modulo 37-2 checksum"), NTI33554449);
        }
      else{
        result_1056964732 = nimCopy(null, [82,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,97,115,115,105,103,110,109,101,110,116], NTI33554449);
        }
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
      if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
      result_1056964732 = nimCopy(null, [82,101,115,101,114,118,101,100,32,102,111,114,32,102,117,116,117,114,101,32,97,115,115,105,103,110,109,101,110,116], NTI33554449);
      }
      else {
      	reraiseException();
      }
      lastJSError = prevJSError;
      } finally {
      }
      break;
    }

  return result_1056964732;

}

function interpretFlag_1056964734(din_1056964735) {
    var Temporary2;

  var result_1056964736 = ({kind: 0, meaningSwe: [], meaningEng: []});

    result_1056964736.meaningSwe = nimCopy(null, interpretFlagSwe_1056964727(din_1056964735), NTI33554449);
    result_1056964736.meaningEng = nimCopy(null, interpretFlagEng_1056964730(din_1056964735), NTI33554449);
++excHandler;
    try {
    var numeric_1056964737 = nsuParseInt(din_1056964735.flagCharacters);
    if (    numeric_1056964737 == 0    ){      Temporary2 = 0;
      }
    else if (    numeric_1056964737 >= 1 && numeric_1056964737 <= 19    ){      Temporary2 = 1;
      }
    else if (    numeric_1056964737 >= 20 && numeric_1056964737 <= 59    ){      Temporary2 = 2;
      }
    else if (    numeric_1056964737 >= 60 && numeric_1056964737 <= 97    ){      Temporary2 = 3;
      }
    else{
      Temporary2 = 4;
      }
    result_1056964736.kind = Temporary2;
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
    result_1056964736.kind = 4;
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    }

  return result_1056964736;

}

function HEX2AHEX3D_1073741988(x_1073741990, x_1073741990_Idx, y_1073741991) {
    x_1073741990[x_1073741990_Idx] = (x_1073741990[x_1073741990_Idx] * y_1073741991);

  
}

function HEX5E_1073741981(x_1073741983, y_1073741984) {
  var result_1073741985 = [0];

    switch (y_1073741984) {
    case 0:
      result_1073741985[0] = 1;
      break;
    case 1:
      result_1073741985[0] = x_1073741983;
      break;
    case 2:
      result_1073741985[0] = (x_1073741983 * x_1073741983);
      break;
    case 3:
      result_1073741985[0] = ((x_1073741983 * x_1073741983) * x_1073741983);
      break;
    default: 
      var x_1073741986 = [x_1073741983];
      var y_1073741987 = y_1073741984;
      result_1073741985[0] = 1;
      Label1: {
          Label2: while (true) {
          if (!true) break Label2;
            if (!(((y_1073741987 & 1) == 0))) {
            HEX2AHEX3D_1073741988(result_1073741985, 0, x_1073741986[0]);
            }
            
            y_1073741987 = (y_1073741987 >> 1);
            if ((y_1073741987 == 0)) {
            break Label1;
            }
            
            HEX2AHEX3D_1073741988(x_1073741986, 0, x_1073741986[0]);
          }
      };
      break;
    }

  return result_1073741985[0];

}

function charToCheckValue_1073741959(c_1073741960) {
  var result_1073741961 = 0;

    switch (c_1073741960) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      result_1073741961 = (((c_1073741960) | 0) - 48);
      break;
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
      result_1073741961 = (((c_1073741960) | 0) - 55);
      break;
    case 42:
      result_1073741961 = 36;
      break;
    default: 
      break;
    }

  return result_1073741961;

}

function iso7064mod37_1073741972(s_1073741973) {
  var result_1073741974 = 0;

    var value_1073741978 = 0;
    var positionRight_1073741979 = 13;
    Label1: {
      var c_1073741980 = 0;
      var i_553648772 = 0;
      var L_553648773 = (s_1073741973).length;
      Label2: {
          Label3: while (true) {
          if (!(i_553648772 < L_553648773)) break Label3;
            c_1073741980 = s_1073741973[i_553648772];
            var weighted_1073742000 = (HEX5E_1073741981(2, positionRight_1073741979) * charToCheckValue_1073741959(c_1073741980));
            value_1073741978 += weighted_1073742000;
            positionRight_1073741979 -= 1;
            i_553648772 += 1;
          }
      };
    };
    value_1073741978 = Math.trunc(value_1073741978 % 37);
    value_1073741978 = (38 - value_1073741978);
    value_1073741978 = Math.trunc(value_1073741978 % 37);
    result_1073741974 = value_1073741978;

  return result_1073741974;

}

function addChars_301990090(result_301990092, result_301990092_Idx, x_301990093, start_301990094, n_301990095) {
    var Temporary1;

    var old_301990096 = (result_301990092[result_301990092_Idx]).length;
    if (result_301990092[result_301990092_Idx].length < (Temporary1 = (old_301990096 + n_301990095), Temporary1)) { for (var i = result_301990092[result_301990092_Idx].length; i < Temporary1; ++i) result_301990092[result_301990092_Idx].push(0); }
         else {result_301990092[result_301990092_Idx].length = Temporary1; };
    Label2: {
      var iHEX60gensym4_301990110 = 0;
      var i_553648780 = 0;
      Label3: {
          Label4: while (true) {
          if (!(i_553648780 < n_301990095)) break Label4;
            iHEX60gensym4_301990110 = i_553648780;
            result_301990092[result_301990092_Idx][(old_301990096 + iHEX60gensym4_301990110)] = x_301990093.charCodeAt((start_301990094 + iHEX60gensym4_301990110));
            i_553648780 += 1;
          }
      };
    };

  
}

function addChars_301990086(result_301990088, result_301990088_Idx, x_301990089) {
    addChars_301990090(result_301990088, result_301990088_Idx, x_301990089, 0, ((x_301990089) == null ? 0 : (x_301990089).length));

  
}

function addInt_301990111(result_301990112, result_301990112_Idx, x_301990113) {
    addChars_301990086(result_301990112, result_301990112_Idx, ((x_301990113) + ""));

  
}

function addInt_301990129(result_301990130, result_301990130_Idx, x_301990131) {
    addInt_301990111(result_301990130, result_301990130_Idx, BigInt(x_301990131));

  
}

function HEX24_369098760(x_369098761) {
  var result_369098762 = [[]];

    addInt_301990129(result_369098762, 0, x_369098761);

  return result_369098762[0];

}

function type3FlagCharacters_1073742015(din_1073742016) {
  var result_1073742017 = [];

    var value_1073742018 = iso7064mod37_1073741972(din_1073742016);
    result_1073742017 = nimCopy(null, HEX24_369098760((value_1073742018 + 60)), NTI33554449);

  return result_1073742017;

}

function checkValueToChar_1073741965(i_1073741966) {
  var result_1073741967 = 0;

    result_1073741967 = [48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,42][i_1073741966];

  return result_1073741967;

}

function calcCheckCharacter_1073742011(din_1073742012) {
  var result_1073742013 = 0;

    var value_1073742014 = iso7064mod37_1073741972(din_1073742012);
    result_1073742013 = checkValueToChar_1073741965(value_1073742014);

  return result_1073742013;

}

function getCheckCharacter_1056964754(din_1056964755) {
  var result_1056964756 = 0;

    var dinStr_1056964757 = (din_1056964755.facilityIdentificationNumber || []).concat(din_1056964755.year || [],din_1056964755.sequence || []);
    result_1056964756 = calcCheckCharacter_1073742011(dinStr_1056964757);

  return result_1056964756;

}

function toHtmlCommon_1073741921(body_1073741922, dataIdentifier_1073741923) {
  var result_1073741924 = [];

    var bodyTop_1073741958 = ([60,116,114,62,60,116,100,62,68,97,116,97,105,100,101,110,116,105,116,101,116,115,116,101,99,107,101,110,60,47,116,100,62,60,116,100,62] || []).concat(dataIdentifier_1073741923 || [],[60,47,116,100,62,60,47,116,114,62] || []);
    result_1073741924.push.apply(result_1073741924, (makeNimstrLit("<table><h3>Streckkodens delar och tolkning</h3><thead><tr><th>Element</th><th>V\xC3\xA4rde</th></tr></thead><tbody>") || []).concat(bodyTop_1073741958 || [],body_1073741922 || [],[60,47,116,98,111,100,121,62,60,47,116,97,98,108,101,62] || []));;

  return result_1073741924;

}

function toHtml_1056964758(din_1056964759) {
  var result_1056964760 = [];

    var flag_1056964761 = interpretFlag_1056964734(din_1056964759);
    var type3Rows_1056964762 = [];
    if ((flag_1056964761.kind == 3)) {
    if (eqStrings(din_1056964759.flagCharacters, type3FlagCharacters_1073742015(din_1056964759.flagCharacters))) {
    type3Rows_1056964762 = nimCopy(null, makeNimstrLit("<tr><td style=\"padding-left: 2em;\">Checksumma f\xC3\xB6r typ 3</td><td>Korrekt checksumma i nummermark\xC3\xB6r</td></tr>"), NTI33554449);
    }
    else {
      type3Rows_1056964762 = nimCopy(null, makeNimstrLit("<tr><td style=\"padding-left: 2em;\">Checksumma f\xC3\xB6r typ 3</td><td>Checksumma i nummermark\xC3\xB6r matchar inte tappningsnummer!</td></tr>"), NTI33554449);
    }
    
    }
    
    var body_1056964785 = (makeNimstrLit("<div><tr><td>Blodcentralskod (Facility Identification Number)</td><td>") || []).concat(din_1056964759.facilityIdentificationNumber || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,195,133,114,60,47,116,100,62,60,116,100,62] || [],din_1056964759.year || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,76,195,182,112,110,117,109,109,101,114,60,47,116,100,62,60,116,100,62] || [],din_1056964759.sequence || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,78,117,109,109,101,114,109,97,114,107,195,182,114,60,47,116,100,62,60,116,100,62] || [],din_1056964759.flagCharacters || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62,84,121,112,60,47,116,100,62,60,116,100,62] || [],reprEnum(flag_1056964761.kind, NTI1056964701) || [],makeNimstrLit("</td></tr><tr><td style=\"padding-left: 2em;\">Svensk tolkning</td><td>") || [],flag_1056964761.meaningSwe || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62,73,83,66,84,32,49,50,56,60,47,116,100,62,60,116,100,62] || [],flag_1056964761.meaningEng || [],makeNimstrLit("</td></tr><tr><td style=\"padding-left: 2em;\">Kontrolltecken</td><td><span style=\"border: solid 1px; padding: 2px;\">") || [],[getCheckCharacter_1056964754(din_1056964759)],[60,47,115,112,97,110,62,60,47,116,100,62,60,47,116,114,62] || [],type3Rows_1056964762 || [],[60,47,100,105,118,62] || []);
    result_1056964760 = nimCopy(null, toHtmlCommon_1073741921(body_1056964785, din_1056964759.dataIdentifier), NTI33554449);

  return result_1056964760;

}

function verifyDonationIdentificationNumber_1056964618(din_1056964619) {
    if (!(((din_1056964619).length == 16))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,49,54,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((din_1056964619).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function HEX5BHEX5D_687867129(s_687867132, x_687867133) {
  var result_687867134 = [];

    var a_687867136 = x_687867133.a;
    var L_687867138 = ((x_687867133.b - a_687867136) + 1);
    result_687867134 = nimCopy(null, mnewString(L_687867138), NTI33554449);
    Label1: {
      var i_687867143 = 0;
      var i_553648783 = 0;
      Label2: {
          Label3: while (true) {
          if (!(i_553648783 < L_687867138)) break Label3;
            i_687867143 = i_553648783;
            result_687867134[i_687867143] = s_687867132[(i_687867143 + a_687867136)];
            i_553648783 += 1;
          }
      };
    };

  return result_687867134;

}

function HEX2EHEX2E_989855792(a_989855795, b_989855796) {
  var result_989855797 = ({a: 0, b: 0});

    result_989855797 = nimCopy(result_989855797, {a: a_989855795, b: b_989855796}, NTI754974789);

  return result_989855797;

}

function parseDonationIdentificationNumber_1056964621(code_1056964622) {
  var result_1056964623 = ({dataIdentifier: [], facilityIdentificationNumber: [], year: [], sequence: [], flagCharacters: []});

    verifyDonationIdentificationNumber_1056964618(code_1056964622);
    result_1056964623.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1056964622, HEX2EHEX2E_989855792(0, 0)), NTI33554449);
    result_1056964623.facilityIdentificationNumber = nimCopy(null, HEX5BHEX5D_687867129(code_1056964622, HEX2EHEX2E_989855792(1, 5)), NTI33554449);
    result_1056964623.year = nimCopy(null, HEX5BHEX5D_687867129(code_1056964622, HEX2EHEX2E_989855792(6, 7)), NTI33554449);
    result_1056964623.sequence = nimCopy(null, HEX5BHEX5D_687867129(code_1056964622, HEX2EHEX2E_989855792(8, 13)), NTI33554449);
    result_1056964623.flagCharacters = nimCopy(null, HEX5BHEX5D_687867129(code_1056964622, HEX2EHEX2E_989855792(14, 15)), NTI33554449);

  return result_1056964623;

}

function interpretCollectionInformation_1090519150(bg_1090519151) {
  var result_1090519152 = 0;

++excHandler;
    try {
    var numeric_1090519153 = nsuParseInt(bg_1090519151.aboRhD);
    if (    numeric_1090519153 == 95 || 
    numeric_1090519153 == 51 || 
    numeric_1090519153 == 6 || 
    numeric_1090519153 == 62 || 
    numeric_1090519153 == 17 || 
    numeric_1090519153 == 73 || 
    numeric_1090519153 == 28 || 
    numeric_1090519153 == 84 || 
    numeric_1090519153 == 55 || 
    numeric_1090519153 == 66 || 
    numeric_1090519153 == 77 || 
    numeric_1090519153 == 88    ){      result_1090519152 = 0;
      }
    else if (    numeric_1090519153 == 91 || 
    numeric_1090519153 == 47 || 
    numeric_1090519153 == 2 || 
    numeric_1090519153 == 58 || 
    numeric_1090519153 == 13 || 
    numeric_1090519153 == 69 || 
    numeric_1090519153 == 24 || 
    numeric_1090519153 == 80    ){      result_1090519152 = 1;
      }
    else if (    numeric_1090519153 == 92 || 
    numeric_1090519153 == 48 || 
    numeric_1090519153 == 3 || 
    numeric_1090519153 == 59 || 
    numeric_1090519153 == 14 || 
    numeric_1090519153 == 70 || 
    numeric_1090519153 == 25 || 
    numeric_1090519153 == 81    ){      result_1090519152 = 2;
      }
    else if (    numeric_1090519153 == 93 || 
    numeric_1090519153 == 49 || 
    numeric_1090519153 == 4 || 
    numeric_1090519153 == 60 || 
    numeric_1090519153 == 15 || 
    numeric_1090519153 == 71 || 
    numeric_1090519153 == 26 || 
    numeric_1090519153 == 82    ){      result_1090519152 = 3;
      }
    else if (    numeric_1090519153 == 94 || 
    numeric_1090519153 == 50 || 
    numeric_1090519153 == 5 || 
    numeric_1090519153 == 61 || 
    numeric_1090519153 == 16 || 
    numeric_1090519153 == 72 || 
    numeric_1090519153 == 27 || 
    numeric_1090519153 == 83    ){      result_1090519152 = 4;
      }
    else if (    numeric_1090519153 == 96 || 
    numeric_1090519153 == 52 || 
    numeric_1090519153 == 7 || 
    numeric_1090519153 == 63 || 
    numeric_1090519153 == 18 || 
    numeric_1090519153 == 74 || 
    numeric_1090519153 == 29 || 
    numeric_1090519153 == 85    ){      result_1090519152 = 5;
      }
    else if (    numeric_1090519153 == 97 || 
    numeric_1090519153 == 53 || 
    numeric_1090519153 == 8 || 
    numeric_1090519153 == 64 || 
    numeric_1090519153 == 19 || 
    numeric_1090519153 == 75 || 
    numeric_1090519153 == 30 || 
    numeric_1090519153 == 86    ){      result_1090519152 = 6;
      }
    else if (    numeric_1090519153 == 98 || 
    numeric_1090519153 == 54 || 
    numeric_1090519153 == 9 || 
    numeric_1090519153 == 65 || 
    numeric_1090519153 == 20 || 
    numeric_1090519153 == 76 || 
    numeric_1090519153 == 31 || 
    numeric_1090519153 == 87    ){      result_1090519152 = 7;
      }
    else{
      }
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
    var two_1090519154 = bg_1090519151.aboRhD[1];
    switch (two_1090519154) {
    case 48:
    case 54:
      result_1090519152 = 0;
      break;
    case 50:
      result_1090519152 = 1;
      break;
    case 51:
      result_1090519152 = 2;
      break;
    case 52:
      result_1090519152 = 3;
      break;
    case 53:
      result_1090519152 = 4;
      break;
    case 55:
      result_1090519152 = 5;
      break;
    case 56:
      result_1090519152 = 6;
      break;
    case 57:
      result_1090519152 = 7;
      break;
    default: 
      break;
    }
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    }

  return result_1090519152;

}

function interpretABORhD_1090519171(bg_1090519172) {
  var result_1090519173 = ({kind: 0, group: [], collectionInformation: 0, message: []});

  BeforeRet: {
    var group_1090519174 = [];
    var collect_1090519175 = 0;
++excHandler;
    try {
    var numeric_1090519176 = nsuParseInt(bg_1090519172.aboRhD);
    if (    numeric_1090519176 >= 91 && numeric_1090519176 <= 98    ){      group_1090519174 = nimCopy(null, [79,32,82,104,68,32,110,101,103], NTI33554449);
      }
    else if (    numeric_1090519176 >= 47 && numeric_1090519176 <= 54    ){      group_1090519174 = nimCopy(null, [79,32,82,104,68,32,112,111,115], NTI33554449);
      }
    else if (    numeric_1090519176 >= 2 && numeric_1090519176 <= 9    ){      group_1090519174 = nimCopy(null, [65,32,82,104,68,32,110,101,103], NTI33554449);
      }
    else if (    numeric_1090519176 >= 58 && numeric_1090519176 <= 65    ){      group_1090519174 = nimCopy(null, [65,32,82,104,68,32,112,111,115], NTI33554449);
      }
    else if (    numeric_1090519176 >= 13 && numeric_1090519176 <= 20    ){      group_1090519174 = nimCopy(null, [66,32,82,104,68,32,110,101,103], NTI33554449);
      }
    else if (    numeric_1090519176 >= 69 && numeric_1090519176 <= 76    ){      group_1090519174 = nimCopy(null, [66,32,82,104,68,32,112,111,115], NTI33554449);
      }
    else if (    numeric_1090519176 >= 24 && numeric_1090519176 <= 31    ){      group_1090519174 = nimCopy(null, [65,66,32,82,104,68,32,112,111,115], NTI33554449);
      }
    else if (    numeric_1090519176 >= 80 && numeric_1090519176 <= 87    ){      group_1090519174 = nimCopy(null, [65,66,32,82,104,68,32,112,111,115], NTI33554449);
      }
    else if (    numeric_1090519176 == 55    ){      group_1090519174 = nimCopy(null, [79], NTI33554449);
      }
    else if (    numeric_1090519176 == 66    ){      group_1090519174 = nimCopy(null, [65], NTI33554449);
      }
    else if (    numeric_1090519176 == 77    ){      group_1090519174 = nimCopy(null, [66], NTI33554449);
      }
    else if (    numeric_1090519176 == 88    ){      group_1090519174 = nimCopy(null, [65,66], NTI33554449);
      }
    else{
      }
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
    var one_1090519177 = bg_1090519172.aboRhD[0];
    var two_1090519178 = bg_1090519172.aboRhD[1];
    if ((ConstSet6[two_1090519178] != undefined)) {
    switch (one_1090519177) {
    case 80:
      group_1090519174 = nimCopy(null, [79], NTI33554449);
      break;
    case 65:
      group_1090519174 = nimCopy(null, [65], NTI33554449);
      break;
    case 66:
      group_1090519174 = nimCopy(null, [66], NTI33554449);
      break;
    case 67:
      group_1090519174 = nimCopy(null, [65,66], NTI33554449);
      break;
    case 68:
      group_1090519174 = nimCopy(null, [112,97,114,97,45,66,111,109,98,97,121,44,32,82,104,68,32,110,101,103], NTI33554449);
      break;
    case 69:
      group_1090519174 = nimCopy(null, [112,97,114,97,45,66,111,109,98,97,121,44,32,82,104,68,32,112,111,115], NTI33554449);
      break;
    case 71:
      group_1090519174 = nimCopy(null, [66,111,109,98,97,121,44,32,82,104,68,32,110,101,103], NTI33554449);
      break;
    case 72:
      group_1090519174 = nimCopy(null, [66,111,109,98,97,121,44,32,82,104,68,32,112,111,115], NTI33554449);
      break;
    case 73:
      group_1090519174 = nimCopy(null, [79,32,112,97,114,97,45,66,111,109,98,97,121,44,32,82,104,68,32,110,101,103], NTI33554449);
      break;
    case 74:
      group_1090519174 = nimCopy(null, [79,32,112,97,114,97,45,66,111,109,98,97,121,44,32,82,104,68,32,112,111,115], NTI33554449);
      break;
    case 75:
      group_1090519174 = nimCopy(null, [65,32,112,97,114,97,45,66,111,109,98,97,121,44,32,82,104,68,32,110,101,103], NTI33554449);
      break;
    case 76:
      group_1090519174 = nimCopy(null, [66,32,112,97,114,97,45,66,111,109,98,97,121,44,32,82,104,68,32,110,101,103], NTI33554449);
      break;
    case 77:
      group_1090519174 = nimCopy(null, [65,66,32,112,97,114,97,45,66,111,109,98,97,121,44,32,82,104,68,32,110,101,103], NTI33554449);
      break;
    case 78:
      group_1090519174 = nimCopy(null, [65,32,112,97,114,97,45,66,111,109,98,97,121,44,32,82,104,68,32,112,111,115], NTI33554449);
      break;
    case 79:
      group_1090519174 = nimCopy(null, [66,32,112,97,114,97,45,66,111,109,98,97,121,44,32,82,104,68,32,112,111,115], NTI33554449);
      break;
    case 81:
      group_1090519174 = nimCopy(null, [65,66,32,112,97,114,97,45,66,111,109,98,97,121,44,32,82,104,68,32,112,111,115], NTI33554449);
      break;
    default: 
      break;
    }
    }
    else {
    if ((two_1090519178 == 48)) {
    switch (one_1090519177) {
    case 65:
      group_1090519174 = nimCopy(null, [71,114,117,112,112,32,65,44,32,112,111,111,108,101,100,32,82,104,68], NTI33554449);
      break;
    case 66:
      group_1090519174 = nimCopy(null, [71,114,117,112,112,32,66,44,32,112,111,111,108,101,100,32,82,104,68], NTI33554449);
      break;
    case 67:
      group_1090519174 = nimCopy(null, [71,114,117,112,112,32,65,66,44,32,112,111,111,108,101,100,32,82,104,68,32,91,80,111,111,108,101,100,32,80,114,111,100,117,99,116,115,93], NTI33554449);
      break;
    case 68:
      group_1090519174 = nimCopy(null, [71,114,117,112,112,32,79,44,32,112,111,111,108,101,100,32,82,104,68], NTI33554449);
      break;
    case 69:
      group_1090519174 = nimCopy(null, [80,111,111,108,101,100,32,65,66,79,44,32,82,104,68,32,112,111,115], NTI33554449);
      break;
    case 70:
      group_1090519174 = nimCopy(null, [80,111,111,108,101,100,32,65,66,79,44,32,82,104,68,32,110,101,103], NTI33554449);
      break;
    case 71:
      group_1090519174 = nimCopy(null, [80,111,111,108,101,100,32,65,66,79,44,32,112,111,111,108,101,100,32,82,104,68], NTI33554449);
      break;
    case 72:
      group_1090519174 = nimCopy(null, [80,111,111,108,101,100,32,65,66,79,32,40,82,104,68,32,110,111,116,32,115,112,101,99,105,102,105,101,100,41], NTI33554449);
      break;
    case 73:
      group_1090519174 = nimCopy(null, [65,49], NTI33554449);
      break;
    case 74:
      group_1090519174 = nimCopy(null, [65,50], NTI33554449);
      break;
    case 75:
      group_1090519174 = nimCopy(null, [65,60,115,117,98,62,49,60,47,115,117,98,62,66], NTI33554449);
      break;
    case 76:
      group_1090519174 = nimCopy(null, [65,60,115,117,98,62,50,60,47,115,117,98,62,66], NTI33554449);
      break;
    default: 
      break;
    }
    }
    }
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    }
    if ((0 < (group_1090519174).length)) {
    collect_1090519175 = interpretCollectionInformation_1090519150(bg_1090519172);
    result_1090519173 = nimCopy(result_1090519173, {kind: 0, group: nimCopy(null, group_1090519174, NTI33554449), collectionInformation: collect_1090519175, message: []}, NTI1090519117);
    break BeforeRet;
    }
    else {
      switch (toJSStr(bg_1090519172.aboRhD)) {
      case "00":
        group_1090519174 = nimCopy(null, [78,111,32,65,66,79,32,111,114,32,82,104,32,105,110,102,111,114,109,97,116,105,111,110,32,105,115,32,97,118,97,105,108,97,98,108,101], NTI33554449);
        break;
      case "Ma":
        group_1090519174 = nimCopy(null, [65,117,116,111,108,111,103,111,117,115,32,99,111,108,108,101,99,116,105,111,110], NTI33554449);
        break;
      case "Mb":
        group_1090519174 = nimCopy(null, [66,105,111,104,97,122,97,114,100,111,117,115], NTI33554449);
        break;
      case "Md":
        group_1090519174 = nimCopy(null, [68,105,115,99,97,114,100,32,40,116,111,32,98,101,32,100,101,115,116,114,111,121,101,100,41], NTI33554449);
        break;
      case "Mf":
        group_1090519174 = nimCopy(null, [70,111,114,32,102,114,97,99,116,105,111,110,97,116,105,111,110,32,117,115,101,32,111,110,108,121], NTI33554449);
        break;
      case "Mq":
        group_1090519174 = nimCopy(null, [81,117,97,114,97,110,116,105,110,101,47,104,111,108,100,32,102,111,114,32,102,117,114,116,104,101,114,32,116,101,115,116,105,110,103,32,111,114,32,112,114,111,99,101,115,115,105,110,103], NTI33554449);
        break;
      case "Mr":
        group_1090519174 = nimCopy(null, [70,111,114,32,114,101,115,101,97,114,99,104,32,117,115,101,32,111,110,108,121], NTI33554449);
        break;
      case "Mx":
        group_1090519174 = nimCopy(null, [78,111,116,32,102,111,114,32,116,114,97,110,115,102,117,115,105,111,110,32,98,97,115,101,100,32,111,110,32,116,101,115,116,32,114,101,115,117,108,116,115], NTI33554449);
        break;
      case "T1":
        group_1090519174 = nimCopy(null, [65,66,79,32,110,111,116,32,115,112,101,99,105,102,105,101,100,44,32,82,104,68,32,112,111,115,105,116,105,118,101], NTI33554449);
        break;
      case "T2":
        group_1090519174 = nimCopy(null, [65,66,79,32,110,111,116,32,115,112,101,99,105,102,105,101,100,44,32,82,104,68,32,110,101,103,97,116,105,118,101], NTI33554449);
        break;
      case "T3":
        group_1090519174 = nimCopy(null, [65,66,79,32,110,111,116,32,115,112,101,99,105,102,105,101,100,44,32,82,104,68,32,110,111,116,32,115,112,101,99,105,102,105,101,100], NTI33554449);
        break;
      case "T4":
        group_1090519174 = nimCopy(null, [65,117,116,111,108,111,103,111,117,115,32,99,111,108,108,101,99,116,105,111,110,47,105,110,32,113,117,97,114,97,110,116,105,110,101], NTI33554449);
        break;
      case "T5":
        group_1090519174 = nimCopy(null, [83,101,101,32,111,117,116,101,114,32,112,97,99,107,97,103,105,110,103,32,102,111,114,32,112,114,111,100,117,99,116,32,115,116,97,116,117,115], NTI33554449);
        break;
      case "T6":
        group_1090519174 = nimCopy(null, [77,117,115,116,32,98,101,32,115,116,101,114,105,108,105,122,101,100,32,98,101,102,111,114,101,32,114,101,108,101,97,115,101], NTI33554449);
        break;
      default: 
        break;
      }
      if ((0 < (group_1090519174).length)) {
      result_1090519173 = nimCopy(result_1090519173, {kind: 1, message: nimCopy(null, group_1090519174, NTI33554449), group: [], collectionInformation: 0}, NTI1090519117);
      break BeforeRet;
      }
      
    }
    
    if (eqStrings(group_1090519174, [])) {
    raiseException({message: ([107,117,110,100,101,32,105,110,116,101,32,116,111,108,107,97,32,98,108,111,100,103,114,117,112,112,32,102,195,182,114,58,32,39] || []).concat(bg_1090519172.aboRhD || [],[39] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    
  };

  return result_1090519173;

}

function interpretKell_1090519249(bg_1090519250) {
  var result_1090519251 = 0;

    switch (bg_1090519250.rhKellMi[0]) {
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 88:
      result_1090519251 = 2;
      break;
    case 83:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 89:
      result_1090519251 = 1;
      break;
    case 84:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 90:
      result_1090519251 = 0;
      break;
    case 85:
    case 86:
    case 87:
      result_1090519251 = 3;
      break;
    default: 
      raiseException({message: ([111,107,195,164,110,116,32,118,195,164,114,100,101,32,102,195,182,114,32,75,101,108,108,58,32,39] || []).concat(bg_1090519250.rhKellMi || [],[39] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }

  return result_1090519251;

}

function interpretRh_1090519269(bg_1090519270) {
  var result_1090519271 = new Uint8Array(4);

    switch (bg_1090519270.rhKellMi[0]) {
    case 48:
    case 83:
    case 84:
      result_1090519271 = nimCopy(result_1090519271, new Uint8Array([2, 2, 2, 2]), NTI1090519191);
      break;
    case 49:
    case 65:
    case 74:
      result_1090519271 = nimCopy(result_1090519271, new Uint8Array([1, 0, 1, 0]), NTI1090519191);
      break;
    case 50:
    case 66:
    case 75:
      result_1090519271 = nimCopy(result_1090519271, new Uint8Array([0, 0, 1, 0]), NTI1090519191);
      break;
    case 51:
    case 67:
    case 76:
      result_1090519271 = nimCopy(result_1090519271, new Uint8Array([0, 0, 0, 0]), NTI1090519191);
      break;
    case 52:
    case 68:
    case 77:
      result_1090519271 = nimCopy(result_1090519271, new Uint8Array([0, 0, 0, 1]), NTI1090519191);
      break;
    case 53:
    case 69:
    case 78:
      result_1090519271 = nimCopy(result_1090519271, new Uint8Array([1, 0, 0, 0]), NTI1090519191);
      break;
    case 54:
    case 70:
    case 79:
      result_1090519271 = nimCopy(result_1090519271, new Uint8Array([1, 0, 0, 1]), NTI1090519191);
      break;
    case 55:
    case 71:
    case 80:
      result_1090519271 = nimCopy(result_1090519271, new Uint8Array([0, 1, 1, 0]), NTI1090519191);
      break;
    case 56:
    case 72:
    case 81:
      result_1090519271 = nimCopy(result_1090519271, new Uint8Array([0, 1, 0, 0]), NTI1090519191);
      break;
    case 57:
    case 73:
    case 82:
      result_1090519271 = nimCopy(result_1090519271, new Uint8Array([0, 1, 0, 1]), NTI1090519191);
      break;
    case 88:
    case 89:
    case 90:
      result_1090519271 = nimCopy(result_1090519271, new Uint8Array([1, 2, 1, 2]), NTI1090519191);
      break;
    default: 
      raiseException({message: ([111,107,195,164,110,116,32,118,195,164,114,100,101,32,102,195,182,114,32,82,104,58,32,39] || []).concat(bg_1090519270.rhKellMi || [],[39] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }

  return result_1090519271;

}

function interpretMi_1090519289(bg_1090519290) {
  var result_1090519291 = 0;

    if (eqStrings(bg_1090519290.rhKellMi, [85])) {
    result_1090519291 = 1;
    }
    else {
    if (eqStrings(bg_1090519290.rhKellMi, [86])) {
    result_1090519291 = 0;
    }
    }

  return result_1090519291;

}

function interpretRhKellMi_1090519292(bg_1090519293) {
  var result_1090519294 = ({kind: 0, kell: 0, rhC: 0, rhsmallc: 0, rhE: 0, rhsmalle: 0, mipheno: 0});

  BeforeRet: {
    if (eqStrings(bg_1090519293.rhKellMi, [87])) {
    result_1090519294 = nimCopy(result_1090519294, {kind: 2, kell: 0, rhC: 0, rhsmallc: 0, rhE: 0, rhsmalle: 0, mipheno: 0}, NTI1090519173);
    break BeforeRet;
    }
    
    var kell_1090519295 = interpretKell_1090519249(bg_1090519293);
    if (!((kell_1090519295 == 3))) {
    var rh_1090519301 = interpretRh_1090519269(bg_1090519293);
    result_1090519294 = nimCopy(result_1090519294, {kind: 0, kell: kell_1090519295, rhC: rh_1090519301[0], rhsmallc: rh_1090519301[1], rhE: rh_1090519301[2], rhsmalle: rh_1090519301[3], mipheno: 0}, NTI1090519173);
    }
    else {
      var mi_1090519302 = interpretMi_1090519289(bg_1090519293);
      result_1090519294 = nimCopy(result_1090519294, {kind: 1, mipheno: mi_1090519302, kell: 0, rhC: 0, rhsmallc: 0, rhE: 0, rhsmalle: 0}, NTI1090519173);
    }
    
  };

  return result_1090519294;

}

function toHtml_1090519367(bg_1090519368) {
    var Temporary1;
    var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;
      var Temporary7;
      var Temporary8;
      var Temporary9;

  var result_1090519369 = [];

    var aboRhD_1090519370 = interpretABORhD_1090519171(bg_1090519368);
    var rhKellMi_1090519371 = interpretRhKellMi_1090519292(bg_1090519368);
    var aboRows_1090519372 = ([60,116,114,62,60,116,100,62,65,66,79,32,111,99,104,32,82,104,68,45,75,111,100,60,47,116,100,62,60,116,100,62] || []).concat(bg_1090519368.aboRhD || [],[60,47,116,100,62,60,47,116,114,62] || []);
    if ((aboRhD_1090519370.kind == 0)) {
    var Temporary1 = aboRhD_1090519370;
    if (ConstSet7[Temporary1.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'group\' is not accessible for type \'ABORhD\' using \'kind = "), reprDiscriminant(Temporary1.kind, NTI1090519115)); }
    aboRows_1090519372.push.apply(aboRows_1090519372, ([60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62,65,66,79,32,111,99,104,32,82,104,68,60,47,116,100,62,60,116,100,62] || []).concat(Temporary1.group || [],[60,47,116,100,62,60,47,116,114,62] || []));;
    var Temporary2 = aboRhD_1090519370;
    if (ConstSet8[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'collectionInformation\' is not accessible for type \'ABORhD\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1090519115)); }
    aboRows_1090519372.push.apply(aboRows_1090519372, ([60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62,84,97,112,112,110,105,110,103,115,116,121,112,60,47,116,100,62,60,116,100,62] || []).concat(reprEnum(Temporary2.collectionInformation, NTI1090519116) || [],[60,47,116,100,62,60,47,116,114,62] || []));;
    }
    else {
      var Temporary3 = aboRhD_1090519370;
      if (ConstSet9[Temporary3.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'message\' is not accessible for type \'ABORhD\' using \'kind = "), reprDiscriminant(Temporary3.kind, NTI1090519115)); }
    aboRows_1090519372.push.apply(aboRows_1090519372, ([60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62,77,101,100,100,101,108,97,110,100,101,60,47,116,100,62,60,116,100,62] || []).concat(Temporary3.message || [],[60,47,116,100,62,60,47,116,114,62] || []));;
    }
    
    var phenoRows_1090519381 = ([60,116,114,62,60,116,100,62,70,101,110,111,116,121,112,115,107,111,100,60,47,116,100,62,60,116,100,62] || []).concat(bg_1090519368.rhKellMi || [],[60,47,116,100,62,60,47,116,114,62] || []);
    switch (rhKellMi_1090519371.kind) {
    case 0:
      var Temporary4 = rhKellMi_1090519371;
      if (ConstSet10[Temporary4.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'rhC\' is not accessible for type \'RhKellMi\' using \'kind = "), reprDiscriminant(Temporary4.kind, NTI1090519171)); }
      var Temporary5 = rhKellMi_1090519371;
      if (ConstSet11[Temporary5.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'rhsmallc\' is not accessible for type \'RhKellMi\' using \'kind = "), reprDiscriminant(Temporary5.kind, NTI1090519171)); }
      var Temporary6 = rhKellMi_1090519371;
      if (ConstSet12[Temporary6.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'rhE\' is not accessible for type \'RhKellMi\' using \'kind = "), reprDiscriminant(Temporary6.kind, NTI1090519171)); }
      var Temporary7 = rhKellMi_1090519371;
      if (ConstSet13[Temporary7.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'rhsmalle\' is not accessible for type \'RhKellMi\' using \'kind = "), reprDiscriminant(Temporary7.kind, NTI1090519171)); }
      var Temporary8 = rhKellMi_1090519371;
      if (ConstSet14[Temporary8.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'kell\' is not accessible for type \'RhKellMi\' using \'kind = "), reprDiscriminant(Temporary8.kind, NTI1090519171)); }
      var phenoString_1090519397 = ([32,67] || []).concat(reprEnum(Temporary4.rhC, NTI1090519172) || [],[32,99] || [],reprEnum(Temporary5.rhsmallc, NTI1090519172) || [],[32,69] || [],reprEnum(Temporary6.rhE, NTI1090519172) || [],[32,101] || [],reprEnum(Temporary7.rhsmalle, NTI1090519172) || [],[75] || [],reprEnum(Temporary8.kell, NTI1090519172) || []);
      phenoRows_1090519381.push.apply(phenoRows_1090519381, ([60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62,70,101,110,111,116,121,112,32,40,82,104,47,75,41,60,47,116,100,62,60,116,100,62] || []).concat(phenoString_1090519397 || [],[60,47,116,100,62,60,47,116,114,62] || []));;
      break;
    case 1:
      var Temporary9 = rhKellMi_1090519371;
      if (ConstSet15[Temporary9.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'mipheno\' is not accessible for type \'RhKellMi\' using \'kind = "), reprDiscriminant(Temporary9.kind, NTI1090519171)); }
      phenoRows_1090519381.push.apply(phenoRows_1090519381, (makeNimstrLit("<tr><td style=\"padding-left: 2em;\">Fenotyp (Mi<sup>a</sup>/Mur)</td><td>") || []).concat(reprEnum(Temporary9.mipheno, NTI1090519172) || [],[60,47,116,100,62,60,47,116,114,62] || []));;
      break;
    case 2:
      phenoRows_1090519381.push.apply(phenoRows_1090519381, makeNimstrLit("<tr><td style=\"padding-left: 2em;\">Fenotyp (ok\xC3\xA4nd)</td><td>Special Testing bar code present and must be scanned and interpreted</td></tr>"));;
      break;
    }
    var body_1090519401 = ([60,100,105,118,62] || []).concat(aboRows_1090519372 || [],phenoRows_1090519381 || [],[60,116,114,62,60,116,100,62,101,60,47,116,100,62,60,116,100,62] || [],bg_1090519368.e || [],[60,47,116,100,62,60,47,116,114,62,60,47,100,105,118,62] || []);
    result_1090519369 = nimCopy(null, toHtmlCommon_1073741921(body_1090519401, bg_1090519368.dataIdentifier), NTI33554449);

  return result_1090519369;

}

function verifyBloodGroupsABORhD_1090519049(code_1090519050) {
    if (!(((code_1090519050).length == 6))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,54,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1090519050).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseBloodGroupsABORhD_1090519052(code_1090519053) {
  var result_1090519054 = ({dataIdentifier: [], aboRhD: [], rhKellMi: [], e: []});

    verifyBloodGroupsABORhD_1090519049(code_1090519053);
    result_1090519054.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1090519053, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1090519054.aboRhD = nimCopy(null, HEX5BHEX5D_687867129(code_1090519053, HEX2EHEX2E_989855792(2, 3)), NTI33554449);
    result_1090519054.rhKellMi = nimCopy(null, HEX5BHEX5D_687867129(code_1090519053, HEX2EHEX2E_989855792(4, 4)), NTI33554449);
    result_1090519054.e = nimCopy(null, HEX5BHEX5D_687867129(code_1090519053, HEX2EHEX2E_989855792(5, 5)), NTI33554449);

  return result_1090519054;

}

function parseProductDescription_1107296324(code_1107296325) {
        var Temporary7;
        var Temporary8;

  var result_1107296326 = [];

    switch (code_1107296325.productDescriptionCode[0]) {
    case 69:
    case 70:
      result_1107296326 = nimCopy(null, [66,108,111,111,100,32,67,111,109,112,111,110,101,110,116,115], NTI33554449);
      break;
    case 72:
      result_1107296326 = nimCopy(null, makeNimstrLit("Medical products of human origin (MPHO) with International Nonproprietary Names (INN) and/or United States Adopted Name (USAN) names"), NTI33554449);
      break;
    case 77:
++excHandler;
      try {
      var numeric_1107296345 = nsuParseInt(HEX5BHEX5D_687867129(code_1107296325.productDescriptionCode, HEX2EHEX2E_989855792(1, 4)));
      if (      numeric_1107296345 >= 1 && numeric_1107296345 <= 999      ){        result_1107296326 = nimCopy(null, [72,117,109,97,110,32,77,105,108,107], NTI33554449);
        }
      else if (      numeric_1107296345 >= 1000 && numeric_1107296345 <= 8999      ){        result_1107296326 = nimCopy(null, [78,111,116,32,97,115,115,105,103,110,101,100], NTI33554449);
        }
      else if (      numeric_1107296345 >= 9000 && numeric_1107296345 <= 9999      ){        result_1107296326 = nimCopy(null, [84,111,112,105,99,97,108,32,80,114,111,100,117,99,116,115,32,111,102,32,72,117,109,97,110,32,79,114,105,103,105,110], NTI33554449);
        }
      else{
        }
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
      if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
      }
      else {
      	reraiseException();
      }
      lastJSError = prevJSError;
      } finally {
      }
      break;
    case 78:
++excHandler;
      try {
      var numeric_1107296364 = nsuParseInt(HEX5BHEX5D_687867129(code_1107296325.productDescriptionCode, HEX2EHEX2E_989855792(1, 4)));
      if (      numeric_1107296364 >= 1 && numeric_1107296364 <= 999      ){        result_1107296326 = nimCopy(null, [79,114,103,97,110,115], NTI33554449);
        }
      else if (      numeric_1107296364 >= 1000 && numeric_1107296364 <= 9999      ){        result_1107296326 = nimCopy(null, [78,111,116,32,97,115,115,105,103,110,101,100], NTI33554449);
        }
      else{
        }
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
      if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
      }
      else {
      	reraiseException();
      }
      lastJSError = prevJSError;
      } finally {
      }
      break;
    case 80:
      result_1107296326 = nimCopy(null, [82,101,103,101,110,101,114,97,116,101,100,32,84,105,115,115,117,101,32,112,114,111,100,117,99,116,115], NTI33554449);
      break;
    case 82:
++excHandler;
      try {
      var numeric_1107296383 = nsuParseInt(HEX5BHEX5D_687867129(code_1107296325.productDescriptionCode, HEX2EHEX2E_989855792(1, 4)));
      if (      numeric_1107296383 >= 1 && numeric_1107296383 <= 999      ){        result_1107296326 = nimCopy(null, [82,101,112,114,111,100,117,99,116,105,118,101,32,84,105,115,115,117,101,32,97,110,100,32,67,101,108,108,32,112,114,111,100,117,99,116,115], NTI33554449);
        }
      else if (      numeric_1107296383 >= 1000 && numeric_1107296383 <= 9999      ){        result_1107296326 = nimCopy(null, [78,111,116,32,97,115,115,105,103,110,101,100], NTI33554449);
        }
      else{
        }
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
      if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
      }
      else {
      	reraiseException();
      }
      lastJSError = prevJSError;
      } finally {
      }
      break;
    case 83:
      result_1107296326 = nimCopy(null, [67,101,108,108,117,108,97,114,32,84,104,101,114,97,112,121,32,112,114,111,100,117,99,116,115], NTI33554449);
      break;
    case 84:
      result_1107296326 = nimCopy(null, [84,105,115,115,117,101,32,112,114,111,100,117,99,116,115], NTI33554449);
      break;
    case 86:
      result_1107296326 = nimCopy(null, [79,99,117,108,97,114,32,84,105,115,115,117,101,32,112,114,111,100,117,99,116,115], NTI33554449);
      break;
    case 87:
++excHandler;
      try {
      var numeric_1107296402 = nsuParseInt(HEX5BHEX5D_687867129(code_1107296325.productDescriptionCode, HEX2EHEX2E_989855792(1, 4)));
      if (      numeric_1107296402 >= 1 && numeric_1107296402 <= 999      ){        result_1107296326 = nimCopy(null, [70,101,99,97,108,32,77,105,99,114,111,98,105,111,116,97], NTI33554449);
        }
      else if (      numeric_1107296402 >= 1000 && numeric_1107296402 <= 9999      ){        result_1107296326 = nimCopy(null, [78,111,116,32,97,115,115,105,103,110,101,100], NTI33554449);
        }
      else{
        }
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
      if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
      }
      else {
      	reraiseException();
      }
      lastJSError = prevJSError;
      } finally {
      }
      break;
    case 88:
++excHandler;
      try {
      var numeric_1107296421 = nsuParseInt(HEX5BHEX5D_687867129(code_1107296325.productDescriptionCode, HEX2EHEX2E_989855792(1, 4)));
      if (      numeric_1107296421 >= 1 && numeric_1107296421 <= 999      ){        result_1107296326 = nimCopy(null, [80,108,97,115,109,97,32,68,101,114,105,118,97,116,105,118,101,115], NTI33554449);
        }
      else if (      numeric_1107296421 >= 1000 && numeric_1107296421 <= 4999      ){        result_1107296326 = nimCopy(null, [78,111,116,32,97,115,115,105,103,110,101,100], NTI33554449);
        }
      else if (      numeric_1107296421 >= 5000 && numeric_1107296421 <= 5999      ){        result_1107296326 = nimCopy(null, [73,110,32,86,105,118,111,32,68,105,97,103,110,111,115,116,105,99,32,77,101,100,105,99,97,108,32,112,114,111,100,117,99,116,115,32,111,102,32,104,117,109,97,110,32,111,114,105,103,105,110,32,40,77,80,72,79,41], NTI33554449);
        }
      else if (      numeric_1107296421 >= 6000 && numeric_1107296421 <= 9999      ){        result_1107296326 = nimCopy(null, [78,111,116,32,97,115,115,105,103,110,101,100], NTI33554449);
        }
      else{
        }
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
      if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
      }
      else {
      	reraiseException();
      }
      lastJSError = prevJSError;
      } finally {
      }
      break;
    case 89:
++excHandler;
      try {
      var second_1107296422 = code_1107296325.productDescriptionCode[1];
      var numeric_1107296441 = nsuParseInt(HEX5BHEX5D_687867129(code_1107296325.productDescriptionCode, HEX2EHEX2E_989855792(2, 4)));
        if (!(ConstSet16[second_1107296422] != undefined)) Temporary8 = false; else {          Temporary8 = (0 <= numeric_1107296441);        }        if (!Temporary8) Temporary7 = false; else {          Temporary7 = (numeric_1107296441 <= 999);        }      if (Temporary7) {
      result_1107296326 = nimCopy(null, [67,108,105,110,105,99,97,108,32,84,114,105,97,108,115,32,112,114,111,100,117,99,116,115], NTI33554449);
      }
      else {
      }
      
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
      if (lastJSError && (isObj(lastJSError.m_type, NTI134217746))) {
      }
      else {
      	reraiseException();
      }
      lastJSError = prevJSError;
      } finally {
      }
      break;
    case 65:
    case 66:
    case 67:
    case 68:
      result_1107296326 = nimCopy(null, [78,97,116,105,111,110,97,108,32,111,114,32,76,111,99,97,108,47,70,97,99,105,108,105,116,121,32,99,111,100,101,115], NTI33554449);
      break;
    default: 
      break;
    }
    if (((result_1107296326).length == 0)) {
    raiseException({message: ([111,107,195,164,110,100,32,112,114,111,100,117,107,116,107,111,100,58,32] || []).concat(code_1107296325.productDescriptionCode || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_1107296326;

}

function parseCollectionType_1107296447(first_1107296448) {
    var Temporary1;

  var result_1107296449 = [];

    switch (first_1107296448) {
    case 48:
      Temporary1 = [78,111,116,32,115,112,101,99,105,102,105,101,100,32,40,110,117,108,108,32,118,97,108,117,101,41];
      break;
    case 86:
      Temporary1 = [86,111,108,117,110,116,101,101,114,32,104,111,109,111,108,111,103,111,117,115,32,40,97,108,108,111,103,101,110,101,105,99,41,32,40,100,101,102,97,117,108,116,41];
      break;
    case 82:
      Temporary1 = [86,111,108,117,110,116,101,101,114,32,114,101,115,101,97,114,99,104,32,40,80,114,111,100,117,99,116,32,110,111,116,32,105,110,116,101,110,100,101,100,32,102,111,114,32,104,117,109,97,110,32,97,112,112,108,105,99,97,116,105,111,110,41];
      break;
    case 83:
      Temporary1 = [86,111,108,117,110,116,101,101,114,32,115,111,117,114,99,101];
      break;
    case 84:
      Temporary1 = [86,111,108,117,110,116,101,101,114,32,116,104,101,114,97,112,101,117,116,105,99];
      break;
    case 80:
      Temporary1 = [80,97,105,100,32,104,111,109,111,108,111,103,111,117,115,32,40,97,108,108,111,103,101,110,101,105,99,41];
      break;
    case 114:
      Temporary1 = [80,97,105,100,32,114,101,115,101,97,114,99,104,32,40,80,114,111,100,117,99,116,32,110,111,116,32,105,110,116,101,110,100,101,100,32,102,111,114,32,104,117,109,97,110,32,97,112,112,108,105,99,97,116,105,111,110,41];
      break;
    case 115:
      Temporary1 = [80,97,105,100,32,115,111,117,114,99,101];
      break;
    case 65:
      Temporary1 = [65,117,116,111,108,111,103,111,117,115,44,32,101,108,105,103,105,98,108,101,32,102,111,114,32,99,114,111,115,115,111,118,101,114];
      break;
    case 49:
      Temporary1 = [70,111,114,32,97,117,116,111,108,111,103,111,117,115,32,117,115,101,32,111,110,108,121];
      break;
    case 88:
      Temporary1 = [70,111,114,32,97,117,116,111,108,111,103,111,117,115,32,117,115,101,32,111,110,108,121,44,32,98,105,111,104,97,122,97,114,100];
      break;
    case 68:
      Temporary1 = [86,111,108,117,110,116,101,101,114,32,100,105,114,101,99,116,101,100,44,32,101,108,105,103,105,98,108,101,32,102,111,114,32,99,114,111,115,115,111,118,101,114];
      break;
    case 100:
      Temporary1 = [80,97,105,100,32,100,105,114,101,99,116,101,100,44,32,101,108,105,103,105,98,108,101,32,102,111,114,32,99,114,111,115,115,111,118,101,114];
      break;
    case 50:
      Temporary1 = [70,111,114,32,100,105,114,101,99,116,101,100,32,114,101,99,105,112,105,101,110,116,32,117,115,101,32,111,110,108,121];
      break;
    case 76:
      Temporary1 = [70,111,114,32,100,105,114,101,99,116,101,100,32,114,101,99,105,112,105,101,110,116,32,117,115,101,32,111,110,108,121,44,32,108,105,109,105,116,101,100,32,101,120,112,111,115,117,114,101];
      break;
    case 69:
      Temporary1 = [77,101,100,105,99,97,108,32,101,120,99,101,112,116,105,111,110,44,32,102,111,114,32,115,112,101,99,105,102,105,101,100,32,114,101,99,105,112,105,101,110,116,32,111,110,108,121,32,40,97,108,108,111,103,101,110,101,105,99,41];
      break;
    case 81:
      Temporary1 = [83,101,101,32,40,105,46,101,46,44,32,114,101,97,100,32,91,115,99,97,110,93,41,32,83,112,101,99,105,97,108,32,84,101,115,116,105,110,103,32,98,97,114,32,99,111,100,101];
      break;
    case 51:
      Temporary1 = [70,111,114,32,100,105,114,101,99,116,101,100,32,114,101,99,105,112,105,101,110,116,32,117,115,101,32,111,110,108,121,44,32,98,105,111,104,97,122,97,114,100];
      break;
    case 52:
      Temporary1 = [68,101,115,105,103,110,97,116,101,100];
      break;
    case 53:
      Temporary1 = [68,101,100,105,99,97,116,101,100];
      break;
    case 54:
      Temporary1 = [68,101,115,105,103,110,97,116,101,100,44,32,98,105,111,104,97,122,97,114,100];
      break;
    case 70:
      Temporary1 = [70,97,109,105,108,121,32,114,101,115,101,114,118,101,100];
      break;
    case 67:
      Temporary1 = [82,101,112,108,97,99,101,109,101,110,116];
      break;
    case 55:
      Temporary1 = [70,111,114,32,97,108,108,111,103,101,110,101,105,99,32,117,115,101,46];
      break;
    case 56:
      Temporary1 = [70,111,114,32,97,117,116,111,108,111,103,111,117,115,32,117,115,101,46,32,67,111,110,116,97,105,110,115,32,97,108,108,111,103,101,110,101,105,99,32,109,97,116,101,114,105,97,108,46];
      break;
    case 66:
      Temporary1 = [68,105,114,101,99,116,101,100,47,68,101,100,105,99,97,116,101,100,47,68,101,115,105,103,110,97,116,101,100,32,67,111,108,108,101,99,116,105,111,110,32,85,115,101,32,79,110,108,121];
      break;
    case 72:
      Temporary1 = [68,105,114,101,99,116,101,100,47,68,101,100,105,99,97,116,101,100,47,68,101,115,105,103,110,97,116,101,100,32,67,111,108,108,101,99,116,105,111,110,47,66,105,111,104,97,122,97,114,100,111,117,115];
      break;
    case 74:
      Temporary1 = [68,105,114,101,99,116,101,100,47,68,101,100,105,99,97,116,101,100,47,68,101,115,105,103,110,97,116,101,100,32,67,111,108,108,101,99,116,105,111,110,47,69,108,105,103,105,98,108,101,32,102,111,114,32,67,114,111,115,115,111,118,101,114];
      break;
    case 71:
      Temporary1 = [70,111,114,32,69,109,101,114,103,101,110,99,121,32,85,115,101,32,79,110,108,121];
      break;
    default: 
      raiseException({message: ([111,107,195,164,110,100,32,116,121,112,32,97,118,32,116,97,112,112,110,105,110,103,32,101,108,108,101,114,32,100,111,110,97,116,105,111,110,58,32] || []).concat([first_1107296448]), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_1107296449 = nimCopy(null, Temporary1, NTI33554449);

  return result_1107296449;

}

function parseTds_1107296461(code_1107296462) {
        var Temporary1;

  var result_1107296463 = ({division: [], kind: 0, collectionType: []});

    var first_1107296464 = code_1107296462.productDescriptionCode[0];
    var second_1107296465 = code_1107296462.productDescriptionCode[0];
    switch (first_1107296464) {
    case 69:
    case 70:
    case 72:
    case 83:
    case 80:
    case 88:
    case 89:
      if (((first_1107296464 == 88) && !((second_1107296465 == 48)))) {
      if ((ConstSet17[second_1107296465] != undefined)) {
      result_1107296463 = nimCopy(result_1107296463, {kind: 0, division: nimCopy(null, code_1107296462.tds, NTI33554449), collectionType: []}, NTI1107296439);
      }
      else {
        raiseException({message: ([111,107,195,164,110,100,32,112,114,111,100,117,107,116,107,111,100,32,102,195,182,114,32,116,100,115,58,32] || []).concat(code_1107296462.productDescriptionCode || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      }
      
      }
      else {
        if (!(first_1107296464 == 89)) Temporary1 = false; else {          Temporary1 = !((ConstSet18[second_1107296465] != undefined));        }      if (Temporary1) {
      raiseException({message: ([111,107,195,164,110,100,32,112,114,111,100,117,107,116,107,111,100,32,102,195,182,114,32,116,100,115,58,32] || []).concat(code_1107296462.productDescriptionCode || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      }
      }
      var collectionType_1107296476 = parseCollectionType_1107296447(code_1107296462.tds[0]);
      var division_1107296495 = HEX5BHEX5D_687867129(code_1107296462.tds, HEX2EHEX2E_989855792(1, 2));
      result_1107296463 = nimCopy(result_1107296463, {kind: 1, collectionType: nimCopy(null, collectionType_1107296476, NTI33554449), division: nimCopy(null, division_1107296495, NTI33554449)}, NTI1107296439);
      break;
    case 77:
    case 78:
    case 82:
    case 84:
    case 86:
    case 87:
      result_1107296463 = nimCopy(result_1107296463, {kind: 0, division: nimCopy(null, code_1107296462.tds, NTI33554449), collectionType: []}, NTI1107296439);
      break;
    case 65:
    case 66:
    case 67:
    case 68:
      result_1107296463 = nimCopy(result_1107296463, {kind: 0, division: nimCopy(null, code_1107296462.tds, NTI33554449), collectionType: []}, NTI1107296439);
      break;
    default: 
      raiseException({message: ([111,107,195,164,110,100,32,112,114,111,100,117,107,116,107,111,100,58,32] || []).concat(code_1107296462.productDescriptionCode || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
      break;
    }

  return result_1107296463;

}

function toHtml_1107296536(code_1107296537) {
      var Temporary1;
      var Temporary2;
        var Temporary3;

  var result_1107296538 = [];

    var productType_1107296539 = parseProductDescription_1107296324(code_1107296537);
    var tds_1107296540 = parseTds_1107296461(code_1107296537);
    var tdsRows_1107296541 = [];
    switch (tds_1107296540.kind) {
    case 0:
      if (eqStrings(tds_1107296540.division, [48,48,48])) {
      Temporary1 = [101,106,32,100,101,108,97,100];
      }
      else {
      Temporary1 = [100,101,108,97,100];
      }
      
      tdsRows_1107296541 = nimCopy(null, ([60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62,68,101,108,110,105,110,103,60,47,116,100,62,60,116,100,62] || []).concat(Temporary1 || [],[60,47,116,100,62,60,47,116,114,62] || []), NTI33554449);
      break;
    case 1:
      var Temporary2 = tds_1107296540;
      if (ConstSet19[Temporary2.kind]===undefined) { raiseFieldError2(makeNimstrLit("field \'collectionType\' is not accessible for type \'Tds\' using \'kind = "), reprDiscriminant(Temporary2.kind, NTI1107296438)); }
      tdsRows_1107296541.push.apply(tdsRows_1107296541, (makeNimstrLit("<tr><td style=\"padding-left: 2em;\">Typ av tappning och anv\xC3\xA4ndning</td><td>") || []).concat(Temporary2.collectionType || [],[60,47,116,100,62,60,47,116,114,62] || []));;
      if ((ConstSet20[code_1107296537.productDescriptionCode[0]] != undefined)) {
      tdsRows_1107296541.push.apply(tdsRows_1107296541, makeNimstrLit("<tr><td style=\"padding-left: 2em;\">Delning</td><td>lokalt eller nationellt definierad kod</td></tr>"));;
      }
      else {
        if (eqStrings(tds_1107296540.division, [57,57])) {
        Temporary3 = [100,97,116,97,115,116,114,117,107,116,117,114,32,48,51,50,32,103,101,114,32,105,110,102,111,114,109,97,116,105,111,110,32,111,109,32,100,101,108,110,105,110,103];
        }
        else {
        if (eqStrings(tds_1107296540.division, [48,48])) {
        Temporary3 = [101,106,32,100,101,108,97,100];
        }
        else {
        Temporary3 = [100,101,108,97,100];
        }
        }
        var divisionField_1107296546 = nimCopy(null, Temporary3, NTI33554449);
        tdsRows_1107296541.push.apply(tdsRows_1107296541, ([60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62,68,101,108,110,105,110,103,60,47,116,100,62,60,116,100,62] || []).concat(divisionField_1107296546 || [],[60,47,116,100,62,60,47,116,114,62] || []));;
      }
      
      break;
    }
    var body_1107296547 = ([60,100,105,118,62,60,116,114,62,60,116,100,62,80,114,111,100,117,107,116,107,111,100,60,47,116,100,62,60,116,100,62] || []).concat(code_1107296537.productDescriptionCode || [],makeNimstrLit("</td></tr><tr><td style=\"padding-left: 2em;\">Komponenttyp</td><td>") || [],productType_1107296539 || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,116,100,115,60,47,116,100,62,60,116,100,62] || [],code_1107296537.tds || [],[60,47,116,100,62,60,47,116,114,62] || [],tdsRows_1107296541 || [],[60,47,100,105,118,62] || []);
    result_1107296538 = nimCopy(null, toHtmlCommon_1073741921(body_1107296547, code_1107296537.dataIdentifier), NTI33554449);

  return result_1107296538;

}

function verifyProductCode_1107296264(code_1107296265) {
    if (!(((code_1107296265).length == 10))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,49,48,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1107296265).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseProductCode_1107296267(code_1107296268) {
  var result_1107296269 = ({dataIdentifier: [], productDescriptionCode: [], tds: []});

    verifyProductCode_1107296264(code_1107296268);
    result_1107296269.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1107296268, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1107296269.productDescriptionCode = nimCopy(null, HEX5BHEX5D_687867129(code_1107296268, HEX2EHEX2E_989855792(2, 6)), NTI33554449);
    result_1107296269.tds = nimCopy(null, HEX5BHEX5D_687867129(code_1107296268, HEX2EHEX2E_989855792(7, 9)), NTI33554449);

  return result_1107296269;

}

function longYear_1073741831(century_1073741832, year_1073741833) {
  var result_1073741834 = 0;

    if ((century_1073741832 == 0)) {
    result_1073741834 = (2000 + year_1073741833);
    }
    else {
      result_1073741834 = ((1000 + (century_1073741832 * 100)) + year_1073741833);
    }
    

  return result_1073741834;

}

function isLeapYear_1073741828(year_1073741829) {
  var result_1073741830 = false;

    result_1073741830 = false;
    if ((Math.trunc(year_1073741829 % 4) == 0)) {
    if (((Math.trunc(year_1073741829 % 100) == 0) && (0 < Math.trunc(year_1073741829 % 400)))) {
    result_1073741830 = false;
    }
    else {
      result_1073741830 = true;
    }
    
    }
    

  return result_1073741830;

}

function ordinalToDate_1073741837(century_1073741838, year_1073741839, ordinal_1073741840) {
    var Temporary1;
    var Temporary5;
    var Temporary6;

  var result_1073741841 = [];

  BeforeRet: {
    var long_1073741842 = longYear_1073741831(nsuParseInt(century_1073741838), nsuParseInt(year_1073741839));
    if (isLeapYear_1073741828(long_1073741842)) {
    Temporary1 = monthsL_1073741836;
    }
    else {
    Temporary1 = months_1073741835;
    }
    
    var mtab_1073741843 = nimCopy(null, Temporary1, NTI1073741840);
    var ordinalint_1073741844 = nsuParseInt(ordinal_1073741840);
    var day_1073741845 = ordinalint_1073741844;
    var days_1073741846 = 0;
    var month_1073741847 = 0;
    Label2: {
      var m_1073741883 = 0;
      var res_553648787 = 0;
      Label3: {
          Label4: while (true) {
          if (!(res_553648787 <= 11)) break Label4;
            m_1073741883 = res_553648787;
            days_1073741846 += mtab_1073741843[m_1073741883];
            if ((ordinalint_1073741844 <= days_1073741846)) {
            month_1073741847 = (m_1073741883 + 1);
            break Label2;
            }
            
            day_1073741845 -= mtab_1073741843[m_1073741883];
            res_553648787 += 1;
          }
      };
    };
    if ((month_1073741847 < 10)) {
    Temporary5 = ([48] || []).concat(HEX24_369098760(month_1073741847) || []);
    }
    else {
    Temporary5 = HEX24_369098760(month_1073741847);
    }
    
    var monthString_1073741894 = nimCopy(null, Temporary5, NTI33554449);
    if ((day_1073741845 < 10)) {
    Temporary6 = ([48] || []).concat(HEX24_369098760(day_1073741845) || []);
    }
    else {
    Temporary6 = HEX24_369098760(day_1073741845);
    }
    
    var dayString_1073741895 = nimCopy(null, Temporary6, NTI33554449);
    result_1073741841 = nimCopy(null, (HEX24_369098760(long_1073741842) || []).concat([45] || [],monthString_1073741894 || [],[45] || [],dayString_1073741895 || []), NTI33554449);
    break BeforeRet;
  };

  return result_1073741841;

}

function toHtml_1124073558(date_1124073559) {
  var result_1124073560 = [];

    var body_1124073561 = ([60,100,105,118,62,60,116,114,62,60,116,100,62,83,101,107,101,108,60,47,116,100,62,60,116,100,62] || []).concat(date_1124073559.c || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,195,133,114,60,47,116,100,62,60,116,100,62] || [],date_1124073559.yy || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,68,97,116,117,109,110,117,109,109,101,114,32,40,49,32,106,97,110,117,97,114,105,32,61,32,49,41,60,47,116,100,62,60,116,100,62] || [],date_1124073559.jjj || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62,68,97,116,117,109,60,47,116,100,62,60,116,100,62] || [],ordinalToDate_1073741837(date_1124073559.c, date_1124073559.yy, date_1124073559.jjj) || [],[60,47,116,100,62,60,47,116,114,62,60,47,100,105,118,62] || []);
    result_1124073560 = nimCopy(null, toHtmlCommon_1073741921(body_1124073561, date_1124073559.dataIdentifier), NTI33554449);

  return result_1124073560;

}

function verifyExpirationDate_1124073480(code_1124073481) {
    if (!(((code_1124073481).length == 8))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,56,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1124073481).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseExpirationDate_1124073483(code_1124073484) {
  var result_1124073485 = ({dataIdentifier: [], c: [], yy: [], jjj: []});

    verifyExpirationDate_1124073480(code_1124073484);
    result_1124073485.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1124073484, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1124073485.c = nimCopy(null, HEX5BHEX5D_687867129(code_1124073484, HEX2EHEX2E_989855792(2, 2)), NTI33554449);
    result_1124073485.yy = nimCopy(null, HEX5BHEX5D_687867129(code_1124073484, HEX2EHEX2E_989855792(3, 4)), NTI33554449);
    result_1124073485.jjj = nimCopy(null, HEX5BHEX5D_687867129(code_1124073484, HEX2EHEX2E_989855792(5, 7)), NTI33554449);

  return result_1124073485;

}

function toDateTime_1073741912(century_1073741913, year_1073741914, ordinal_1073741915, hh_1073741916, mm_1073741917) {
  var result_1073741918 = [];

    var date_1073741919 = ordinalToDate_1073741837(century_1073741913, year_1073741914, ordinal_1073741915);
    result_1073741918 = nimCopy(null, (date_1073741919 || []).concat([32] || [],hh_1073741916 || [],[58] || [],mm_1073741917 || []), NTI33554449);

  return result_1073741918;

}

function toHtml_1140850812(date_1140850813) {
  var result_1140850814 = [];

    var body_1140850815 = ([60,100,105,118,62,60,116,114,62,60,116,100,62,83,101,107,101,108,60,47,116,100,62,60,116,100,62] || []).concat(date_1140850813.c || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,195,133,114,60,47,116,100,62,60,116,100,62] || [],date_1140850813.yy || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,68,97,116,117,109,110,117,109,109,101,114,32,40,49,32,106,97,110,117,97,114,105,32,61,32,49,41,60,47,116,100,62,60,116,100,62] || [],date_1140850813.jjj || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,84,105,109,109,101,60,47,116,100,62,60,116,100,62] || [],date_1140850813.hh || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,77,105,110,117,116,60,47,116,100,62,60,116,100,62] || [],date_1140850813.mm || [],makeNimstrLit("</td></tr><tr><td style=\"padding-left: 2em;\">Datum och tid</td><td>") || [],toDateTime_1073741912(date_1140850813.c, date_1140850813.yy, date_1140850813.jjj, date_1140850813.hh, date_1140850813.mm) || [],[60,47,116,100,62,60,47,116,114,62,60,47,100,105,118,62] || []);
    result_1140850814 = nimCopy(null, toHtmlCommon_1073741921(body_1140850815, date_1140850813.dataIdentifier), NTI33554449);

  return result_1140850814;

}

function verifyExpirationDateAndTime_1140850698(code_1140850699) {
    if (!(((code_1140850699).length == 12))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,49,50,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1140850699).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseExpirationDateAndTime_1140850701(code_1140850702) {
  var result_1140850703 = ({dataIdentifier: [], c: [], yy: [], jjj: [], hh: [], mm: []});

    verifyExpirationDateAndTime_1140850698(code_1140850702);
    result_1140850703.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1140850702, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1140850703.c = nimCopy(null, HEX5BHEX5D_687867129(code_1140850702, HEX2EHEX2E_989855792(2, 2)), NTI33554449);
    result_1140850703.yy = nimCopy(null, HEX5BHEX5D_687867129(code_1140850702, HEX2EHEX2E_989855792(3, 4)), NTI33554449);
    result_1140850703.jjj = nimCopy(null, HEX5BHEX5D_687867129(code_1140850702, HEX2EHEX2E_989855792(5, 7)), NTI33554449);
    result_1140850703.hh = nimCopy(null, HEX5BHEX5D_687867129(code_1140850702, HEX2EHEX2E_989855792(8, 9)), NTI33554449);
    result_1140850703.mm = nimCopy(null, HEX5BHEX5D_687867129(code_1140850702, HEX2EHEX2E_989855792(10, 11)), NTI33554449);

  return result_1140850703;

}

function toHtml_1157627990(date_1157627991) {
  var result_1157627992 = [];

    var body_1157627993 = ([60,100,105,118,62,60,116,114,62,60,116,100,62,83,101,107,101,108,60,47,116,100,62,60,116,100,62] || []).concat(date_1157627991.c || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,195,133,114,60,47,116,100,62,60,116,100,62] || [],date_1157627991.yy || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,68,97,116,117,109,110,117,109,109,101,114,32,40,49,32,106,97,110,117,97,114,105,32,61,32,49,41,60,47,116,100,62,60,116,100,62] || [],date_1157627991.jjj || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62,68,97,116,117,109,60,47,116,100,62,60,116,100,62] || [],ordinalToDate_1073741837(date_1157627991.c, date_1157627991.yy, date_1157627991.jjj) || [],[60,47,116,100,62,60,47,116,114,62,60,47,100,105,118,62] || []);
    result_1157627992 = nimCopy(null, toHtmlCommon_1073741921(body_1157627993, date_1157627991.dataIdentifier), NTI33554449);

  return result_1157627992;

}

function verifyCollectionDate_1157627912(code_1157627913) {
    if (!(((code_1157627913).length == 8))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,56,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1157627913).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseCollectionDate_1157627915(code_1157627916) {
  var result_1157627917 = ({dataIdentifier: [], c: [], yy: [], jjj: []});

    verifyCollectionDate_1157627912(code_1157627916);
    result_1157627917.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1157627916, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1157627917.c = nimCopy(null, HEX5BHEX5D_687867129(code_1157627916, HEX2EHEX2E_989855792(2, 2)), NTI33554449);
    result_1157627917.yy = nimCopy(null, HEX5BHEX5D_687867129(code_1157627916, HEX2EHEX2E_989855792(3, 4)), NTI33554449);
    result_1157627917.jjj = nimCopy(null, HEX5BHEX5D_687867129(code_1157627916, HEX2EHEX2E_989855792(5, 7)), NTI33554449);

  return result_1157627917;

}

function toHtml_1174405244(date_1174405245) {
  var result_1174405246 = [];

    var body_1174405247 = ([60,100,105,118,62,60,116,114,62,60,116,100,62,83,101,107,101,108,60,47,116,100,62,60,116,100,62] || []).concat(date_1174405245.c || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,195,133,114,60,47,116,100,62,60,116,100,62] || [],date_1174405245.yy || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,68,97,116,117,109,110,117,109,109,101,114,32,40,49,32,106,97,110,117,97,114,105,32,61,32,49,41,60,47,116,100,62,60,116,100,62] || [],date_1174405245.jjj || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,84,105,109,109,101,60,47,116,100,62,60,116,100,62] || [],date_1174405245.hh || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,77,105,110,117,116,60,47,116,100,62,60,116,100,62] || [],date_1174405245.mm || [],makeNimstrLit("</td></tr><tr><td style=\"padding-left: 2em;\">Datum och tid</td><td>") || [],toDateTime_1073741912(date_1174405245.c, date_1174405245.yy, date_1174405245.jjj, date_1174405245.hh, date_1174405245.mm) || [],[60,47,116,100,62,60,47,116,114,62,60,47,100,105,118,62] || []);
    result_1174405246 = nimCopy(null, toHtmlCommon_1073741921(body_1174405247, date_1174405245.dataIdentifier), NTI33554449);

  return result_1174405246;

}

function verifyCollectionDateAndTime_1174405130(code_1174405131) {
    if (!(((code_1174405131).length == 12))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,49,50,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1174405131).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseCollectionDateAndTime_1174405133(code_1174405134) {
  var result_1174405135 = ({dataIdentifier: [], c: [], yy: [], jjj: [], hh: [], mm: []});

    verifyCollectionDateAndTime_1174405130(code_1174405134);
    result_1174405135.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1174405134, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1174405135.c = nimCopy(null, HEX5BHEX5D_687867129(code_1174405134, HEX2EHEX2E_989855792(2, 2)), NTI33554449);
    result_1174405135.yy = nimCopy(null, HEX5BHEX5D_687867129(code_1174405134, HEX2EHEX2E_989855792(3, 4)), NTI33554449);
    result_1174405135.jjj = nimCopy(null, HEX5BHEX5D_687867129(code_1174405134, HEX2EHEX2E_989855792(5, 7)), NTI33554449);
    result_1174405135.hh = nimCopy(null, HEX5BHEX5D_687867129(code_1174405134, HEX2EHEX2E_989855792(8, 9)), NTI33554449);
    result_1174405135.mm = nimCopy(null, HEX5BHEX5D_687867129(code_1174405134, HEX2EHEX2E_989855792(10, 11)), NTI33554449);

  return result_1174405135;

}

function toHtml_1191182422(date_1191182423) {
  var result_1191182424 = [];

    var body_1191182425 = ([60,100,105,118,62,60,116,114,62,60,116,100,62,83,101,107,101,108,60,47,116,100,62,60,116,100,62] || []).concat(date_1191182423.c || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,195,133,114,60,47,116,100,62,60,116,100,62] || [],date_1191182423.yy || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,68,97,116,117,109,110,117,109,109,101,114,32,40,49,32,106,97,110,117,97,114,105,32,61,32,49,41,60,47,116,100,62,60,116,100,62] || [],date_1191182423.jjj || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62,68,97,116,117,109,60,47,116,100,62,60,116,100,62] || [],ordinalToDate_1073741837(date_1191182423.c, date_1191182423.yy, date_1191182423.jjj) || [],[60,47,116,100,62,60,47,116,114,62,60,47,100,105,118,62] || []);
    result_1191182424 = nimCopy(null, toHtmlCommon_1073741921(body_1191182425, date_1191182423.dataIdentifier), NTI33554449);

  return result_1191182424;

}

function verifyProductionDate_1191182344(code_1191182345) {
    if (!(((code_1191182345).length == 8))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,56,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1191182345).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseProductionDate_1191182347(code_1191182348) {
  var result_1191182349 = ({dataIdentifier: [], c: [], yy: [], jjj: []});

    verifyProductionDate_1191182344(code_1191182348);
    result_1191182349.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1191182348, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1191182349.c = nimCopy(null, HEX5BHEX5D_687867129(code_1191182348, HEX2EHEX2E_989855792(2, 2)), NTI33554449);
    result_1191182349.yy = nimCopy(null, HEX5BHEX5D_687867129(code_1191182348, HEX2EHEX2E_989855792(3, 4)), NTI33554449);
    result_1191182349.jjj = nimCopy(null, HEX5BHEX5D_687867129(code_1191182348, HEX2EHEX2E_989855792(5, 7)), NTI33554449);

  return result_1191182349;

}

function toHtml_1207959676(date_1207959677) {
  var result_1207959678 = [];

    var body_1207959679 = ([60,100,105,118,62,60,116,114,62,60,116,100,62,83,101,107,101,108,60,47,116,100,62,60,116,100,62] || []).concat(date_1207959677.c || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,195,133,114,60,47,116,100,62,60,116,100,62] || [],date_1207959677.yy || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,68,97,116,117,109,110,117,109,109,101,114,32,40,49,32,106,97,110,117,97,114,105,32,61,32,49,41,60,47,116,100,62,60,116,100,62] || [],date_1207959677.jjj || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,84,105,109,109,101,60,47,116,100,62,60,116,100,62] || [],date_1207959677.hh || [],[60,47,116,100,62,60,47,116,114,62,60,116,114,62,60,116,100,62,77,105,110,117,116,60,47,116,100,62,60,116,100,62] || [],date_1207959677.mm || [],makeNimstrLit("</td></tr><tr><td style=\"padding-left: 2em;\">Datum och tid</td><td>") || [],toDateTime_1073741912(date_1207959677.c, date_1207959677.yy, date_1207959677.jjj, date_1207959677.hh, date_1207959677.mm) || [],[60,47,116,100,62,60,47,116,114,62,60,47,100,105,118,62] || []);
    result_1207959678 = nimCopy(null, toHtmlCommon_1073741921(body_1207959679, date_1207959677.dataIdentifier), NTI33554449);

  return result_1207959678;

}

function verifyProductionDateAndTime_1207959562(code_1207959563) {
    if (!(((code_1207959563).length == 12))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,49,50,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1207959563).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseProductionDateAndTime_1207959565(code_1207959566) {
  var result_1207959567 = ({dataIdentifier: [], c: [], yy: [], jjj: [], hh: [], mm: []});

    verifyProductionDateAndTime_1207959562(code_1207959566);
    result_1207959567.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1207959566, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1207959567.c = nimCopy(null, HEX5BHEX5D_687867129(code_1207959566, HEX2EHEX2E_989855792(2, 2)), NTI33554449);
    result_1207959567.yy = nimCopy(null, HEX5BHEX5D_687867129(code_1207959566, HEX2EHEX2E_989855792(3, 4)), NTI33554449);
    result_1207959567.jjj = nimCopy(null, HEX5BHEX5D_687867129(code_1207959566, HEX2EHEX2E_989855792(5, 7)), NTI33554449);
    result_1207959567.hh = nimCopy(null, HEX5BHEX5D_687867129(code_1207959566, HEX2EHEX2E_989855792(8, 9)), NTI33554449);
    result_1207959567.mm = nimCopy(null, HEX5BHEX5D_687867129(code_1207959566, HEX2EHEX2E_989855792(10, 11)), NTI33554449);

  return result_1207959567;

}

function toHtml_1224736816(code_1224736817) {
  var result_1224736818 = [];

    var body_1224736819 = ([60,100,105,118,62,60,116,114,62,60,116,100,62,122,122,122,122,122,60,47,116,100,62,60,116,100,62] || []).concat(code_1224736817.zzzzz || [],makeNimstrLit("</td></tr><tr><td style=\"padding-left: 2em;\">Tolkning</td><td>G\xC3\xA5r ej att tolka, ej \xC3\xB6ppen tillg\xC3\xA5ng till information</td></tr></div>") || []);
    result_1224736818 = nimCopy(null, toHtmlCommon_1073741921(body_1224736819, code_1224736817.dataIdentifier), NTI33554449);

  return result_1224736818;

}

function verifySpecialTestingGeneral_1224736774(code_1224736775) {
    if (!(((code_1224736775).length == 7))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,55,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1224736775).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseSpecialTestingGeneral_1224736777(code_1224736778) {
  var result_1224736779 = ({dataIdentifier: [], zzzzz: []});

    verifySpecialTestingGeneral_1224736774(code_1224736778);
    result_1224736779.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1224736778, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1224736779.zzzzz = nimCopy(null, HEX5BHEX5D_687867129(code_1224736778, HEX2EHEX2E_989855792(2, 6)), NTI33554449);

  return result_1224736779;

}

function add_1241514131(x_1241514133, x_1241514133_Idx, y_1241514134) {
    var Temporary1;

    var xl_1241514139 = (x_1241514133[x_1241514133_Idx]).length;
    if (x_1241514133[x_1241514133_Idx].length < (Temporary1 = (xl_1241514139 + (y_1241514134).length), Temporary1)) { for (var i = x_1241514133[x_1241514133_Idx].length ; i < Temporary1 ; ++i) x_1241514133[x_1241514133_Idx].push({Field0: [], Field1: 0}); }
               else { x_1241514133[x_1241514133_Idx].length = Temporary1; };
    Label2: {
      var i_1241514155 = 0;
      var colontmp__553648801 = 0;
      colontmp__553648801 = (y_1241514134).length - 1;
      var res_553648802 = 0;
      Label3: {
          Label4: while (true) {
          if (!(res_553648802 <= colontmp__553648801)) break Label4;
            i_1241514155 = res_553648802;
            x_1241514133[x_1241514133_Idx][(xl_1241514139 + i_1241514155)] = nimCopy(x_1241514133[x_1241514133_Idx][(xl_1241514139 + i_1241514155)], y_1241514134[i_1241514155], NTI1241514045);
            res_553648802 += 1;
          }
      };
    };

  
}

function parseRh_1241514069(value_1241514070) {
  var result_1241514071 = [{Field0: [], Field1: 0}, {Field0: [], Field1: 0}, {Field0: [], Field1: 0}, {Field0: [], Field1: 0}];

    switch (value_1241514070) {
    case 48:
      result_1241514071 = nimCopy(result_1241514071, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 1}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 1}], NTI1241514068);
      break;
    case 49:
      result_1241514071 = nimCopy(result_1241514071, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 1}], NTI1241514068);
      break;
    case 50:
      result_1241514071 = nimCopy(result_1241514071, [{Field0: [67], Field1: 1}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 1}], NTI1241514068);
      break;
    case 51:
      result_1241514071 = nimCopy(result_1241514071, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 1}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 0}], NTI1241514068);
      break;
    case 52:
      result_1241514071 = nimCopy(result_1241514071, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 0}], NTI1241514068);
      break;
    case 53:
      result_1241514071 = nimCopy(result_1241514071, [{Field0: [67], Field1: 1}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 0}], NTI1241514068);
      break;
    case 54:
      result_1241514071 = nimCopy(result_1241514071, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 1}, {Field0: [69], Field1: 1}, {Field0: [101], Field1: 0}], NTI1241514068);
      break;
    case 55:
      result_1241514071 = nimCopy(result_1241514071, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 1}, {Field0: [101], Field1: 0}], NTI1241514068);
      break;
    case 56:
      result_1241514071 = nimCopy(result_1241514071, [{Field0: [67], Field1: 1}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 1}, {Field0: [101], Field1: 0}], NTI1241514068);
      break;
    case 57:
      result_1241514071 = nimCopy(result_1241514071, [{Field0: [67], Field1: 2}, {Field0: [99], Field1: 2}, {Field0: [69], Field1: 2}, {Field0: [101], Field1: 2}], NTI1241514068);
      break;
    }

  return result_1241514071;

}

function parseAntigen_1241514121(spec_1241514122) {
  var result_1241514123 = [[]];

    var agIndex_1241514128 = 0;
    Label1: {
      var i_1241514129 = 0;
      var a_1241514130 = 0;
      var i_553648797 = 0;
      var L_553648798 = (spec_1241514122.aaaaaaaaaaaaaaaa).length;
      Label2: {
          Label3: while (true) {
          if (!(i_553648797 < L_553648798)) break Label3;
            i_1241514129 = i_553648797;
            a_1241514130 = spec_1241514122.aaaaaaaaaaaaaaaa[i_553648797];
            Label4: {
              if ((i_1241514129 == 0)) {
              add_1241514131(result_1241514123, 0, parseRh_1241514069(a_1241514130));
              break Label4;
              }
              
              result_1241514123[0].push({Field0: nimCopy(null, antigens_1241514066[agIndex_1241514128], NTI33554449), Field1: phenoOne_1241514067[(a_1241514130) - (48)]});;
              agIndex_1241514128 += 1;
              result_1241514123[0].push({Field0: nimCopy(null, antigens_1241514066[agIndex_1241514128], NTI33554449), Field1: phenoTwo_1241514068[(a_1241514130) - (48)]});;
              agIndex_1241514128 += 1;
            };
            i_553648797 += 1;
          }
      };
    };

  return result_1241514123[0];

}

function parseNegativeAntigen_1241514222(spec_1241514223) {
  var result_1241514224 = [];

++excHandler;
    try {
    var numeric_1241514225 = nsuParseInt(spec_1241514223.ii);
    if ((((99 < numeric_1241514225) || (numeric_1241514225 == 7)) || (numeric_1241514225 == 8))) {
    raiseException({message: ([111,107,195,164,110,100,32,107,111,100,32,102,195,182,114,32,97,110,116,105,103,101,110,58,32] || []).concat(spec_1241514223.ii || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_1241514224 = nimCopy(null, antigenNegativ_1241514221[numeric_1241514225], NTI33554449);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    raiseException({message: ([111,107,195,164,110,100,32,107,111,100,32,102,195,182,114,32,97,110,116,105,103,101,110,58,32] || []).concat(spec_1241514223.ii || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    lastJSError = prevJSError;
    } finally {
    }

  return result_1241514224;

}

function toHtml_1241514228(spec_1241514229) {
  var result_1241514230 = [];

    var pheno_1241514231 = parseAntigen_1241514121(spec_1241514229);
    var phenotypeRows_1241514232 = [];
    Label1: {
      var pair_1241514252 = {Field0: [], Field1: 0};
      var i_553648791 = 0;
      var L_553648792 = (pheno_1241514231).length;
      Label2: {
          Label3: while (true) {
          if (!(i_553648791 < L_553648792)) break Label3;
            pair_1241514252 = pheno_1241514231[i_553648791];
            phenotypeRows_1241514232.push.apply(phenotypeRows_1241514232, ([60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62] || []).concat(pair_1241514252.Field0 || [],[60,47,116,100,62,60,116,100,62] || [],reprEnum(pair_1241514252.Field1, NTI1241514044) || [],[60,47,116,100,62,60,47,116,114,62] || []));;
            i_553648791 += 1;
          }
      };
    };
    var body_1241514256 = ([60,100,105,118,62,60,116,114,62,60,116,100,62,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,60,47,116,100,62,60,116,100,62] || []).concat(spec_1241514229.aaaaaaaaaaaaaaaa || [],[60,47,116,100,62,60,47,116,114,62] || [],phenotypeRows_1241514232 || [],[60,116,114,62,60,116,100,62,105,105,60,47,116,100,62,60,116,100,62] || [],spec_1241514229.ii || [],makeNimstrLit("</td></tr><tr><td style=\"padding-left: 2em;\">Negativ f\xC3\xB6r</td><td>") || [],parseNegativeAntigen_1241514222(spec_1241514229) || [],[60,47,116,100,62,60,47,116,114,62,60,47,100,105,118,62] || []);
    result_1241514230 = nimCopy(null, toHtmlCommon_1073741921(body_1241514256, spec_1241514229.dataIdentifier), NTI33554449);

  return result_1241514230;

}

function verifySpecialTestingAntigensRetired_1241513992(code_1241513993) {
    if (!(((code_1241513993).length == 20))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,50,48,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1241513993).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseSpecialTestingAntigensRetired_1241513995(code_1241513996) {
  var result_1241513997 = ({dataIdentifier: [], aaaaaaaaaaaaaaaa: [], ii: []});

    verifySpecialTestingAntigensRetired_1241513992(code_1241513996);
    result_1241513997.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1241513996, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1241513997.aaaaaaaaaaaaaaaa = nimCopy(null, HEX5BHEX5D_687867129(code_1241513996, HEX2EHEX2E_989855792(2, 17)), NTI33554449);
    result_1241513997.ii = nimCopy(null, HEX5BHEX5D_687867129(code_1241513996, HEX2EHEX2E_989855792(18, 19)), NTI33554449);

  return result_1241513997;

}

function add_1258291347(x_1258291349, x_1258291349_Idx, y_1258291350) {
    var Temporary1;

    var xl_1258291355 = (x_1258291349[x_1258291349_Idx]).length;
    if (x_1258291349[x_1258291349_Idx].length < (Temporary1 = (xl_1258291355 + (y_1258291350).length), Temporary1)) { for (var i = x_1258291349[x_1258291349_Idx].length ; i < Temporary1 ; ++i) x_1258291349[x_1258291349_Idx].push({Field0: [], Field1: 0}); }
               else { x_1258291349[x_1258291349_Idx].length = Temporary1; };
    Label2: {
      var i_1258291371 = 0;
      var colontmp__553648815 = 0;
      colontmp__553648815 = (y_1258291350).length - 1;
      var res_553648816 = 0;
      Label3: {
          Label4: while (true) {
          if (!(res_553648816 <= colontmp__553648815)) break Label4;
            i_1258291371 = res_553648816;
            x_1258291349[x_1258291349_Idx][(xl_1258291355 + i_1258291371)] = nimCopy(x_1258291349[x_1258291349_Idx][(xl_1258291355 + i_1258291371)], y_1258291350[i_1258291371], NTI1258291261);
            res_553648816 += 1;
          }
      };
    };

  
}

function parseRh_1258291285(value_1258291286) {
  var result_1258291287 = [{Field0: [], Field1: 0}, {Field0: [], Field1: 0}, {Field0: [], Field1: 0}, {Field0: [], Field1: 0}];

    switch (value_1258291286) {
    case 48:
      result_1258291287 = nimCopy(result_1258291287, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 1}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 1}], NTI1258291284);
      break;
    case 49:
      result_1258291287 = nimCopy(result_1258291287, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 1}], NTI1258291284);
      break;
    case 50:
      result_1258291287 = nimCopy(result_1258291287, [{Field0: [67], Field1: 1}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 1}], NTI1258291284);
      break;
    case 51:
      result_1258291287 = nimCopy(result_1258291287, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 1}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 0}], NTI1258291284);
      break;
    case 52:
      result_1258291287 = nimCopy(result_1258291287, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 0}], NTI1258291284);
      break;
    case 53:
      result_1258291287 = nimCopy(result_1258291287, [{Field0: [67], Field1: 1}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 0}], NTI1258291284);
      break;
    case 54:
      result_1258291287 = nimCopy(result_1258291287, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 1}, {Field0: [69], Field1: 1}, {Field0: [101], Field1: 0}], NTI1258291284);
      break;
    case 55:
      result_1258291287 = nimCopy(result_1258291287, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 1}, {Field0: [101], Field1: 0}], NTI1258291284);
      break;
    case 56:
      result_1258291287 = nimCopy(result_1258291287, [{Field0: [67], Field1: 1}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 1}, {Field0: [101], Field1: 0}], NTI1258291284);
      break;
    case 57:
      result_1258291287 = nimCopy(result_1258291287, [{Field0: [67], Field1: 2}, {Field0: [99], Field1: 2}, {Field0: [69], Field1: 2}, {Field0: [101], Field1: 2}], NTI1258291284);
      break;
    }

  return result_1258291287;

}

function parseAntigen_1258291337(spec_1258291338) {
  var result_1258291339 = [[]];

    var agIndex_1258291344 = 0;
    Label1: {
      var i_1258291345 = 0;
      var a_1258291346 = 0;
      var i_553648811 = 0;
      var L_553648812 = (spec_1258291338.aaaaaaaaaaaaaaaa).length;
      Label2: {
          Label3: while (true) {
          if (!(i_553648811 < L_553648812)) break Label3;
            i_1258291345 = i_553648811;
            a_1258291346 = spec_1258291338.aaaaaaaaaaaaaaaa[i_553648811];
            Label4: {
              if ((i_1258291345 == 0)) {
              add_1258291347(result_1258291339, 0, parseRh_1258291285(a_1258291346));
              break Label4;
              }
              
              result_1258291339[0].push({Field0: nimCopy(null, antigens_1258291282[agIndex_1258291344], NTI33554449), Field1: phenoOne_1258291283[(a_1258291346) - (48)]});;
              agIndex_1258291344 += 1;
              result_1258291339[0].push({Field0: nimCopy(null, antigens_1258291282[agIndex_1258291344], NTI33554449), Field1: phenoTwo_1258291284[(a_1258291346) - (48)]});;
              agIndex_1258291344 += 1;
            };
            i_553648811 += 1;
          }
      };
    };

  return result_1258291339[0];

}

function parseNegativeAntigen_1258291422(spec_1258291423) {
  var result_1258291424 = [];

++excHandler;
    try {
    var numeric_1258291425 = nsuParseInt(spec_1258291423.ii);
    if ((99 < numeric_1258291425)) {
    raiseException({message: ([111,107,195,164,110,100,32,107,111,100,32,102,195,182,114,32,97,110,116,105,103,101,110,58,32] || []).concat(spec_1258291423.ii || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_1258291424 = nimCopy(null, antigenNegativ_1258291421[numeric_1258291425], NTI33554449);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    raiseException({message: ([111,107,195,164,110,100,32,107,111,100,32,102,195,182,114,32,97,110,116,105,103,101,110,58,32] || []).concat(spec_1258291423.ii || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    lastJSError = prevJSError;
    } finally {
    }

  return result_1258291424;

}

function toHtml_1258291428(spec_1258291429) {
  var result_1258291430 = [];

    var pheno_1258291431 = parseAntigen_1258291337(spec_1258291429);
    var phenotypeRows_1258291432 = [];
    Label1: {
      var pair_1258291452 = {Field0: [], Field1: 0};
      var i_553648806 = 0;
      var L_553648807 = (pheno_1258291431).length;
      Label2: {
          Label3: while (true) {
          if (!(i_553648806 < L_553648807)) break Label3;
            pair_1258291452 = pheno_1258291431[i_553648806];
            phenotypeRows_1258291432.push.apply(phenotypeRows_1258291432, ([60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62] || []).concat(pair_1258291452.Field0 || [],[60,47,116,100,62,60,116,100,62] || [],reprEnum(pair_1258291452.Field1, NTI1258291260) || [],[60,47,116,100,62,60,47,116,114,62] || []));;
            i_553648806 += 1;
          }
      };
    };
    var body_1258291456 = ([60,100,105,118,62,60,116,114,62,60,116,100,62,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,60,47,116,100,62,60,116,100,62] || []).concat(spec_1258291429.aaaaaaaaaaaaaaaa || [],[60,47,116,100,62,60,47,116,114,62] || [],phenotypeRows_1258291432 || [],[60,116,114,62,60,116,100,62,105,105,60,47,116,100,62,60,116,100,62] || [],spec_1258291429.ii || [],makeNimstrLit("</td></tr><tr><td style=\"padding-left: 2em;\">Negativ f\xC3\xB6r</td><td>") || [],parseNegativeAntigen_1258291422(spec_1258291429) || [],[60,47,116,100,62,60,47,116,114,62,60,47,100,105,118,62] || []);
    result_1258291430 = nimCopy(null, toHtmlCommon_1073741921(body_1258291456, spec_1258291429.dataIdentifier), NTI33554449);

  return result_1258291430;

}

function verifySpecialTestingAntigensGeneral_1258291208(code_1258291209) {
    if (!(((code_1258291209).length == 20))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,50,48,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1258291209).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseSpecialTestingAntigensGeneral_1258291211(code_1258291212) {
  var result_1258291213 = ({dataIdentifier: [], aaaaaaaaaaaaaaaa: [], ii: []});

    verifySpecialTestingAntigensGeneral_1258291208(code_1258291212);
    result_1258291213.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1258291212, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1258291213.aaaaaaaaaaaaaaaa = nimCopy(null, HEX5BHEX5D_687867129(code_1258291212, HEX2EHEX2E_989855792(2, 17)), NTI33554449);
    result_1258291213.ii = nimCopy(null, HEX5BHEX5D_687867129(code_1258291212, HEX2EHEX2E_989855792(18, 19)), NTI33554449);

  return result_1258291213;

}

function add_1275068563(x_1275068565, x_1275068565_Idx, y_1275068566) {
    var Temporary1;

    var xl_1275068571 = (x_1275068565[x_1275068565_Idx]).length;
    if (x_1275068565[x_1275068565_Idx].length < (Temporary1 = (xl_1275068571 + (y_1275068566).length), Temporary1)) { for (var i = x_1275068565[x_1275068565_Idx].length ; i < Temporary1 ; ++i) x_1275068565[x_1275068565_Idx].push({Field0: [], Field1: 0}); }
               else { x_1275068565[x_1275068565_Idx].length = Temporary1; };
    Label2: {
      var i_1275068587 = 0;
      var colontmp__553648829 = 0;
      colontmp__553648829 = (y_1275068566).length - 1;
      var res_553648830 = 0;
      Label3: {
          Label4: while (true) {
          if (!(res_553648830 <= colontmp__553648829)) break Label4;
            i_1275068587 = res_553648830;
            x_1275068565[x_1275068565_Idx][(xl_1275068571 + i_1275068587)] = nimCopy(x_1275068565[x_1275068565_Idx][(xl_1275068571 + i_1275068587)], y_1275068566[i_1275068587], NTI1275068477);
            res_553648830 += 1;
          }
      };
    };

  
}

function parseRh_1275068501(value_1275068502) {
  var result_1275068503 = [{Field0: [], Field1: 0}, {Field0: [], Field1: 0}, {Field0: [], Field1: 0}, {Field0: [], Field1: 0}];

    switch (value_1275068502) {
    case 48:
      result_1275068503 = nimCopy(result_1275068503, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 1}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 1}], NTI1275068500);
      break;
    case 49:
      result_1275068503 = nimCopy(result_1275068503, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 1}], NTI1275068500);
      break;
    case 50:
      result_1275068503 = nimCopy(result_1275068503, [{Field0: [67], Field1: 1}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 1}], NTI1275068500);
      break;
    case 51:
      result_1275068503 = nimCopy(result_1275068503, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 1}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 0}], NTI1275068500);
      break;
    case 52:
      result_1275068503 = nimCopy(result_1275068503, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 0}], NTI1275068500);
      break;
    case 53:
      result_1275068503 = nimCopy(result_1275068503, [{Field0: [67], Field1: 1}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 0}, {Field0: [101], Field1: 0}], NTI1275068500);
      break;
    case 54:
      result_1275068503 = nimCopy(result_1275068503, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 1}, {Field0: [69], Field1: 1}, {Field0: [101], Field1: 0}], NTI1275068500);
      break;
    case 55:
      result_1275068503 = nimCopy(result_1275068503, [{Field0: [67], Field1: 0}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 1}, {Field0: [101], Field1: 0}], NTI1275068500);
      break;
    case 56:
      result_1275068503 = nimCopy(result_1275068503, [{Field0: [67], Field1: 1}, {Field0: [99], Field1: 0}, {Field0: [69], Field1: 1}, {Field0: [101], Field1: 0}], NTI1275068500);
      break;
    case 57:
      result_1275068503 = nimCopy(result_1275068503, [{Field0: [67], Field1: 2}, {Field0: [99], Field1: 2}, {Field0: [69], Field1: 2}, {Field0: [101], Field1: 2}], NTI1275068500);
      break;
    }

  return result_1275068503;

}

function parseAntigen_1275068553(spec_1275068554) {
  var result_1275068555 = [[]];

    var agIndex_1275068560 = 0;
    Label1: {
      var i_1275068561 = 0;
      var a_1275068562 = 0;
      var i_553648825 = 0;
      var L_553648826 = (spec_1275068554.aaaaaaaaaaaaaaaa).length;
      Label2: {
          Label3: while (true) {
          if (!(i_553648825 < L_553648826)) break Label3;
            i_1275068561 = i_553648825;
            a_1275068562 = spec_1275068554.aaaaaaaaaaaaaaaa[i_553648825];
            Label4: {
              if ((i_1275068561 == 0)) {
              add_1275068563(result_1275068555, 0, parseRh_1275068501(a_1275068562));
              break Label4;
              }
              
              result_1275068555[0].push({Field0: nimCopy(null, antigens_1275068498[agIndex_1275068560], NTI33554449), Field1: phenoOne_1275068499[(a_1275068562) - (48)]});;
              agIndex_1275068560 += 1;
              result_1275068555[0].push({Field0: nimCopy(null, antigens_1275068498[agIndex_1275068560], NTI33554449), Field1: phenoTwo_1275068500[(a_1275068562) - (48)]});;
              agIndex_1275068560 += 1;
            };
            i_553648825 += 1;
          }
      };
    };

  return result_1275068555[0];

}

function parseNegativeAntigen_1275068622(spec_1275068623) {
  var result_1275068624 = [];

++excHandler;
    try {
    var numeric_1275068625 = nsuParseInt(spec_1275068623.ii);
    if ((99 < numeric_1275068625)) {
    raiseException({message: ([111,107,195,164,110,100,32,107,111,100,32,102,195,182,114,32,97,110,116,105,103,101,110,58,32] || []).concat(spec_1275068623.ii || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    
    result_1275068624 = nimCopy(null, antigenNegativ_1275068621[numeric_1275068625], NTI33554449);
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    raiseException({message: ([111,107,195,164,110,100,32,107,111,100,32,102,195,182,114,32,97,110,116,105,103,101,110,58,32] || []).concat(spec_1275068623.ii || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    lastJSError = prevJSError;
    } finally {
    }

  return result_1275068624;

}

function toHtml_1275068628(spec_1275068629) {
  var result_1275068630 = [];

    var pheno_1275068631 = parseAntigen_1275068553(spec_1275068629);
    var phenotypeRows_1275068632 = [];
    Label1: {
      var pair_1275068652 = {Field0: [], Field1: 0};
      var i_553648820 = 0;
      var L_553648821 = (pheno_1275068631).length;
      Label2: {
          Label3: while (true) {
          if (!(i_553648820 < L_553648821)) break Label3;
            pair_1275068652 = pheno_1275068631[i_553648820];
            phenotypeRows_1275068632.push.apply(phenotypeRows_1275068632, ([60,116,114,62,60,116,100,32,115,116,121,108,101,61,34,112,97,100,100,105,110,103,45,108,101,102,116,58,32,50,101,109,59,34,62] || []).concat(pair_1275068652.Field0 || [],[60,47,116,100,62,60,116,100,62] || [],reprEnum(pair_1275068652.Field1, NTI1275068476) || [],[60,47,116,100,62,60,47,116,114,62] || []));;
            i_553648820 += 1;
          }
      };
    };
    var body_1275068656 = ([60,100,105,118,62,60,116,114,62,60,116,100,62,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,60,47,116,100,62,60,116,100,62] || []).concat(spec_1275068629.aaaaaaaaaaaaaaaa || [],[60,47,116,100,62,60,47,116,114,62] || [],phenotypeRows_1275068632 || [],[60,116,114,62,60,116,100,62,105,105,60,47,116,100,62,60,116,100,62] || [],spec_1275068629.ii || [],makeNimstrLit("</td></tr><tr><td style=\"padding-left: 2em;\">Negativ f\xC3\xB6r</td><td>") || [],parseNegativeAntigen_1275068622(spec_1275068629) || [],[60,47,116,100,62,60,47,116,114,62,60,47,100,105,118,62] || []);
    result_1275068630 = nimCopy(null, toHtmlCommon_1073741921(body_1275068656, spec_1275068629.dataIdentifier), NTI33554449);

  return result_1275068630;

}

function verifySpecialTestingAntigensFinnish_1275068424(code_1275068425) {
    if (!(((code_1275068425).length == 20))) {
    raiseException({message: ([70,101,108,32,108,195,164,110,103,100,58,32,108,195,164,110,103,100,32,50,48,32,102,195,182,114,118,195,164,110,116,97,100,101,115,32,109,101,110,32] || []).concat(HEX24_369098760((code_1275068425).length) || [],[32,116,101,99,107,101,110,32,102,97,110,110,115,32,105,32,107,111,100,101,110] || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    

  
}

function parseSpecialTestingAntigensFinnish_1275068427(code_1275068428) {
  var result_1275068429 = ({dataIdentifier: [], aaaaaaaaaaaaaaaa: [], ii: []});

    verifySpecialTestingAntigensFinnish_1275068424(code_1275068428);
    result_1275068429.dataIdentifier = nimCopy(null, HEX5BHEX5D_687867129(code_1275068428, HEX2EHEX2E_989855792(0, 1)), NTI33554449);
    result_1275068429.aaaaaaaaaaaaaaaa = nimCopy(null, HEX5BHEX5D_687867129(code_1275068428, HEX2EHEX2E_989855792(2, 17)), NTI33554449);
    result_1275068429.ii = nimCopy(null, HEX5BHEX5D_687867129(code_1275068428, HEX2EHEX2E_989855792(18, 19)), NTI33554449);

  return result_1275068429;

}

function parseDataStructure_553648220(dataStructureType_553648221, code_553648222) {
  var result_553648223 = [];

    switch (dataStructureType_553648221) {
    case 0:
      result_553648223 = nimCopy(null, toHtml_1056964758(parseDonationIdentificationNumber_1056964621(code_553648222)), NTI33554449);
      break;
    case 1:
      result_553648223 = nimCopy(null, toHtml_1090519367(parseBloodGroupsABORhD_1090519052(code_553648222)), NTI33554449);
      break;
    case 2:
      result_553648223 = nimCopy(null, toHtml_1107296536(parseProductCode_1107296267(code_553648222)), NTI33554449);
      break;
    case 3:
      result_553648223 = nimCopy(null, toHtml_1124073558(parseExpirationDate_1124073483(code_553648222)), NTI33554449);
      break;
    case 4:
      result_553648223 = nimCopy(null, toHtml_1140850812(parseExpirationDateAndTime_1140850701(code_553648222)), NTI33554449);
      break;
    case 5:
      result_553648223 = nimCopy(null, toHtml_1157627990(parseCollectionDate_1157627915(code_553648222)), NTI33554449);
      break;
    case 6:
      result_553648223 = nimCopy(null, toHtml_1174405244(parseCollectionDateAndTime_1174405133(code_553648222)), NTI33554449);
      break;
    case 7:
      result_553648223 = nimCopy(null, toHtml_1191182422(parseProductionDate_1191182347(code_553648222)), NTI33554449);
      break;
    case 8:
      result_553648223 = nimCopy(null, toHtml_1207959676(parseProductionDateAndTime_1207959565(code_553648222)), NTI33554449);
      break;
    case 9:
      result_553648223 = nimCopy(null, toHtml_1224736816(parseSpecialTestingGeneral_1224736777(code_553648222)), NTI33554449);
      break;
    case 10:
      result_553648223 = nimCopy(null, toHtml_1241514228(parseSpecialTestingAntigensRetired_1241513995(code_553648222)), NTI33554449);
      break;
    case 11:
      result_553648223 = nimCopy(null, toHtml_1258291428(parseSpecialTestingAntigensGeneral_1258291211(code_553648222)), NTI33554449);
      break;
    case 12:
      result_553648223 = nimCopy(null, toHtml_1275068628(parseSpecialTestingAntigensFinnish_1275068427(code_553648222)), NTI33554449);
      break;
    default: 
      result_553648223 = nimCopy(null, ([84,111,108,107,110,105,110,103,32,195,164,114,32,105,110,116,101,32,105,109,112,108,101,109,101,110,116,101,114,97,100,32,102,195,182,114,32,100,97,116,97,116,121,112,101,110,58,32] || []).concat(reprEnum(dataStructureType_553648221, NTI553648131) || []), NTI33554449);
      break;
    }

  return result_553648223;

}

function nsuFindChar(s_687867472, sub_687867473, start_687867474, last_687867475) {
    var Temporary1;

  var result_687867476 = 0;

  BeforeRet: {
    result_687867476 = (-1);
    if ((last_687867475 < 0)) {
    Temporary1 = (s_687867472).length - 1;
    }
    else {
    Temporary1 = last_687867475;
    }
    
    var last_687867477 = Temporary1;
    Label2: {
      var iHEX60gensym167_687867491 = 0;
      var colontmp__553648839 = 0;
      colontmp__553648839 = start_687867474;
      var res_553648840 = colontmp__553648839;
      Label3: {
          Label4: while (true) {
          if (!(res_553648840 <= last_687867477)) break Label4;
            iHEX60gensym167_687867491 = res_553648840;
            if ((s_687867472[iHEX60gensym167_687867491] == sub_687867473)) {
            result_687867476 = iHEX60gensym167_687867491;
            break BeforeRet;
            }
            
            res_553648840 += 1;
          }
      };
    };
  };

  return result_687867476;

}

function substr_33558079(s_33558080, first_33558081, last_33558082) {
  var result_33558083 = [];

    var first_33558084 = nimMax(first_33558081, 0);
    var L_33558085 = nimMax(((nimMin(last_33558082, (s_33558080).length - 1) - first_33558084) + 1), 0);
    result_33558083 = nimCopy(null, mnewString(L_33558085), NTI33554449);
    Label1: {
      var i_33558090 = 0;
      var colontmp__1073741948 = 0;
      colontmp__1073741948 = (L_33558085 - 1);
      var res_1073741949 = 0;
      Label2: {
          Label3: while (true) {
          if (!(res_1073741949 <= colontmp__1073741948)) break Label3;
            i_33558090 = res_1073741949;
            result_33558083[i_33558090] = s_33558080[(i_33558090 + first_33558084)];
            res_1073741949 += 1;
          }
      };
    };

  return result_33558083;

}

function substr_33558091(s_33558092, first_33558093) {
  var result_33558094 = [];

    result_33558094 = nimCopy(null, substr_33558079(s_33558092, first_33558093, (s_33558092).length - 1), NTI33554449);

  return result_33558094;

}

function fill_687867410(a_687867412, value_687867413) {
    var xHEX60gensym163_687867419 = 0;
    Label1: {
        Label2: while (true) {
        if (!(xHEX60gensym163_687867419 <= (a_687867412).length - 1)) break Label2;
          a_687867412[xHEX60gensym163_687867419] = value_687867413;
          xHEX60gensym163_687867419 += 1;
        }
    };

  
}

function nsuInitSkipTable(a_687867407, sub_687867408) {
    var m_687867409 = (sub_687867408).length;
    fill_687867410(a_687867407, m_687867409);
    Label1: {
      var i_687867429 = 0;
      var colontmp__553648843 = 0;
      colontmp__553648843 = (m_687867409 - 1);
      var i_553648844 = 0;
      Label2: {
          Label3: while (true) {
          if (!(i_553648844 < colontmp__553648843)) break Label3;
            i_687867429 = i_553648844;
            a_687867407[sub_687867408[i_687867429]] = ((m_687867409 - 1) - i_687867429);
            i_553648844 += 1;
          }
      };
    };

  
}

function nsuInitNewSkipTable(sub_687867447) {
  var result_687867448 = [new Int32Array(256)];

    nsuInitSkipTable(result_687867448[0], sub_687867447);

  return result_687867448[0];

}

function nsuFindStrA(a_687867450, s_687867451, sub_687867452, start_687867453, last_687867454) {
    var Temporary1;

  var result_687867455 = 0;

  BeforeRet: {
    if ((last_687867454 < 0)) {
    Temporary1 = (s_687867451).length - 1;
    }
    else {
    Temporary1 = last_687867454;
    }
    
    var last_687867456 = Temporary1;
    var subLast_687867457 = ((sub_687867452).length - 1);
    if ((subLast_687867457 == (-1))) {
    result_687867455 = start_687867453;
    break BeforeRet;
    }
    
    result_687867455 = (-1);
    var skip_687867458 = start_687867453;
    Label2: {
        Label3: while (true) {
        if (!(subLast_687867457 <= (last_687867456 - skip_687867458))) break Label3;
          var i_687867459 = subLast_687867457;
          Label4: {
              Label5: while (true) {
              if (!(s_687867451[(skip_687867458 + i_687867459)] == sub_687867452[i_687867459])) break Label5;
                if ((i_687867459 == 0)) {
                result_687867455 = skip_687867458;
                break BeforeRet;
                }
                
                i_687867459 -= 1;
              }
          };
          skip_687867458 += a_687867450[s_687867451[(skip_687867458 + subLast_687867457)]];
        }
    };
  };

  return result_687867455;

}

function nsuReplaceStr(s_687867660, sub_687867661, by_687867662) {
  var result_687867663 = [];

    result_687867663 = nimCopy(null, [], NTI33554449);
    var subLen_687867664 = (sub_687867661).length;
    if ((subLen_687867664 == 0)) {
    result_687867663 = nimCopy(null, s_687867660, NTI33554449);
    }
    else {
    if ((subLen_687867664 == 1)) {
    var c_687867665 = sub_687867661[0];
    var last_687867666 = (s_687867660).length - 1;
    var i_687867667 = 0;
    Label1: {
        Label2: while (true) {
        if (!true) break Label2;
          var j_687867668 = nsuFindChar(s_687867660, c_687867665, i_687867667, last_687867666);
          if ((j_687867668 < 0)) {
          break Label1;
          }
          
          result_687867663.push.apply(result_687867663, substr_33558079(s_687867660, i_687867667, (j_687867668 - 1)));;
          result_687867663.push.apply(result_687867663, by_687867662);;
          i_687867667 = (j_687867668 + subLen_687867664);
        }
    };
    result_687867663.push.apply(result_687867663, substr_33558091(s_687867660, i_687867667));;
    }
    else {
      var a_687867669 = nsuInitNewSkipTable(sub_687867661);
      var last_687867670 = (s_687867660).length - 1;
      var i_687867671 = 0;
      Label3: {
          Label4: while (true) {
          if (!true) break Label4;
            var j_687867672 = nsuFindStrA(a_687867669, s_687867660, sub_687867661, i_687867671, last_687867670);
            if ((j_687867672 < 0)) {
            break Label3;
            }
            
            result_687867663.push.apply(result_687867663, substr_33558079(s_687867660, i_687867671, (j_687867672 - 1)));;
            result_687867663.push.apply(result_687867663, by_687867662);;
            i_687867671 = (j_687867672 + subLen_687867664);
          }
      };
      result_687867663.push.apply(result_687867663, substr_33558091(s_687867660, i_687867671));;
    }
    }

  return result_687867663;

}

function getCurrentExceptionMsg_33556463() {
  var result_33556464 = [];

  BeforeRet: {
    if (!((lastJSError == null))) {
    if (isNimException_33556443()) {
    result_33556464 = nimCopy(null, lastJSError.message, NTI33554449);
    break BeforeRet;
    }
    else {
      var msg_33556469 = null;
            if (lastJSError.message !== undefined) {
        msg_33556469 = lastJSError.message;
      }
      
      if (!((msg_33556469 == null))) {
      result_33556464 = nimCopy(null, cstrToNimstr(msg_33556469), NTI33554449);
      break BeforeRet;
      }
      
    }
    
    }
    
    result_33556464 = nimCopy(null, [], NTI33554449);
    break BeforeRet;
  };

  return result_33556464;

}

function interpretCode() {
    document.getElementById("isbt128out").innerHTML = "";
++excHandler;
    try {
    var code_553648492 = cstrToNimstr(document.getElementById("code").value);
    var dataStructure_553648493 = classifyDataStructure_553648179(code_553648492);
    var html_553648494 = parseDataStructure_553648220(dataStructure_553648493, code_553648492);
    var cleanCode_553648495 = nsuReplaceStr(code_553648492, [60], [38,108,116,59]);
    var name_553648496 = nimCopy(null, dataStructureNames_553648178[dataStructure_553648493], NTI33554449);
    var contents_553648497 = ([60,104,50,62] || []).concat(name_553648496 || [],[60,47,104,50,62,60,112,62] || [],cleanCode_553648495 || [],[60,47,112,62] || [],html_553648494 || []);
    var toHist_553648498 = toJSStr(([60,100,101,116,97,105,108,115,62,60,115,117,109,109,97,114,121,62] || []).concat(cleanCode_553648495 || [],[32,38,110,100,97,115,104,59,32] || [],name_553648496 || [],[60,47,115,117,109,109,97,114,121,62] || [],html_553648494 || [],[60,47,100,101,116,97,105,108,115,62] || []));
    document.getElementById("isbt128out").innerHTML = toJSStr(contents_553648497);
    document.getElementById("isbt128history").insertAdjacentHTML("afterbegin", toHist_553648498);
    document.getElementById("code").value = "";
    document.getElementById("code").focus();
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
    var s_553648499 = ([70,101,108,32,118,105,100,32,116,111,108,107,110,105,110,103,58,32] || []).concat(getCurrentExceptionMsg_33556463() || []);
    document.getElementById("isbt128out").innerHTML = toJSStr(s_553648499);
    lastJSError = prevJSError;
    } finally {
    }

  
}

function catch_553648649(future_553648651, onReject_553648652) {
  var result_553648653 = null;

    result_553648653 = future_553648651.catch(onReject_553648652)

  return result_553648653;

}

function then_553648592(future_553648595, onSuccess_553648596, onReject_553648597) {
  var result_553648598 = null;

  BeforeRet: {
    var ret_553648628 = null;
    ret_553648628 = future_553648595.then(onSuccess_553648596, onReject_553648597)
    result_553648598 = ret_553648628;
    break BeforeRet;
  };

  return result_553648598;

}
async function readBarcode() {
    
function HEX3Aanonymous_553648567(dbarr_553648568) {
      var result_553648570 = null;

        if ((0 < (dbarr_553648568).length)) {
        var first_553648575 = dbarr_553648568[0];
        document.getElementById("text").value = first_553648575.rawValue;
        interpretCode();
        }
        

      return result_553648570;

    }
    
function HEX3Aanonymous_553648646(r_553648647) {
        var msg_553648648 = r_553648647.name;
        if (null != ": ") { if (null == msg_553648648) msg_553648648 = ": "; else msg_553648648 += ": "; };
        if (null != r_553648647.message) { if (null == msg_553648648) msg_553648648 = r_553648647.message; else msg_553648648 += r_553648647.message; };
        console.error(msg_553648648);

      
    }

  var result_553648557 = null;

  BeforeRet: {
    var bd_553648563 = new BarcodeDetector({formats: ["code_128", "data_matrix"]});
    var element_553648564 = document.getElementById("fileinput");
    var file_553648565 = element_553648564.files[0];
    var _ = catch_553648649(then_553648592(bd_553648563.detect(file_553648565), HEX3Aanonymous_553648567, null), HEX3Aanonymous_553648646);
    result_553648557 = undefined;
    break BeforeRet;
  };

  return result_553648557;

}
var Temporary1;
++excHandler;
try {
var _ = new BarcodeDetector({formats: ["code_128", "data_matrix"]});
Temporary1 = true;
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
Temporary1 = false;
lastJSError = prevJSError;
} finally {
}
var barcodeSupported_553648490 = Temporary1;
if (!(barcodeSupported_553648490)) {
console.log("Barcode Detection API not supported");
}
else {
  document.getElementById("detectionFields").style.display = "block";
  document.getElementById("detectionInformation").style.display = "none";
}

