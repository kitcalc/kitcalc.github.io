/* Generated by the Nim Compiler v1.6.10 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI486539270 = {size: 0, kind: 16, base: null, node: null, finalizer: null};
var NTI872415304 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI872415311 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI486539276 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI486539267 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI486539268 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555121 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI687865917 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI486539280 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI486539269 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555114 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555125 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI33555125 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555125.node = NNI33555125;
var NNI33555114 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555114.node = NNI33555114;
NTI33555114.base = NTI33555112;
NTI33555125.base = NTI33555114;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
NTI486539269.base = NTI486539280;
var NNI687865917 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554456, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI687865917.node = NNI687865917;
var NNI33555121 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555121.node = NNI33555121;
NTI33555121.base = NTI33555120;
var NNI486539267 = {kind: 2, offset: 0, typ: null, name: null, len: 3, sons: {"0": {kind: 1, offset: 0, typ: NTI486539267, name: "stateA", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI486539267, name: "stateB", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI486539267, name: "stateC", len: 0, sons: null}}};
NTI486539267.node = NNI486539267;
NTI486539276.base = NTI486539269;
var NNI486539268 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "s", len: 0, typ: NTI33554439, name: "s", sons: null}, 
{kind: 1, offset: "state", len: 0, typ: NTI486539267, name: "state", sons: null}, 
{kind: 1, offset: "bar", len: 0, typ: NTI486539276, name: "bar", sons: null}, 
{kind: 1, offset: "i", len: 0, typ: NTI33554456, name: "i", sons: null}]};
NTI486539268.node = NNI486539268;
var NNI872415311 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI872415304, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554456, name: "b", sons: null}]};
NTI872415311.node = NNI872415311;
NTI486539270.base = NTI33554456;

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}
var ConstSet2 = setConstr([0, 127]);

function nimCharToStr(x_33556517) {
  var result_33556518 = [];

    result_33556518 = nimCopy(null, mnewString(1), NTI33554439);
    result_33556518[0] = x_33556517;

  return result_33556518;

}
var ConstSet3 = setConstr([48, 57]);
    var jumps_486539568 = [[100, 100, 100], [101, 100, 99], [101, 100, 100]];
var ConstSet4 = setConstr([32, 95], [0, 31]);
var ConstSet5 = setConstr([32, 95], [96, 127]);
var ConstSet6 = setConstr(0, 1);

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet7 = setConstr([32, 95], [96, 127]);
var ConstSet8 = setConstr([32, 95], [0, 31]);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr([48, 57]);
var ConstSet11 = setConstr([48, 57]);
var ConstSet12 = setConstr([48, 57]);
var ConstSet13 = setConstr([32, 95], [96, 127]);

function mulInt(a_33556948, b_33556949) {
        var result = a_33556948 * b_33556949;
    checkOverflowInt(result);
    return result;
  

  
}

function modInt(a_33556956, b_33556957) {
        if (b_33556957 == 0) raiseDivByZero();
    if (b_33556957 == -1 && a_33556956 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556956 % b_33556957);
  

  
}
var ConstSet14 = setConstr(60, 62, 94);
var ConstSet15 = setConstr(60, 62, 94);
var ConstSet16 = setConstr(45, 43, 32);
var ConstSet17 = setConstr([48, 57]);
var ConstSet18 = setConstr([48, 57]);
var ConstSet19 = setConstr([48, 57]);

function divInt(a_33556952, b_33556953) {
        if (b_33556953 == 0) raiseDivByZero();
    if (b_33556953 == -1 && a_33556952 == 2147483647) raiseOverflow();
    return Math.trunc(a_33556952 / b_33556953);
  

  
}
var ConstSet20 = setConstr([65, 90], [97, 122]);

function addChar(x_33557255, c_33557256) {
    x_33557255.push(c_33557256);

  
}
      var barWidths_486539318 = [new Int32Array([2, 1, 2, 2, 2, 2]), new Int32Array([2, 2, 2, 1, 2, 2]), new Int32Array([2, 2, 2, 2, 2, 1]), new Int32Array([1, 2, 1, 2, 2, 3]), new Int32Array([1, 2, 1, 3, 2, 2]), new Int32Array([1, 3, 1, 2, 2, 2]), new Int32Array([1, 2, 2, 2, 1, 3]), new Int32Array([1, 2, 2, 3, 1, 2]), new Int32Array([1, 3, 2, 2, 1, 2]), new Int32Array([2, 2, 1, 2, 1, 3]), new Int32Array([2, 2, 1, 3, 1, 2]), new Int32Array([2, 3, 1, 2, 1, 2]), new Int32Array([1, 1, 2, 2, 3, 2]), new Int32Array([1, 2, 2, 1, 3, 2]), new Int32Array([1, 2, 2, 2, 3, 1]), new Int32Array([1, 1, 3, 2, 2, 2]), new Int32Array([1, 2, 3, 1, 2, 2]), new Int32Array([1, 2, 3, 2, 2, 1]), new Int32Array([2, 2, 3, 2, 1, 1]), new Int32Array([2, 2, 1, 1, 3, 2]), new Int32Array([2, 2, 1, 2, 3, 1]), new Int32Array([2, 1, 3, 2, 1, 2]), new Int32Array([2, 2, 3, 1, 1, 2]), new Int32Array([3, 1, 2, 1, 3, 1]), new Int32Array([3, 1, 1, 2, 2, 2]), new Int32Array([3, 2, 1, 1, 2, 2]), new Int32Array([3, 2, 1, 2, 2, 1]), new Int32Array([3, 1, 2, 2, 1, 2]), new Int32Array([3, 2, 2, 1, 1, 2]), new Int32Array([3, 2, 2, 2, 1, 1]), new Int32Array([2, 1, 2, 1, 2, 3]), new Int32Array([2, 1, 2, 3, 2, 1]), new Int32Array([2, 3, 2, 1, 2, 1]), new Int32Array([1, 1, 1, 3, 2, 3]), new Int32Array([1, 3, 1, 1, 2, 3]), new Int32Array([1, 3, 1, 3, 2, 1]), new Int32Array([1, 1, 2, 3, 1, 3]), new Int32Array([1, 3, 2, 1, 1, 3]), new Int32Array([1, 3, 2, 3, 1, 1]), new Int32Array([2, 1, 1, 3, 1, 3]), new Int32Array([2, 3, 1, 1, 1, 3]), new Int32Array([2, 3, 1, 3, 1, 1]), new Int32Array([1, 1, 2, 1, 3, 3]), new Int32Array([1, 1, 2, 3, 3, 1]), new Int32Array([1, 3, 2, 1, 3, 1]), new Int32Array([1, 1, 3, 1, 2, 3]), new Int32Array([1, 1, 3, 3, 2, 1]), new Int32Array([1, 3, 3, 1, 2, 1]), new Int32Array([3, 1, 3, 1, 2, 1]), new Int32Array([2, 1, 1, 3, 3, 1]), new Int32Array([2, 3, 1, 1, 3, 1]), new Int32Array([2, 1, 3, 1, 1, 3]), new Int32Array([2, 1, 3, 3, 1, 1]), new Int32Array([2, 1, 3, 1, 3, 1]), new Int32Array([3, 1, 1, 1, 2, 3]), new Int32Array([3, 1, 1, 3, 2, 1]), new Int32Array([3, 3, 1, 1, 2, 1]), new Int32Array([3, 1, 2, 1, 1, 3]), new Int32Array([3, 1, 2, 3, 1, 1]), new Int32Array([3, 3, 2, 1, 1, 1]), new Int32Array([3, 1, 4, 1, 1, 1]), new Int32Array([2, 2, 1, 4, 1, 1]), new Int32Array([4, 3, 1, 1, 1, 1]), new Int32Array([1, 1, 1, 2, 2, 4]), new Int32Array([1, 1, 1, 4, 2, 2]), new Int32Array([1, 2, 1, 1, 2, 4]), new Int32Array([1, 2, 1, 4, 2, 1]), new Int32Array([1, 4, 1, 1, 2, 2]), new Int32Array([1, 4, 1, 2, 2, 1]), new Int32Array([1, 1, 2, 2, 1, 4]), new Int32Array([1, 1, 2, 4, 1, 2]), new Int32Array([1, 2, 2, 1, 1, 4]), new Int32Array([1, 2, 2, 4, 1, 1]), new Int32Array([1, 4, 2, 1, 1, 2]), new Int32Array([1, 4, 2, 2, 1, 1]), new Int32Array([2, 4, 1, 2, 1, 1]), new Int32Array([2, 2, 1, 1, 1, 4]), new Int32Array([4, 1, 3, 1, 1, 1]), new Int32Array([2, 4, 1, 1, 1, 2]), new Int32Array([1, 3, 4, 1, 1, 1]), new Int32Array([1, 1, 1, 2, 4, 2]), new Int32Array([1, 2, 1, 1, 4, 2]), new Int32Array([1, 2, 1, 2, 4, 1]), new Int32Array([1, 1, 4, 2, 1, 2]), new Int32Array([1, 2, 4, 1, 1, 2]), new Int32Array([1, 2, 4, 2, 1, 1]), new Int32Array([4, 1, 1, 2, 1, 2]), new Int32Array([4, 2, 1, 1, 1, 2]), new Int32Array([4, 2, 1, 2, 1, 1]), new Int32Array([2, 1, 2, 1, 4, 1]), new Int32Array([2, 1, 4, 1, 2, 1]), new Int32Array([4, 1, 2, 1, 2, 1]), new Int32Array([1, 1, 1, 1, 4, 3]), new Int32Array([1, 1, 1, 3, 4, 1]), new Int32Array([1, 3, 1, 1, 4, 1]), new Int32Array([1, 1, 4, 1, 1, 3]), new Int32Array([1, 1, 4, 3, 1, 1]), new Int32Array([4, 1, 1, 1, 1, 3]), new Int32Array([4, 1, 1, 3, 1, 1]), new Int32Array([1, 1, 3, 1, 4, 1]), new Int32Array([1, 1, 4, 1, 3, 1]), new Int32Array([3, 1, 1, 1, 4, 1]), new Int32Array([4, 1, 1, 1, 3, 1]), new Int32Array([2, 1, 1, 4, 1, 2]), new Int32Array([2, 1, 1, 2, 1, 4]), new Int32Array([2, 1, 1, 2, 3, 2]), new Int32Array([2, 3, 3, 1, 1, 1])];

function cstrToNimstr(c_33556804) {
      var ln = c_33556804.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556804.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556804.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}


function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_486539671 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539671 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_486539671;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_486539671 = addInt(i_486539671, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_335544323(x_335544324) {
  var result_335544325 = [[]];

    addInt_251658457(result_335544325, 0, x_335544324);

  return result_335544325[0];

}

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_335544323(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_335544323(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_335544323(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function initCode128_486539377(s_486539378) {
  var result_486539379 = ({s: [], state: 0, bar: [], i: 0});

    Label1: do {
      var c_486539380 = 0;
      var i_486539664 = 0;
      var L_486539665 = (s_486539378).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539664 < L_486539665)) break Label3;
            c_486539380 = s_486539378[chckIndx(i_486539664, 0, (s_486539378).length - 1)];
            if (!((ConstSet2[c_486539380] != undefined))) {
            raiseException({message: (makeNimstrLit("char not in allowed range: \'") || []).concat(nimCharToStr(c_486539380) || [],makeNimstrLit("\' ") || [],HEX24_335544323(c_486539380) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
            }
            
            i_486539664 = addInt(i_486539664, 1);
            if (!(((s_486539378).length == L_486539665))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(258, 11) `len(a) == L` the length of the string changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_486539379.state = 1;
    result_486539379.s = nimCopy(null, s_486539378, NTI33554439);

  return result_486539379;

}

function isDone_486539453(code_486539454) {
  var result_486539455 = false;

    result_486539455 = !((code_486539454.i < (code_486539454.s).length));

  return result_486539455;

}

function isStart_486539450(code_486539451) {
  var result_486539452 = false;

    result_486539452 = (code_486539451.i == 0);

  return result_486539452;

}

function isTableCOptimal_486539608(code_486539609) {
          var Temporary3;
      var Temporary4;

  var result_486539610 = false;

    var streak_486539611 = 0;
    var i_486539612 = code_486539609.i;
    Label1: do {
        Label2: while (true) {
          if (!(i_486539612 < (code_486539609.s).length)) Temporary3 = false; else {            Temporary3 = (ConstSet3[code_486539609.s[chckIndx(i_486539612, 0, (code_486539609.s).length - 1)]] != undefined);          }        if (!Temporary3) break Label2;
          streak_486539611 = addInt(streak_486539611, 1);
          i_486539612 = addInt(i_486539612, 1);
        }
    } while (false);
    if (((streak_486539611 == 2) && ((code_486539609.s).length == 2))) {
    result_486539610 = true;
    }
    else {
      if (!(4 <= streak_486539611)) Temporary4 = false; else {        Temporary4 = (isStart_486539450(code_486539609) || (addInt(code_486539609.i, streak_486539611) == (code_486539609.s).length));      }    if (Temporary4) {
    result_486539610 = true;
    }
    else {
    if ((6 <= streak_486539611)) {
    result_486539610 = true;
    }
    }}

  return result_486539610;

}

function changeState_486539556(code_486539557, newState_486539558) {
    if (!(!((code_486539557.state == newState_486539558)))) {
    failedAssertImpl_218103864(makeNimstrLit("code128.nim(181, 10) `code.state != newState` "));
    }
    
    if (!(isStart_486539450(code_486539557))) {
    var Temporary1 = nimCopy(null, jumps_486539568[chckIndx(code_486539557.state, 0, (jumps_486539568).length - 1)][chckIndx(newState_486539558, 0, (jumps_486539568[chckIndx(code_486539557.state, 0, (jumps_486539568).length - 1)]).length - 1)], NTI486539269);
    code_486539557.bar.push(Temporary1);;
    }
    
    code_486539557.state = newState_486539558;

  
}

function toTableAValue_486539337(c_486539338) {
  var result_486539339 = 0;

    switch (c_486539338) {
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      result_486539339 = chckRange(subInt(c_486539338, 32), 0, 106);
      break;
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      result_486539339 = chckRange(addInt(c_486539338, 64), 0, 106);
      break;
    default: 
      raiseException({message: (makeNimstrLit("char out of Table A range: ") || []).concat(HEX24_335544323(c_486539338) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }

  return result_486539339;

}

function toTableBValue_486539359(c_486539360) {
  var result_486539361 = 0;

    switch (c_486539360) {
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
      result_486539361 = chckRange(subInt(c_486539360, 32), 0, 106);
      break;
    default: 
      raiseException({message: (makeNimstrLit("char out of Table B range: ") || []).concat(HEX24_335544323(c_486539360) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }

  return result_486539361;

}

function addABChar_486539456(code_486539457) {
    if (!((ConstSet6[code_486539457.state] != undefined))) {
    failedAssertImpl_218103864(makeNimstrLit("code128.nim(154, 10) `code.state in {stateA, stateB}` "));
    }
    
    if (isStart_486539450(code_486539457)) {
    if ((code_486539457.state == 0)) {
    code_486539457.bar.push(103);;
    }
    else {
    if ((code_486539457.state == 1)) {
    code_486539457.bar.push(104);;
    }
    }
    }
    
    if ((code_486539457.state == 0)) {
    code_486539457.bar.push(toTableAValue_486539337(code_486539457.s[chckIndx(code_486539457.i, 0, (code_486539457.s).length - 1)]));;
    }
    else {
    if ((code_486539457.state == 1)) {
    code_486539457.bar.push(toTableBValue_486539359(code_486539457.s[chckIndx(code_486539457.i, 0, (code_486539457.s).length - 1)]));;
    }
    }
    code_486539457.i = addInt(code_486539457.i, 1);

  
}

function HEX5BHEX5D_939524972(s_939524975, x_939524976) {
  var result_939524977 = [];

    var a_939524979 = x_939524976.a;
    var L_939524981 = addInt(subInt(x_939524976.b, a_939524979), 1);
    result_939524977 = nimCopy(null, mnewString(chckRange(L_939524981, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_939524986 = 0;
      var i_486539677 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539677 < L_939524981)) break Label3;
            i_939524986 = i_486539677;
            result_939524977[chckIndx(i_939524986, 0, (result_939524977).length - 1)] = s_939524975[chckIndx(addInt(i_939524986, a_939524979), 0, (s_939524975).length - 1)];
            i_486539677 = addInt(i_486539677, 1);
          }
      } while (false);
    } while (false);

  return result_939524977;

}

function HEX2EHEX2E_939524947(a_939524950, b_939524951) {
  var result_939524952 = ({a: 0, b: 0});

    result_939524952 = nimCopy(result_939524952, {a: a_939524950, b: b_939524951}, NTI687865917);

  return result_939524952;

}

function integerOutOfRangeError_654311672() {
    raiseException({message: makeNimstrLit("Parsed integer outside of valid range"), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");

  
}

function rawParseInt_654311692(s_654311693, b_654311694, b_654311694_Idx, start_654311695) {
      var Temporary1;
          var Temporary4;
      var Temporary7;

  var result_654311696 = 0;

    var sign_654311697 = -1;
    var i_654311698 = start_654311695;
    if ((i_654311698 < (s_654311693).length)) {
    if ((s_654311693[chckIndx(i_654311698, 0, (s_654311693).length - 1)] == 43)) {
    i_654311698 += 1;
    }
    else {
    if ((s_654311693[chckIndx(i_654311698, 0, (s_654311693).length - 1)] == 45)) {
    i_654311698 += 1;
    sign_654311697 = 1;
    }
    }
    }
    
      if (!(i_654311698 < (s_654311693).length)) Temporary1 = false; else {        Temporary1 = (ConstSet9[s_654311693[chckIndx(i_654311698, 0, (s_654311693).length - 1)]] != undefined);      }    if (Temporary1) {
    b_654311694[b_654311694_Idx] = 0;
    Label2: do {
        Label3: while (true) {
          if (!(i_654311698 < (s_654311693).length)) Temporary4 = false; else {            Temporary4 = (ConstSet10[s_654311693[chckIndx(i_654311698, 0, (s_654311693).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          var c_654311721 = (s_654311693[chckIndx(i_654311698, 0, (s_654311693).length - 1)] - 48);
          if ((Math.trunc((-9223372036854775808 + c_654311721) / 10) <= b_654311694[b_654311694_Idx])) {
          b_654311694[b_654311694_Idx] = ((b_654311694[b_654311694_Idx] * 10) - c_654311721);
          }
          else {
          integerOutOfRangeError_654311672();
          }
          
          i_654311698 += 1;
          Label5: do {
              Label6: while (true) {
              if (!((i_654311698 < (s_654311693).length) && (s_654311693[chckIndx(i_654311698, 0, (s_654311693).length - 1)] == 95))) break Label6;
                i_654311698 += 1;
              }
          } while (false);
        }
    } while (false);
      if (!(sign_654311697 == -1)) Temporary7 = false; else {        Temporary7 = (b_654311694[b_654311694_Idx] == -9223372036854775808);      }    if (Temporary7) {
    integerOutOfRangeError_654311672();
    }
    else {
      b_654311694[b_654311694_Idx] = (b_654311694[b_654311694_Idx] * sign_654311697);
      result_654311696 = (i_654311698 - start_654311695);
    }
    
    }
    

  return result_654311696;

}

function npuParseBiggestInt(s_654311739, number_654311740, number_654311740_Idx, start_654311741) {
  var result_654311742 = 0;

    var res_654311743 = [0];
    result_654311742 = rawParseInt_654311692(s_654311739, res_654311743, 0, start_654311741);
    if (!((result_654311742 == 0))) {
    number_654311740[number_654311740_Idx] = res_654311743[0];
    }
    

  return result_654311742;

}

function npuParseInt(s_654311745, number_654311746, number_654311746_Idx, start_654311747) {
      var Temporary1;

  var result_654311748 = 0;

    var res_654311749 = [0];
    result_654311748 = npuParseBiggestInt(s_654311745, res_654311749, 0, start_654311747);
      if ((res_654311749[0] < -2147483648)) Temporary1 = true; else {        Temporary1 = (2147483647 < res_654311749[0]);      }    if (Temporary1) {
    integerOutOfRangeError_654311672();
    }
    
    if (!((result_654311748 == 0))) {
    number_654311746[number_654311746_Idx] = chckRange(res_654311749[0], -2147483648, 2147483647);
    }
    

  return result_654311748;

}

function nsuParseInt(s_620757790) {
      var Temporary1;

  var result_620757791 = [0];

    result_620757791[0] = 0;
    var L_620757792 = npuParseInt(s_620757790, result_620757791, 0, 0);
      if (!((L_620757792 == (s_620757790).length))) Temporary1 = true; else {        Temporary1 = (L_620757792 == 0);      }    if (Temporary1) {
    raiseException({message: (makeNimstrLit("invalid integer: ") || []).concat(s_620757790 || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_620757791[0];

}

function toTableCValue_486539369(ab_486539370) {
  var result_486539371 = 0;

    if (!(((ab_486539370).length == 2))) {
    failedAssertImpl_218103864(makeNimstrLit("code128.nim(115, 10) `ab.len == 2` "));
    }
    
    result_486539371 = chckRange(nsuParseInt(ab_486539370), 0, 106);

  return result_486539371;

}

function addCChar_486539514(code_486539515) {
    if (!((code_486539515.state == 2))) {
    failedAssertImpl_218103864(makeNimstrLit("code128.nim(168, 10) `code.state == stateC` "));
    }
    
    if (isStart_486539450(code_486539515)) {
    code_486539515.bar.push(105);;
    }
    
    var pair_486539547 = HEX5BHEX5D_939524972(code_486539515.s, HEX2EHEX2E_939524947(code_486539515.i, addInt(code_486539515.i, 1)));
    code_486539515.bar.push(toTableCValue_486539369(pair_486539547));;
    code_486539515.i = addInt(code_486539515.i, 2);

  
}

function tableCConditions_486539597(code_486539598) {
      var Temporary1;

  var result_486539599 = false;

  BeforeRet: do {
    if ((subInt((code_486539598.s).length, 2) < code_486539598.i)) {
    result_486539599 = false;
    break BeforeRet;
    }
    else {
      if (!((ConstSet11[code_486539598.s[chckIndx(code_486539598.i, 0, (code_486539598.s).length - 1)]] != undefined))) Temporary1 = true; else {        Temporary1 = !((ConstSet12[code_486539598.s[chckIndx(addInt(code_486539598.i, 1), 0, (code_486539598.s).length - 1)]] != undefined));      }    if (Temporary1) {
    result_486539599 = false;
    break BeforeRet;
    }
    }
    result_486539599 = true;
  } while (false);

  return result_486539599;

}

function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI33555121, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function calcChecksum_486539402(code_486539403) {
  var result_486539404 = 0;

    var sum_486539405 = 0;
    Label1: do {
      var i_486539429 = 0;
      var c_486539430 = 0;
      var i_486539683 = 0;
      var L_486539684 = (code_486539403.bar).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539683 < L_486539684)) break Label3;
            i_486539429 = i_486539683;
            c_486539430 = code_486539403.bar[chckIndx(i_486539683, 0, (code_486539403.bar).length - 1)];
            if ((i_486539429 == 0)) {
            sum_486539405 = c_486539430;
            }
            else {
            sum_486539405 = addInt(sum_486539405, mulInt(i_486539429, c_486539430));
            }
            
            i_486539683 = addInt(i_486539683, 1);
            if (!(((code_486539403.bar).length == L_486539684))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(173, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_486539404 = chckRange(modInt(sum_486539405, 103), 0, 106);

  return result_486539404;

}

function addChecksum_486539444(code_486539445) {
    code_486539445.bar.push(calcChecksum_486539402(code_486539445));;

  
}

function addStop_486539591(code_486539592) {
    code_486539592.bar.push(106);;

  
}

function toCode128(s_486539626) {
                var Temporary3;
                var Temporary4;

  var result_486539627 = ({s: [], state: 0, bar: [], i: 0});

    var code_486539628 = [initCode128_486539377(s_486539626)];
    Label1: do {
        Label2: while (true) {
        if (!!(isDone_486539453(code_486539628[0]))) break Label2;
          switch (code_486539628[0].state) {
          case 0:
            if (isTableCOptimal_486539608(code_486539628[0])) {
            changeState_486539556(code_486539628[0], 2);
            }
            else {
              var currChar_486539629 = s_486539626[chckIndx(code_486539628[0].i, 0, (s_486539626).length - 1)];
                if (!!((ConstSet4[currChar_486539629] != undefined))) Temporary3 = false; else {                  Temporary3 = (ConstSet5[currChar_486539629] != undefined);                }              if (Temporary3) {
              changeState_486539556(code_486539628[0], 1);
              }
              else {
              addABChar_486539456(code_486539628[0]);
              }
              
            }
            
            break;
          case 1:
            if (isTableCOptimal_486539608(code_486539628[0])) {
            changeState_486539556(code_486539628[0], 2);
            }
            else {
              var currChar_486539638 = s_486539626[chckIndx(code_486539628[0].i, 0, (s_486539626).length - 1)];
                if (!!((ConstSet7[currChar_486539638] != undefined))) Temporary4 = false; else {                  Temporary4 = (ConstSet8[currChar_486539638] != undefined);                }              if (Temporary4) {
              changeState_486539556(code_486539628[0], 0);
              }
              else {
              addABChar_486539456(code_486539628[0]);
              }
              
            }
            
            break;
          case 2:
            addCChar_486539514(code_486539628[0]);
            if ((!(tableCConditions_486539597(code_486539628[0])) && !(isDone_486539453(code_486539628[0])))) {
            var currChar_486539647 = s_486539626[chckIndx(code_486539628[0].i, 0, (s_486539626).length - 1)];
            if ((ConstSet13[currChar_486539647] != undefined)) {
            changeState_486539556(code_486539628[0], 1);
            }
            else {
            changeState_486539556(code_486539628[0], 0);
            }
            
            }
            
            break;
          }
        }
    } while (false);
    addChecksum_486539444(code_486539628[0]);
    addStop_486539591(code_486539628[0]);
    result_486539627 = nimCopy(result_486539627, code_486539628[0], NTI486539268);

  return result_486539627;

}

function necessaryWidth_486539691(code_486539692) {
  var result_486539693 = 0;

    result_486539693 = addInt(addInt(mulInt((code_486539692.bar).length, 11), 2), 20);

  return result_486539693;

}

function parseSaturatedNatural_654311758(s_654311759, b_654311760, b_654311760_Idx, start_654311761) {
      var Temporary1;
          var Temporary4;

  var result_654311762 = 0;

    var i_654311763 = start_654311761;
    if (((i_654311763 < (s_654311759).length) && (s_654311759[chckIndx(i_654311763, 0, (s_654311759).length - 1)] == 43))) {
    i_654311763 = addInt(i_654311763, 1);
    }
    
      if (!(i_654311763 < (s_654311759).length)) Temporary1 = false; else {        Temporary1 = (ConstSet18[s_654311759[chckIndx(i_654311763, 0, (s_654311759).length - 1)]] != undefined);      }    if (Temporary1) {
    b_654311760[b_654311760_Idx] = 0;
    Label2: do {
        Label3: while (true) {
          if (!(i_654311763 < (s_654311759).length)) Temporary4 = false; else {            Temporary4 = (ConstSet19[s_654311759[chckIndx(i_654311763, 0, (s_654311759).length - 1)]] != undefined);          }        if (!Temporary4) break Label3;
          var c_654311782 = subInt(s_654311759[chckIndx(i_654311763, 0, (s_654311759).length - 1)], 48);
          if ((b_654311760[b_654311760_Idx] <= divInt(subInt(2147483647, c_654311782), 10))) {
          b_654311760[b_654311760_Idx] = addInt(mulInt(b_654311760[b_654311760_Idx], 10), c_654311782);
          }
          else {
            b_654311760[b_654311760_Idx] = 2147483647;
          }
          
          i_654311763 = addInt(i_654311763, 1);
          Label5: do {
              Label6: while (true) {
              if (!((i_654311763 < (s_654311759).length) && (s_654311759[chckIndx(i_654311763, 0, (s_654311759).length - 1)] == 95))) break Label6;
                i_654311763 = addInt(i_654311763, 1);
              }
          } while (false);
        }
    } while (false);
    result_654311762 = subInt(i_654311763, start_654311761);
    }
    

  return result_654311762;

}

function HEX5BHEX5D_939527322(s_939527325, x_939527326) {
  var result_939527327 = [];

    var a_939527329 = x_939527326.a;
    var L_939527331 = addInt(subInt(subInt((s_939527325).length, x_939527326.b), a_939527329), 1);
    result_939527327 = nimCopy(null, mnewString(chckRange(L_939527331, 0, 2147483647)), NTI33554439);
    Label1: do {
      var i_939527336 = 0;
      var i_486539895 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539895 < L_939527331)) break Label3;
            i_939527336 = i_486539895;
            result_939527327[chckIndx(i_939527336, 0, (result_939527327).length - 1)] = s_939527325[chckIndx(addInt(i_939527336, a_939527329), 0, (s_939527325).length - 1)];
            i_486539895 = addInt(i_486539895, 1);
          }
      } while (false);
    } while (false);

  return result_939527327;

}

function HEX2EHEX2E_872415312(a_872415315, b_872415316) {
  var result_872415319 = ({a: 0, b: 0});

    result_872415319 = nimCopy(result_872415319, {a: a_872415315, b: b_872415316}, NTI872415311);

  return result_872415319;

}

function parseStandardFormatSpecifier_637534266(s_637534267, start_637534268, ignoreUnknownSuffix_637534269) {
      var Temporary1;
      var Temporary2;
      var Temporary3;

  var result_637534270 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_637534270.fill = 32;
    result_637534270.align = 0;
    result_637534270.sign = 45;
    var i_637534272 = start_637534268;
    if (((addInt(i_637534272, 1) < (s_637534267).length) && (ConstSet14[s_637534267[chckIndx(addInt(i_637534272, 1), 0, (s_637534267).length - 1)]] != undefined))) {
    result_637534270.fill = s_637534267[chckIndx(i_637534272, 0, (s_637534267).length - 1)];
    result_637534270.align = s_637534267[chckIndx(addInt(i_637534272, 1), 0, (s_637534267).length - 1)];
    i_637534272 = addInt(i_637534272, 2);
    }
    else {
    if (((i_637534272 < (s_637534267).length) && (ConstSet15[s_637534267[chckIndx(i_637534272, 0, (s_637534267).length - 1)]] != undefined))) {
    result_637534270.align = s_637534267[chckIndx(i_637534272, 0, (s_637534267).length - 1)];
    i_637534272 = addInt(i_637534272, 1);
    }
    }
    if (((i_637534272 < (s_637534267).length) && (ConstSet16[s_637534267[chckIndx(i_637534272, 0, (s_637534267).length - 1)]] != undefined))) {
    result_637534270.sign = s_637534267[chckIndx(i_637534272, 0, (s_637534267).length - 1)];
    i_637534272 = addInt(i_637534272, 1);
    }
    
    if (((i_637534272 < (s_637534267).length) && (s_637534267[chckIndx(i_637534272, 0, (s_637534267).length - 1)] == 35))) {
    result_637534270.alternateForm = true;
    i_637534272 = addInt(i_637534272, 1);
    }
    
      if (!((addInt(i_637534272, 1) < (s_637534267).length) && (s_637534267[chckIndx(i_637534272, 0, (s_637534267).length - 1)] == 48))) Temporary1 = false; else {        Temporary1 = (ConstSet17[s_637534267[chckIndx(addInt(i_637534272, 1), 0, (s_637534267).length - 1)]] != undefined);      }    if (Temporary1) {
    result_637534270.padWithZero = true;
    i_637534272 = addInt(i_637534272, 1);
    }
    
    var parsedLength_637534309 = parseSaturatedNatural_654311758(s_637534267, result_637534270, "minimumWidth", i_637534272);
    i_637534272 = addInt(i_637534272, parsedLength_637534309);
    if (((i_637534272 < (s_637534267).length) && (s_637534267[chckIndx(i_637534272, 0, (s_637534267).length - 1)] == 46))) {
    i_637534272 = addInt(i_637534272, 1);
    var parsedLengthB_637534318 = parseSaturatedNatural_654311758(s_637534267, result_637534270, "precision", i_637534272);
    i_637534272 = addInt(i_637534272, parsedLengthB_637534318);
    }
    else {
      result_637534270.precision = -1;
    }
    
      if (!(i_637534272 < (s_637534267).length)) Temporary2 = false; else {        Temporary2 = (ConstSet20[s_637534267[chckIndx(i_637534272, 0, (s_637534267).length - 1)]] != undefined);      }    if (Temporary2) {
    result_637534270.typ = s_637534267[chckIndx(i_637534272, 0, (s_637534267).length - 1)];
    i_637534272 = addInt(i_637534272, 1);
    }
    
    result_637534270.endPosition = i_637534272;
      if (!!((i_637534272 == (s_637534267).length))) Temporary3 = false; else {        Temporary3 = !(ignoreUnknownSuffix_637534269);      }    if (Temporary3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_939527322(s_637534267, HEX2EHEX2E_872415312(i_637534272, 1)) || []), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_637534270;

}

function nucruneLen(s_939524106) {
  var result_939524107 = 0;

    result_939524107 = 0;
    var i_939524108 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_939524108 < (s_939524106).length)) break Label2;
          if ((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] <= 127)) {
          i_939524108 = addInt(i_939524108, 1);
          }
          else {
          if (((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] >>> 5) == 6)) {
          i_939524108 = addInt(i_939524108, 2);
          }
          else {
          if (((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] >>> 4) == 14)) {
          i_939524108 = addInt(i_939524108, 3);
          }
          else {
          if (((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] >>> 3) == 30)) {
          i_939524108 = addInt(i_939524108, 4);
          }
          else {
          if (((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] >>> 2) == 62)) {
          i_939524108 = addInt(i_939524108, 5);
          }
          else {
          if (((s_939524106[chckIndx(i_939524108, 0, (s_939524106).length - 1)] >>> 1) == 126)) {
          i_939524108 = addInt(i_939524108, 6);
          }
          else {
          i_939524108 = addInt(i_939524108, 1);
          }
          }}}}}
          result_939524107 = addInt(result_939524107, 1);
        }
    } while (false);

  return result_939524107;

}

function runeLenAt_939524161(s_939524162, i_939524163) {
  var result_939524164 = 0;

    if ((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] <= 127)) {
    result_939524164 = 1;
    }
    else {
    if (((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] >>> 5) == 6)) {
    result_939524164 = 2;
    }
    else {
    if (((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] >>> 4) == 14)) {
    result_939524164 = 3;
    }
    else {
    if (((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] >>> 3) == 30)) {
    result_939524164 = 4;
    }
    else {
    if (((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] >>> 2) == 62)) {
    result_939524164 = 5;
    }
    else {
    if (((s_939524162[chckIndx(i_939524163, 0, (s_939524162).length - 1)] >>> 1) == 126)) {
    result_939524164 = 6;
    }
    else {
      result_939524164 = 1;
    }
    }}}}}

  return result_939524164;

}

function runeOffset_939524733(s_939524734, pos_939524735, start_939524736) {
  var result_939524737 = 0;

  BeforeRet: do {
    var i_939524738 = 0;
    var o_939524739 = start_939524736;
    Label1: do {
        Label2: while (true) {
        if (!(i_939524738 < pos_939524735)) break Label2;
          o_939524739 = addInt(o_939524739, chckRange(runeLenAt_939524161(s_939524734, o_939524739), 0, 2147483647));
          if (((s_939524734).length <= o_939524739)) {
          result_939524737 = -1;
          break BeforeRet;
          }
          
          i_939524738 = addInt(i_939524738, 1);
        }
    } while (false);
    result_939524737 = o_939524739;
    break BeforeRet;
  } while (false);

  return result_939524737;

}

function validateUtf8_939524373(s_939524374) {
            var Temporary3;
            var Temporary4;
            var Temporary5;
            var Temporary6;
            var Temporary7;
            var Temporary8;

  var result_939524375 = 0;

  BeforeRet: do {
    var i_939524376 = 0;
    var L_939524377 = (s_939524374).length;
    Label1: do {
        Label2: while (true) {
        if (!(i_939524376 < L_939524377)) break Label2;
          if ((s_939524374[chckIndx(i_939524376, 0, (s_939524374).length - 1)] <= 127)) {
          i_939524376 = addInt(i_939524376, 1);
          }
          else {
          if (((s_939524374[chckIndx(i_939524376, 0, (s_939524374).length - 1)] >>> 5) == 6)) {
          if ((s_939524374[chckIndx(i_939524376, 0, (s_939524374).length - 1)] < 194)) {
          result_939524375 = i_939524376;
          break BeforeRet;
          }
          
            if (!(addInt(i_939524376, 1) < L_939524377)) Temporary3 = false; else {              Temporary3 = ((s_939524374[chckIndx(addInt(i_939524376, 1), 0, (s_939524374).length - 1)] >>> 6) == 2);            }          if (Temporary3) {
          i_939524376 = addInt(i_939524376, 2);
          }
          else {
            result_939524375 = i_939524376;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_939524374[chckIndx(i_939524376, 0, (s_939524374).length - 1)] >>> 4) == 14)) {
            if (!(addInt(i_939524376, 2) < L_939524377)) Temporary5 = false; else {              Temporary5 = ((s_939524374[chckIndx(addInt(i_939524376, 1), 0, (s_939524374).length - 1)] >>> 6) == 2);            }            if (!Temporary5) Temporary4 = false; else {              Temporary4 = ((s_939524374[chckIndx(addInt(i_939524376, 2), 0, (s_939524374).length - 1)] >>> 6) == 2);            }          if (Temporary4) {
          i_939524376 = addInt(i_939524376, 3);
          }
          else {
            result_939524375 = i_939524376;
            break BeforeRet;
          }
          
          }
          else {
          if (((s_939524374[chckIndx(i_939524376, 0, (s_939524374).length - 1)] >>> 3) == 30)) {
            if (!(addInt(i_939524376, 3) < L_939524377)) Temporary8 = false; else {              Temporary8 = ((s_939524374[chckIndx(addInt(i_939524376, 1), 0, (s_939524374).length - 1)] >>> 6) == 2);            }            if (!Temporary8) Temporary7 = false; else {              Temporary7 = ((s_939524374[chckIndx(addInt(i_939524376, 2), 0, (s_939524374).length - 1)] >>> 6) == 2);            }            if (!Temporary7) Temporary6 = false; else {              Temporary6 = ((s_939524374[chckIndx(addInt(i_939524376, 3), 0, (s_939524374).length - 1)] >>> 6) == 2);            }          if (Temporary6) {
          i_939524376 = addInt(i_939524376, 4);
          }
          else {
            result_939524375 = i_939524376;
            break BeforeRet;
          }
          
          }
          else {
            result_939524375 = i_939524376;
            break BeforeRet;
          }
          }}}
        }
    } while (false);
    result_939524375 = -1;
    break BeforeRet;
  } while (false);

  return result_939524375;

}

function nsuRepeatChar(c_620758011, count_620758012) {
  var result_620758013 = [];

    result_620758013 = nimCopy(null, mnewString(count_620758012), NTI33554439);
    Label1: do {
      var i_620758018 = 0;
      var colontmp__486539901 = 0;
      colontmp__486539901 = subInt(count_620758012, 1);
      var res_486539902 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(res_486539902 <= colontmp__486539901)) break Label3;
            i_620758018 = res_486539902;
            result_620758013[chckIndx(i_620758018, 0, (result_620758013).length - 1)] = c_620758011;
            res_486539902 = addInt(res_486539902, 1);
          }
      } while (false);
    } while (false);

  return result_620758013;

}

function alignString_637534228(s_637534229, minimumWidth_637534230, align_637534231, fill_637534232) {
      var Temporary1;

  var result_637534233 = [];

    if ((minimumWidth_637534230 == 0)) {
    result_637534233 = nimCopy(null, s_637534229, NTI33554439);
    }
    else {
      if ((validateUtf8_939524373(s_637534229) == -1)) {
      Temporary1 = nucruneLen(s_637534229);
      }
      else {
      Temporary1 = (s_637534229).length;
      }
      
      var sRuneLen_637534234 = Temporary1;
      var toFill_637534235 = subInt(minimumWidth_637534230, sRuneLen_637534234);
      if ((toFill_637534235 <= 0)) {
      result_637534233 = nimCopy(null, s_637534229, NTI33554439);
      }
      else {
      if (((align_637534231 == 60) || (align_637534231 == 0))) {
      result_637534233 = nimCopy(null, (s_637534229 || []).concat(nsuRepeatChar(fill_637534232, chckRange(toFill_637534235, 0, 2147483647)) || []), NTI33554439);
      }
      else {
      if ((align_637534231 == 94)) {
      var half_637534236 = divInt(toFill_637534235, 2);
      result_637534233 = nimCopy(null, (nsuRepeatChar(fill_637534232, chckRange(half_637534236, 0, 2147483647)) || []).concat(s_637534229 || [],nsuRepeatChar(fill_637534232, chckRange(subInt(toFill_637534235, half_637534236), 0, 2147483647)) || []), NTI33554439);
      }
      else {
        result_637534233 = nimCopy(null, (nsuRepeatChar(fill_637534232, chckRange(toFill_637534235, 0, 2147483647)) || []).concat(s_637534229 || []), NTI33554439);
      }
      }}
    }
    

  return result_637534233;

}

function formatValue_637534370(result_637534371, result_637534371_Idx, value_637534372, specifier_637534373) {
    var spec_637534374 = parseStandardFormatSpecifier_637534266(specifier_637534373, 0, false);
    var value_637534375 = nimCopy(null, value_637534372, NTI33554439);
    switch (spec_637534374.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_637534374.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_637534374.precision == -1))) {
    if ((spec_637534374.precision < nucruneLen(value_637534375))) {
    (value_637534375.length = chckRange(runeOffset_939524733(value_637534375, chckRange(spec_637534374.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    result_637534371[result_637534371_Idx].push.apply(result_637534371[result_637534371_Idx], alignString_637534228(value_637534375, spec_637534374.minimumWidth, spec_637534374.align, spec_637534374.fill));;

  
}

function getSvgHeader_486539697(code_486539698, totalWidth_486539699, barcodeWidth_486539700, totalHeight_486539701, showFrame_486539702) {
  var result_486539703 = [];

    var fmtRes_486539708 = [mnewString(0)];
    fmtRes_486539708[0].push.apply(fmtRes_486539708[0], makeNimstrLit("<svg width=\""));;
    formatValue_637534370(fmtRes_486539708, 0, totalWidth_486539699, []);
    fmtRes_486539708[0].push.apply(fmtRes_486539708[0], makeNimstrLit("\" height=\""));;
    formatValue_637534370(fmtRes_486539708, 0, totalHeight_486539701, []);
    fmtRes_486539708[0].push.apply(fmtRes_486539708[0], makeNimstrLit("\" xmlns=\"http://www.w3.org/2000/svg\">\x0A\x0A  <!-- contents of nested tag will scale -->\x0A  <svg viewBox=\"0 0 "));;
    formatValue_637534370(fmtRes_486539708, 0, barcodeWidth_486539700, []);
    fmtRes_486539708[0].push.apply(fmtRes_486539708[0], makeNimstrLit(" "));;
    formatValue_637534370(fmtRes_486539708, 0, totalHeight_486539701, []);
    fmtRes_486539708[0].push.apply(fmtRes_486539708[0], makeNimstrLit("\" preserveAspectRatio=\"none\">\x0A\x0A    <!-- background -->\x0A"));;
    result_486539703 = nimCopy(null, fmtRes_486539708[0], NTI33554439);
    if (showFrame_486539702) {
    result_486539703.push.apply(result_486539703, makeNimstrLit("    <rect width=\"100%\" height=\"100%\" fill=\"white\" stroke-width=\"1\" stroke=\"black\" />"));;
    }
    else {
    result_486539703.push.apply(result_486539703, makeNimstrLit("    <rect width=\"100%\" height=\"100%\" fill=\"white\" stroke-width=\"0\" />"));;
    }
    
    result_486539703.push.apply(result_486539703, makeNimstrLit("\x0A"));;

  return result_486539703;

}

function mkDigit_637534213(v_637534214, typ_637534215) {
      var Temporary1;

  var result_637534216 = [];

    if (!((v_637534214 < 26))) {
    failedAssertImpl_218103864(makeNimstrLit("strformat.nim(320, 9) `v < 26` "));
    }
    
    if ((v_637534214 < 10)) {
    result_637534216 = nimCopy(null, nimCharToStr(chckRange(addInt(48, v_637534214), 0, 255)), NTI33554439);
    }
    else {
      if ((typ_637534215 == 120)) {
      Temporary1 = 97;
      }
      else {
      Temporary1 = 65;
      }
      
      result_637534216 = nimCopy(null, nimCharToStr(chckRange(subInt(addInt(Temporary1, v_637534214), 10), 0, 255)), NTI33554439);
    }
    

  return result_637534216;

}

function formatInt_486539727(n_486539729, radix_486539730, spec_486539731) {
    var Temporary1;
    var Temporary8;

  var result_486539732 = [];

    var n_486539735 = n_486539729;
    var negative_486539736 = (n_486539735 < 0);
    if (negative_486539736) {
    Temporary1 = ((~(n_486539735) + 1) );
    }
    else {
    Temporary1 = n_486539735;
    }
    
    var v_486539737 = Temporary1;
    var xx_486539738 = [];
    if (spec_486539731.alternateForm) {
    switch (spec_486539731.typ) {
    case 88:
      xx_486539738 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 120:
      xx_486539738 = nimCopy(null, makeNimstrLit("0x"), NTI33554439);
      break;
    case 98:
      xx_486539738 = nimCopy(null, makeNimstrLit("0b"), NTI33554439);
      break;
    case 111:
      xx_486539738 = nimCopy(null, makeNimstrLit("0o"), NTI33554439);
      break;
    default: 
      break;
    }
    }
    
    if ((v_486539737 == 0)) {
    result_486539732 = nimCopy(null, makeNimstrLit("0"), NTI33554439);
    }
    else {
      result_486539732 = nimCopy(null, [], NTI33554439);
      Label2: do {
          Label3: while (true) {
          if (!(0 < v_486539737)) break Label3;
            var d_486539739 = (v_486539737 % radix_486539730);
            v_486539737 = Math.trunc(((v_486539737 / radix_486539730) ));
            result_486539732.push.apply(result_486539732, mkDigit_637534213(chckRange(d_486539739, -2147483648, 2147483647), spec_486539731.typ));;
          }
      } while (false);
      Label4: do {
        var idx_486539744 = 0;
        var colontmp__486539911 = 0;
        colontmp__486539911 = divInt((result_486539732).length, 2);
        var i_486539912 = 0;
        Label5: do {
            Label6: while (true) {
            if (!(i_486539912 < colontmp__486539911)) break Label6;
              idx_486539744 = i_486539912;
              var Temporary7 = result_486539732[chckIndx(idx_486539744, 0, (result_486539732).length - 1)]; result_486539732[chckIndx(idx_486539744, 0, (result_486539732).length - 1)] = result_486539732[chckIndx(subInt(subInt((result_486539732).length, idx_486539744), 1), 0, (result_486539732).length - 1)]; result_486539732[chckIndx(subInt(subInt((result_486539732).length, idx_486539744), 1), 0, (result_486539732).length - 1)] = Temporary7;              i_486539912 = addInt(i_486539912, 1);
            }
        } while (false);
      } while (false);
    }
    
    if (spec_486539731.padWithZero) {
    if (negative_486539736) Temporary8 = true; else {      Temporary8 = !((spec_486539731.sign == 45));    }    var sign_486539749 = Temporary8;
    var toFill_486539753 = subInt(subInt(subInt(spec_486539731.minimumWidth, (result_486539732).length), (xx_486539738).length), (sign_486539749 ? 1 : 0));
    if ((0 < toFill_486539753)) {
    result_486539732 = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_486539753, 0, 2147483647)) || []).concat(result_486539732 || []), NTI33554439);
    }
    
    }
    
    if (negative_486539736) {
    result_486539732 = nimCopy(null, (makeNimstrLit("-") || []).concat(xx_486539738 || [],result_486539732 || []), NTI33554439);
    }
    else {
    if (!((spec_486539731.sign == 45))) {
    result_486539732 = nimCopy(null, [spec_486539731.sign].concat(xx_486539738 || [],result_486539732 || []), NTI33554439);
    }
    else {
      result_486539732 = nimCopy(null, (xx_486539738 || []).concat(result_486539732 || []), NTI33554439);
    }
    }
    if ((spec_486539731.align == 60)) {
    Label9: do {
      var i_486539758 = 0;
      var colontmp__486539915 = 0;
      colontmp__486539915 = (result_486539732).length;
      var i_486539916 = colontmp__486539915;
      Label10: do {
          Label11: while (true) {
          if (!(i_486539916 < spec_486539731.minimumWidth)) break Label11;
            i_486539758 = i_486539916;
            addChar(result_486539732, spec_486539731.fill);;
            i_486539916 = addInt(i_486539916, 1);
          }
      } while (false);
    } while (false);
    }
    else {
      var toFill_486539759 = subInt(spec_486539731.minimumWidth, (result_486539732).length);
      if ((spec_486539731.align == 94)) {
      var half_486539760 = divInt(toFill_486539759, 2);
      result_486539732 = nimCopy(null, (nsuRepeatChar(spec_486539731.fill, chckRange(half_486539760, 0, 2147483647)) || []).concat(result_486539732 || [],nsuRepeatChar(spec_486539731.fill, chckRange(subInt(toFill_486539759, half_486539760), 0, 2147483647)) || []), NTI33554439);
      }
      else {
        if ((0 < toFill_486539759)) {
        result_486539732 = nimCopy(null, (nsuRepeatChar(spec_486539731.fill, chckRange(toFill_486539759, 0, 2147483647)) || []).concat(result_486539732 || []), NTI33554439);
        }
        
      }
      
    }
    

  return result_486539732;

}

function formatValue_486539777(result_486539779, result_486539779_Idx, value_486539780, specifier_486539781) {
  BeforeRet: do {
    if (((specifier_486539781).length == 0)) {
    result_486539779[result_486539779_Idx].push.apply(result_486539779[result_486539779_Idx], HEX24_335544323(value_486539780));;
    break BeforeRet;
    }
    
    var spec_486539782 = parseStandardFormatSpecifier_637534266(specifier_486539781, 0, false);
    var radix_486539783 = 10;
    switch (spec_486539782.typ) {
    case 120:
    case 88:
      radix_486539783 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_486539783 = 2;
      break;
    case 111:
      radix_486539783 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_486539782.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_486539779[result_486539779_Idx].push.apply(result_486539779[result_486539779_Idx], formatInt_486539727(value_486539780, radix_486539783, spec_486539782));;
  } while (false);

  
}

function formatValue_486539719(result_486539721, result_486539721_Idx, value_486539722, specifier_486539723) {
  BeforeRet: do {
    if (((specifier_486539723).length == 0)) {
    result_486539721[result_486539721_Idx].push.apply(result_486539721[result_486539721_Idx], HEX24_335544323(value_486539722));;
    break BeforeRet;
    }
    
    var spec_486539724 = parseStandardFormatSpecifier_637534266(specifier_486539723, 0, false);
    var radix_486539725 = 10;
    switch (spec_486539724.typ) {
    case 120:
    case 88:
      radix_486539725 = 16;
      break;
    case 100:
    case 0:
      break;
    case 98:
      radix_486539725 = 2;
      break;
    case 111:
      radix_486539725 = 8;
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'x\', \'X\', \'b\', \'d\', \'o\' but got: ") || []).concat([spec_486539724.typ]), parent: null, m_type: NTI33555125, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    result_486539721[result_486539721_Idx].push.apply(result_486539721[result_486539721_Idx], formatInt_486539727(value_486539722, radix_486539725, spec_486539724));;
  } while (false);

  
}

function svgBar_486539713(x_486539714, width_486539715, height_486539716) {
  var result_486539717 = [];

    var fmtRes_486539718 = [mnewString(0)];
    fmtRes_486539718[0].push.apply(fmtRes_486539718[0], makeNimstrLit("    <rect x=\""));;
    formatValue_486539719(fmtRes_486539718, 0, x_486539714, []);
    fmtRes_486539718[0].push.apply(fmtRes_486539718[0], makeNimstrLit("\" y=\""));;
    formatValue_637534370(fmtRes_486539718, 0, makeNimstrLit("5%"), []);
    fmtRes_486539718[0].push.apply(fmtRes_486539718[0], makeNimstrLit("\" width=\""));;
    formatValue_637534370(fmtRes_486539718, 0, width_486539715, []);
    fmtRes_486539718[0].push.apply(fmtRes_486539718[0], makeNimstrLit("\" height=\""));;
    formatValue_637534370(fmtRes_486539718, 0, height_486539716, []);
    fmtRes_486539718[0].push.apply(fmtRes_486539718[0], makeNimstrLit("\" stroke-width=\"0\" />"));;
    result_486539717 = nimCopy(null, fmtRes_486539718[0], NTI33554439);

  return result_486539717;

}

function svgStopBars_486539761(x_486539762, x_486539762_Idx, height_486539763) {
  var result_486539764 = [];

    result_486539764.push.apply(result_486539764, svgBar_486539713(x_486539762[x_486539762_Idx], makeNimstrLit("2"), height_486539763));;
    result_486539764.push.apply(result_486539764, makeNimstrLit("\x0A"));;
    x_486539762[x_486539762_Idx] = addInt(x_486539762[x_486539762_Idx], 2);

  return result_486539764;

}

function svgBars_486539770(c_486539771, x_486539772, x_486539772_Idx, height_486539773, debug_486539774) {
  var result_486539775 = [];

    if (debug_486539774) {
    var fmtRes_486539776 = [mnewString(0)];
    fmtRes_486539776[0].push.apply(fmtRes_486539776[0], makeNimstrLit("  <!-- Code128 value "));;
    formatValue_486539777(fmtRes_486539776, 0, c_486539771, []);
    fmtRes_486539776[0].push.apply(fmtRes_486539776[0], makeNimstrLit(") -->\x0A"));;
    result_486539775.push.apply(result_486539775, fmtRes_486539776[0]);;
    }
    
    Label1: do {
      var i_486539826 = 0;
      var width_486539827 = 0;
      var colontmp__486539905 = new Int32Array(6);
      colontmp__486539905 = nimCopy(colontmp__486539905, barWidths_486539318[chckIndx(c_486539771, 0, (barWidths_486539318).length - 1)], NTI486539270);
      var i_486539907 = 0;
      Label2: do {
          Label3: while (true) {
          if (!true) break Label3;
            i_486539826 = i_486539907;
            width_486539827 = colontmp__486539905[chckIndx(i_486539907, 0, (colontmp__486539905).length - 1)];
            if ((modInt(i_486539826, 2) == 0)) {
            result_486539775.push.apply(result_486539775, svgBar_486539713(x_486539772[x_486539772_Idx], HEX24_335544323(width_486539827), height_486539773));;
            result_486539775.push.apply(result_486539775, makeNimstrLit("\x0A"));;
            }
            else {
            if (debug_486539774) {
            var fmtRes_486539828 = [mnewString(0)];
            fmtRes_486539828[0].push.apply(fmtRes_486539828[0], makeNimstrLit("    <!-- whitespace width "));;
            formatValue_486539719(fmtRes_486539828, 0, width_486539827, []);
            fmtRes_486539828[0].push.apply(fmtRes_486539828[0], makeNimstrLit(" -->\x0A"));;
            result_486539775.push.apply(result_486539775, fmtRes_486539828[0]);;
            }
            }
            x_486539772[x_486539772_Idx] = addInt(x_486539772[x_486539772_Idx], width_486539827);
            if ((5 <= i_486539907)) {
            break Label2;
            }
            
            i_486539907 = addInt(i_486539907, 1);
          }
      } while (false);
    } while (false);
    if ((c_486539771 == 106)) {
    result_486539775.push.apply(result_486539775, svgStopBars_486539761(x_486539772, x_486539772_Idx, height_486539773));;
    }
    

  return result_486539775;

}

function getText_486539838(code_486539839, textSize_486539840, fontFamily_486539841) {
  var result_486539842 = [];

    var fmtRes_486539843 = [mnewString(0)];
    fmtRes_486539843[0].push.apply(fmtRes_486539843[0], makeNimstrLit("    <text x=\"50%\" y=\""));;
    formatValue_637534370(fmtRes_486539843, 0, makeNimstrLit("95%"), []);
    fmtRes_486539843[0].push.apply(fmtRes_486539843[0], makeNimstrLit("\" font-size=\""));;
    formatValue_637534370(fmtRes_486539843, 0, textSize_486539840, []);
    fmtRes_486539843[0].push.apply(fmtRes_486539843[0], makeNimstrLit("\" font-family=\""));;
    formatValue_637534370(fmtRes_486539843, 0, fontFamily_486539841, []);
    fmtRes_486539843[0].push.apply(fmtRes_486539843[0], makeNimstrLit("\" text-anchor=\"middle\">"));;
    formatValue_637534370(fmtRes_486539843, 0, code_486539839.s, []);
    fmtRes_486539843[0].push.apply(fmtRes_486539843[0], makeNimstrLit("</text>\x0A"));;
    result_486539842 = nimCopy(null, fmtRes_486539843[0], NTI33554439);

  return result_486539842;

}

function toSvg(code_486539845, height_486539846, width_486539847, textSize_486539848, fontFamily_486539849, showFrame_486539850, showText_486539851, debug_486539852) {
    var Temporary1;

  var result_486539853 = [];

    var barcodeWidth_486539854 = HEX24_335544323(necessaryWidth_486539691(code_486539845));
    if (showText_486539851) {
    Temporary1 = makeNimstrLit("75%");
    }
    else {
    Temporary1 = makeNimstrLit("90%");
    }
    
    var barHeight_486539855 = nimCopy(null, Temporary1, NTI33554439);
    result_486539853 = nimCopy(null, getSvgHeader_486539697(code_486539845, width_486539847, barcodeWidth_486539854, height_486539846, showFrame_486539850), NTI33554439);
    var x_486539856 = [10];
    result_486539853.push.apply(result_486539853, makeNimstrLit("    <!-- barcode -->\x0A"));;
    Label2: do {
      var c_486539877 = 0;
      var i_486539889 = 0;
      var L_486539890 = (code_486539845.bar).length;
      Label3: do {
          Label4: while (true) {
          if (!(i_486539889 < L_486539890)) break Label4;
            c_486539877 = code_486539845.bar[chckIndx(i_486539889, 0, (code_486539845.bar).length - 1)];
            result_486539853.push.apply(result_486539853, svgBars_486539770(c_486539877, x_486539856, 0, barHeight_486539855, debug_486539852));;
            i_486539889 = addInt(i_486539889, 1);
            if (!(((code_486539845.bar).length == L_486539890))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_486539853.push.apply(result_486539853, makeNimstrLit("  </svg>\x0A"));;
    if (showText_486539851) {
    result_486539853.push.apply(result_486539853, makeNimstrLit("  <!-- text, does not scale -->\x0A"));;
    result_486539853.push.apply(result_486539853, makeNimstrLit("  <svg>\x0A"));;
    result_486539853.push.apply(result_486539853, getText_486539838(code_486539845, textSize_486539848, fontFamily_486539849));;
    result_486539853.push.apply(result_486539853, makeNimstrLit("  </svg>\x0A"));;
    }
    
    result_486539853.push.apply(result_486539853, makeNimstrLit("</svg>"));;

  return result_486539853;

}

function genBarcode() {
    var text_486539925 = cstrToNimstr(document.getElementById("text").value);
    var height_486539926 = cstrToNimstr(document.getElementById("height").value);
    var width_486539927 = cstrToNimstr(document.getElementById("width").value);
    var showframe_486539928 = document.getElementById("showframe").checked;
    var showtext_486539929 = document.getElementById("showtext").checked;
    var textsize_486539930 = cstrToNimstr(document.getElementById("textsize").value);
    var fontfamily_486539931 = cstrToNimstr(document.getElementById("fontfamily").value);
    var code_486539932 = toCode128(text_486539925);
    var svg_486539933 = toSvg(code_486539932, height_486539926, width_486539927, textsize_486539930, fontfamily_486539931, showframe_486539928, showtext_486539929, false);
    document.getElementById("barcode").innerHTML = toJSStr(svg_486539933);
    document.getElementById("svgsource").innerHTML = toJSStr(svg_486539933);

  
}
