/* Generated by the Nim Compiler v2.0.0 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI754974759 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI754974737 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI754974913 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI754974764 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI754974744 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI754974754 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI754974752 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI754974795 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI754974794 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI754974793 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI754974758 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI754974781 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI754974748 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI754974738 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI754974769 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI754974745 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI754974773 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI754974746 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI754974777 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI754974747 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI754974785 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI754974749 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI754974753 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI754975034 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI754974789 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI754974750 = {size: 0, kind: 20, base: null, node: null, finalizer: null};
var NTI536870915 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI536870917 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI838860869 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI503316800 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI134217747 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI536870920 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33554445 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI536870919 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI536870916 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI134217742 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555179 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217746 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI671089013 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI536870973 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI671089159 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI134217749 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217751 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554435 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI33555835 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI33555173 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555181 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554450 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555180 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555177 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555178 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217741 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217743 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI134217743 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217743.node = NNI134217743;
var NNI134217741 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217741.node = NNI134217741;
var NNI33555178 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555178.node = NNI33555178;
NTI33555180.base = NTI33555177;
NTI33555181.base = NTI33555177;
var NNI33555177 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555180, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554450, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554449, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555181, name: "up", sons: null}]};
NTI33555177.node = NNI33555177;
var NNI33555173 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555173.node = NNI33555173;
NTI33555177.base = NTI33555173;
NTI33555178.base = NTI33555177;
NTI134217741.base = NTI33555178;
NTI134217743.base = NTI134217741;
var NNI33555835 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554450, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554450, name: "Field2", sons: null}]};
NTI33555835.node = NNI33555835;
var NNI134217751 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217751.node = NNI134217751;
NTI134217751.base = NTI33555178;
var NNI134217749 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217749.node = NNI134217749;
NTI134217749.base = NTI33555178;
NTI671089159.base = NTI33554449;
var NNI536870973 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI33554435, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554449, name: "Field1", sons: null}]};
NTI536870973.node = NNI536870973;
NTI671089013.base = NTI33554449;
var NNI134217746 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217746.node = NNI134217746;
var NNI33555179 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555179.node = NNI33555179;
NTI33555179.base = NTI33555177;
NTI134217746.base = NTI33555179;
var NNI134217742 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217742.node = NNI134217742;
NTI134217742.base = NTI134217741;
NTI536870919.base = NTI33554445;
NTI536870920.base = NTI33554445;
var NNI536870916 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "sampleId", len: 0, typ: NTI33554449, name: "sampleId", sons: null}, 
{kind: 1, offset: "rhdCts", len: 0, typ: NTI536870919, name: "rhdCts", sons: null}, 
{kind: 1, offset: "gapdhCts", len: 0, typ: NTI536870920, name: "gapdhCts", sons: null}]};
NTI536870916.node = NNI536870916;
var NNI134217745 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217745.node = NNI134217745;
NTI134217745.base = NTI33555178;
var NNI134217747 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217747.node = NNI134217747;
NTI134217747.base = NTI134217746;
NTI503316800.base = NTI33554449;
var NNI838860869 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI33554435, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI33554435, name: "b", sons: null}]};
NTI838860869.node = NNI838860869;
var NNI536870915 = {kind: 2, offset: 0, typ: null, name: null, len: 6, sons: {"0": {kind: 1, offset: 0, typ: NTI536870915, name: "P", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI536870915, name: "N", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI536870915, name: "I", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI536870915, name: "I", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI536870915, name: "I", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI536870915, name: "I", len: 0, sons: null}}};
NTI536870915.node = NNI536870915;
var NNI536870917 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "sampleId", len: 0, typ: NTI33554449, name: "sampleId", sons: null}, 
{kind: 1, offset: "pattern", len: 0, typ: NTI33554449, name: "pattern", sons: null}, 
{kind: 1, offset: "status", len: 0, typ: NTI536870915, name: "status", sons: null}]};
NTI536870917.node = NNI536870917;
NTI754974750.base = NTI754974789;
var NNI754975034 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI754974750, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI33554435, name: "Field1", sons: null}]};
NTI754975034.node = NNI754975034;
NTI754974749.base = NTI754974785;
NTI754974747.base = NTI754974777;
NTI754974746.base = NTI754974773;
NTI754974745.base = NTI754974769;
var NNI754974738 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI754974738, name: "Monday", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI754974738, name: "Tuesday", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI754974738, name: "Wednesday", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI754974738, name: "Thursday", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI754974738, name: "Friday", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI754974738, name: "Saturday", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI754974738, name: "Sunday", len: 0, sons: null}}};
NTI754974738.node = NNI754974738;
NTI754974748.base = NTI754974781;
var NNI754974793 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "zonedTimeFromTimeImpl", len: 0, typ: NTI754974794, name: "zonedTimeFromTimeImpl", sons: null}, 
{kind: 1, offset: "zonedTimeFromAdjTimeImpl", len: 0, typ: NTI754974795, name: "zonedTimeFromAdjTimeImpl", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554449, name: "name", sons: null}]};
NTI754974793.node = NNI754974793;
NTI754974758.base = NTI754974793;
var NNI754974753 = {kind: 2, len: 12, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "nanosecond", len: 0, typ: NTI754974749, name: "nanosecond", sons: null}, 
{kind: 1, offset: "second", len: 0, typ: NTI754974747, name: "second", sons: null}, 
{kind: 1, offset: "minute", len: 0, typ: NTI754974746, name: "minute", sons: null}, 
{kind: 1, offset: "hour", len: 0, typ: NTI754974745, name: "hour", sons: null}, 
{kind: 1, offset: "monthdayZero", len: 0, typ: NTI33554435, name: "monthdayZero", sons: null}, 
{kind: 1, offset: "monthZero", len: 0, typ: NTI33554435, name: "monthZero", sons: null}, 
{kind: 1, offset: "year", len: 0, typ: NTI33554435, name: "year", sons: null}, 
{kind: 1, offset: "weekday", len: 0, typ: NTI754974738, name: "weekday", sons: null}, 
{kind: 1, offset: "yearday", len: 0, typ: NTI754974748, name: "yearday", sons: null}, 
{kind: 1, offset: "isDst", len: 0, typ: NTI33554466, name: "isDst", sons: null}, 
{kind: 1, offset: "timezone", len: 0, typ: NTI754974758, name: "timezone", sons: null}, 
{kind: 1, offset: "utcOffset", len: 0, typ: NTI33554435, name: "utcOffset", sons: null}]};
NTI754974753.node = NNI754974753;
NTI754974753.base = NTI33555173;
var NNI754974752 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI33554439, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI754974749, name: "nanosecond", sons: null}]};
NTI754974752.node = NNI754974752;
var NNI754974754 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI33554439, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI754974749, name: "nanosecond", sons: null}]};
NTI754974754.node = NNI754974754;
NTI754974744.base = NTI754974764;
var NNI754974737 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI754974737, name: "January", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI754974737, name: "February", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI754974737, name: "March", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI754974737, name: "April", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI754974737, name: "May", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI754974737, name: "June", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI754974737, name: "July", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI754974737, name: "August", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI754974737, name: "September", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI754974737, name: "October", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI754974737, name: "November", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI754974737, name: "December", len: 0, sons: null}}};
NTI754974737.node = NNI754974737;
var NNI754974913 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI754974744, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI754974737, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI33554435, name: "Field2", sons: null}]};
NTI754974913.node = NNI754974913;
var NNI754974759 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "time", len: 0, typ: NTI754974752, name: "time", sons: null}, 
{kind: 1, offset: "utcOffset", len: 0, typ: NTI33554435, name: "utcOffset", sons: null}, 
{kind: 1, offset: "isDst", len: 0, typ: NTI33554466, name: "isDst", sons: null}]};
NTI754974759.node = NNI754974759;

function mnewString(len_33557003) {
        return new Array(len_33557003);
  

  
}

function arrayConstr(len_33557314, value_33557315, typ_33557316) {
        var result = new Array(len_33557314);
    for (var i = 0; i < len_33557314; ++i) result[i] = nimCopy(null, value_33557315, typ_33557316);
    return result;
  

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557268, src_33557269, ti_33557270) {
  var result_33557279 = null;

    switch (ti_33557270.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557259(ti_33557270))) {
      result_33557279 = src_33557269;
      }
      else {
        result_33557279 = [src_33557269[0], src_33557269[1]];
      }
      
      break;
    case 19:
            if (dest_33557268 === null || dest_33557268 === undefined) {
        dest_33557268 = {};
      }
      else {
        for (var key in dest_33557268) { delete dest_33557268[key]; }
      }
      for (var key in src_33557269) { dest_33557268[key] = src_33557269[key]; }
      result_33557279 = dest_33557268;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557270.base == null))) {
      result_33557279 = nimCopy(dest_33557268, src_33557269, ti_33557270.base);
      }
      else {
      if ((ti_33557270.kind == 17)) {
      result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {m_type: ti_33557270} : dest_33557268;
      }
      else {
        result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {} : dest_33557268;
      }
      }
      nimCopyAux(result_33557279, src_33557269, ti_33557270.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_33557269)) { 
        if(dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new src_33557269.constructor(src_33557269);
        } else {
          dest_33557268.set(src_33557269, 0);
        }
        result_33557279 = dest_33557268;
      } else {
        if (src_33557269 === null) {
          result_33557279 = null;
        }
        else {
          if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
            dest_33557268 = new Array(src_33557269.length);
          }
          result_33557279 = dest_33557268;
          for (var i = 0; i < src_33557269.length; ++i) {
            result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_33557269 === null) {
        result_33557279 = null;
      }
      else {
        if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new Array(src_33557269.length);
        }
        result_33557279 = dest_33557268;
        for (var i = 0; i < src_33557269.length; ++i) {
          result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
        }
      }
    
      break;
    case 28:
            if (src_33557269 !== null) {
        result_33557279 = src_33557269.slice(0);
      }
    
      break;
    default: 
      result_33557279 = src_33557269;
      break;
    }

  return result_33557279;

}

function cstrToNimstr(c_33556898) {
      var ln = c_33556898.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_33556898.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_33556898.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}

function toJSStr(s_33556901) {
  var result_33556902 = null;

    var res_33556943 = newSeq_33556919((s_33556901).length);
    var i_33556944 = 0;
    var j_33556945 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556944 < (s_33556901).length)) break Label2;
          var c_33556946 = s_33556901[i_33556944];
          if ((c_33556946 < 128)) {
          res_33556943[j_33556945] = String.fromCharCode(c_33556946);
          i_33556944 += 1;
          }
          else {
            var helper_33556959 = newSeq_33556919(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556960 = c_33556946.toString(16);
                  if ((((code_33556960) == null ? 0 : (code_33556960).length) == 1)) {
                  helper_33556959.push("%0");;
                  }
                  else {
                  helper_33556959.push("%");;
                  }
                  
                  helper_33556959.push(code_33556960);;
                  i_33556944 += 1;
                  if ((((s_33556901).length <= i_33556944) || (s_33556901[i_33556944] < 128))) {
                  break Label3;
                  }
                  
                  c_33556946 = s_33556901[i_33556944];
                }
            };
++excHandler;
            try {
            res_33556943[j_33556945] = decodeURIComponent(helper_33556959.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556943[j_33556945] = helper_33556959.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556945 += 1;
        }
    };
    if (res_33556943.length < j_33556945) { for (var i = res_33556943.length ; i < j_33556945 ; ++i) res_33556943.push(null); }
               else { res_33556943.length = j_33556945; };
    result_33556902 = res_33556943.join("");

  return result_33556902;

}

function raiseException(e_33556653, ename_33556654) {
    e_33556653.name = ename_33556654;
    if ((excHandler == 0)) {
    unhandledException(e_33556653);
    }
    
    e_33556653.trace = nimCopy(null, rawWriteStackTrace_33556604(), NTI33554449);
    throw e_33556653;

  
}

function addInt(a_33557050, b_33557051) {
        var result = a_33557050 + b_33557051;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557324, a_33557325, b_33557326) {
  var result_33557327 = 0;

  BeforeRet: {
    if (((a_33557325 <= i_33557324) && (i_33557324 <= b_33557326))) {
    result_33557327 = i_33557324;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  };

  return result_33557327;

}

function chckIndx(i_33557319, a_33557320, b_33557321) {
  var result_33557322 = 0;

  BeforeRet: {
    if (((a_33557320 <= i_33557319) && (i_33557319 <= b_33557321))) {
    result_33557322 = i_33557319;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557319, a_33557320, b_33557321);
    }
    
  };

  return result_33557322;

}
var ConstSet2 = setConstr(13, 10);

function nimMax(a_33557108, b_33557109) {
    var Temporary1;

  var result_33557110 = 0;

  BeforeRet: {
    if ((b_33557109 <= a_33557108)) {
    Temporary1 = a_33557108;
    }
    else {
    Temporary1 = b_33557109;
    }
    
    result_33557110 = Temporary1;
    break BeforeRet;
  };

  return result_33557110;

}

function subInt(a_33557054, b_33557055) {
        var result = a_33557054 - b_33557055;
    checkOverflowInt(result);
    return result;
  

  
}

function nimMin(a_33557104, b_33557105) {
    var Temporary1;

  var result_33557106 = 0;

  BeforeRet: {
    if ((a_33557104 <= b_33557105)) {
    Temporary1 = a_33557104;
    }
    else {
    Temporary1 = b_33557105;
    }
    
    result_33557106 = Temporary1;
    break BeforeRet;
  };

  return result_33557106;

}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}

function eqStrings(a_33557041, b_33557042) {
        if (a_33557041 == b_33557042) return true;
    if (a_33557041 === null && b_33557042.length == 0) return true;
    if (b_33557042 === null && a_33557041.length == 0) return true;
    if ((!a_33557041) || (!b_33557042)) return false;
    var alen = a_33557041.length;
    if (alen != b_33557042.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_33557041[i] != b_33557042[i]) return false;
    return true;
  

  
}
var ConstSet3 = setConstr(34);
var ConstSet4 = setConstr(34);
var ConstSet5 = setConstr(34);
var ConstSet6 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet7 = setConstr([97, 122], [65, 90], [48, 57], 95);

function addChar(x_33557415, c_33557416) {
    x_33557415.push(c_33557416);

  
}
var ConstSet8 = setConstr([48, 57]);
var ConstSet9 = setConstr([48, 57]);
var ConstSet10 = setConstr(101, 69);
var ConstSet11 = setConstr([48, 57]);
var ConstSet12 = setConstr([48, 57]);

function nimParseBiggestFloat(s_33557448, number_33557449, number_33557449_Idx) {
    var Temporary1;

  var result_33557450 = 0;

  var F = {procname: "system.nimParseBiggestFloat", prev: framePtr, filename: "/usr/lib/nim/system/jssys.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 718;
    F.filename = "jssys.nim";
    var sign_33557451 = false;
    F.line = 719;
    var i_33557452 = 0;
    if ((s_33557448[i_33557452] == 43)) {
    F.line = 720;
    i_33557452 += 1;
    }
    else {
    if ((s_33557448[i_33557452] == 45)) {
    F.line = 722;
    sign_33557451 = true;
    F.line = 723;
    i_33557452 += 1;
    }
    }
    if (((s_33557448[i_33557452] == 78) || (s_33557448[i_33557452] == 110))) {
    if (((s_33557448[(i_33557452 + 1)] == 65) || (s_33557448[(i_33557452 + 1)] == 97))) {
    if (((s_33557448[(i_33557452 + 2)] == 78) || (s_33557448[(i_33557452 + 2)] == 110))) {
    if (!((ConstSet6[s_33557448[(i_33557452 + 3)]] != undefined))) {
    F.line = 728;
    number_33557449[number_33557449_Idx] = NaN;
    F.line = 729;
    result_33557450 = (i_33557452 + 3);
    break BeforeRet;
    }
    
    }
    
    }
    
    F.line = 730;
    result_33557450 = 0;
    break BeforeRet;
    }
    
    if (((s_33557448[i_33557452] == 73) || (s_33557448[i_33557452] == 105))) {
    if (((s_33557448[(i_33557452 + 1)] == 78) || (s_33557448[(i_33557452 + 1)] == 110))) {
    if (((s_33557448[(i_33557452 + 2)] == 70) || (s_33557448[(i_33557452 + 2)] == 102))) {
    if (!((ConstSet7[s_33557448[(i_33557452 + 3)]] != undefined))) {
    F.line = 735;
    if (sign_33557451) {
    Temporary1 = -Infinity;
    }
    else {
    Temporary1 = Infinity;
    }
    
    number_33557449[number_33557449_Idx] = Temporary1;
    F.line = 736;
    result_33557450 = (i_33557452 + 3);
    break BeforeRet;
    }
    
    }
    
    }
    
    F.line = 737;
    result_33557450 = 0;
    break BeforeRet;
    }
    
    F.line = 739;
    var buf_33557471 = [];
    if (sign_33557451) {
    F.line = 742;
    addChar(buf_33557471, 45);;
    }
    
    Label2: {
      F.line = 748;
        Label3: while (true) {
        if (!(ConstSet8[s_33557448[i_33557452]] != undefined)) break Label3;
          F.line = 749;
          addChar(buf_33557471, s_33557448[i_33557452]);;
          F.line = 750;
          i_33557452 += 1;
          Label4: {
            F.line = 751;
              Label5: while (true) {
              if (!(s_33557448[i_33557452] == 95)) break Label5;
                F.line = 747;
                i_33557452 += 1;
              }
          };
        }
    };
    if ((s_33557448[i_33557452] == 46)) {
    F.line = 744;
    addChar(buf_33557471, s_33557448[i_33557452]);;
    F.line = 753;
    i_33557452 += 1;
    Label6: {
      F.line = 754;
        Label7: while (true) {
        if (!(ConstSet9[s_33557448[i_33557452]] != undefined)) break Label7;
          F.line = 744;
          addChar(buf_33557471, s_33557448[i_33557452]);;
          F.line = 755;
          i_33557452 += 1;
          Label8: {
            F.line = 756;
              Label9: while (true) {
              if (!(s_33557448[i_33557452] == 95)) break Label9;
                F.line = 747;
                i_33557452 += 1;
              }
          };
        }
    };
    }
    
    if (((buf_33557471).length == (sign_33557451 ? 1 : 0))) {
    F.line = 758;
    result_33557450 = 0;
    break BeforeRet;
    }
    
    if ((ConstSet10[s_33557448[i_33557452]] != undefined)) {
    F.line = 744;
    addChar(buf_33557471, s_33557448[i_33557452]);;
    F.line = 760;
    i_33557452 += 1;
    if ((s_33557448[i_33557452] == 43)) {
    F.line = 761;
    i_33557452 += 1;
    }
    else {
    if ((s_33557448[i_33557452] == 45)) {
    F.line = 744;
    addChar(buf_33557471, s_33557448[i_33557452]);;
    F.line = 762;
    i_33557452 += 1;
    }
    }
    if (!((ConstSet11[s_33557448[i_33557452]] != undefined))) {
    F.line = 763;
    result_33557450 = 0;
    break BeforeRet;
    }
    
    Label10: {
      F.line = 764;
        Label11: while (true) {
        if (!(ConstSet12[s_33557448[i_33557452]] != undefined)) break Label11;
          F.line = 744;
          addChar(buf_33557471, s_33557448[i_33557452]);;
          F.line = 765;
          i_33557452 += 1;
          Label12: {
            F.line = 766;
              Label13: while (true) {
              if (!(s_33557448[i_33557452] == 95)) break Label13;
                F.line = 747;
                i_33557452 += 1;
              }
          };
        }
    };
    }
    
    F.line = 767;
    number_33557449[number_33557449_Idx] = parseFloatNative_33557428(buf_33557471);
    F.line = 768;
    result_33557450 = i_33557452;
  };
  framePtr = F.prev;

  return result_33557450;

}

function divInt(a_33557062, b_33557063) {
        if (b_33557063 == 0) raiseDivByZero();
    if (b_33557063 == -1 && a_33557062 == 2147483647) raiseOverflow();
    return Math.trunc(a_33557062 / b_33557063);
  

  
}

function mulInt(a_33557058, b_33557059) {
        var result = a_33557058 * b_33557059;
    checkOverflowInt(result);
    return result;
  

  
}

function modInt(a_33557066, b_33557067) {
        if (b_33557067 == 0) raiseDivByZero();
    if (b_33557067 == -1 && a_33557066 == 2147483647) raiseOverflow();
    return Math.trunc(a_33557066 % b_33557067);
  

  
}

function makeNimstrLit(c_33556895) {
      var result = [];
  for (var i = 0; i < c_33556895.length; ++i) {
    result[i] = c_33556895.charCodeAt(i);
  }
  return result;
  

  
}
    var header_536874211 = [[76,73,68], [82,101,115,117,108,116,97,116], [83,118,97,114], [75,111,109,109,101,110,116,97,114]];

function reprEnum(e_33557576, typ_33557577) {
  var result_33557578 = [];

  var F = {procname: "system.reprEnum", prev: framePtr, filename: "/usr/lib/nim/system/reprjs.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "reprjs.nim";
    var tmp_33557579 = false;
    F.line = 31;
    var item_33557580 = typ_33557577.node.sons[e_33557576];
    F.line = 32;
    tmp_33557579 = item_33557580 !== undefined
    if (tmp_33557579) {
    F.line = 34;
    result_33557578 = nimCopy(null, makeNimstrLit(item_33557580.name), NTI33554449);
    }
    else {
      F.line = 36;
      result_33557578 = nimCopy(null, (HEX24_369098760(e_33557576) || []).concat([32,40,105,110,118,97,108,105,100,32,100,97,116,97,33,41] || []), NTI33554449);
    }
    
  framePtr = F.prev;

  return result_33557578;

}
            var codes_536870942 = [[], [], [101,110,100,97,115,116,32,101,110,32,112,111,115,105,116,105,118,32,114,101,97,107,116,105,111,110], [108,195,165,103,32,68,78,65,32,107,111,110,99], [104,195,182,103,32,68,78,65,32,107,111,110,99], [82,72,68,32,62,32,71,65,80,68,72]];

function absInt(a_33557098) {
    var Temporary1;

  var result_33557099 = 0;

    if ((a_33557098 < 0)) {
    Temporary1 = (a_33557098 * (-1));
    }
    else {
    Temporary1 = a_33557098;
    }
    
    result_33557099 = Temporary1;

  return result_33557099;

}
    var unitWeights_754974870 = new BigInt64Array([1n, 1000n, 1000000n, 1000000000n, 60000000000n, 3600000000000n, 86400000000000n, 604800000000000n]);

function divInt64(a_33557084, b_33557085) {
        if (b_33557085 == 0n) raiseDivByZero();
    if (b_33557085 == -1n && a_33557084 == 9223372036854775807n) raiseOverflow();
    return a_33557084 / b_33557085;
  

  
}

function negInt(a_33557092) {
  var result_33557093 = 0;

    result_33557093 = (a_33557092 * (-1));

  return result_33557093;

}
    var f2_536872908 = {patterns: [24, 13, 1, 37, 1, 95, 9, 11, 17], formatStr: [121,121,121,121,77,77,100,100,39,95,39,72,72,109,109,115,115]};
    var DefaultLocale_754976617 = {MMM: [[74,97,110], [70,101,98], [77,97,114], [65,112,114], [77,97,121], [74,117,110], [74,117,108], [65,117,103], [83,101,112], [79,99,116], [78,111,118], [68,101,99]], MMMM: [[74,97,110,117,97,114,121], [70,101,98,114,117,97,114,121], [77,97,114,99,104], [65,112,114,105,108], [77,97,121], [74,117,110,101], [74,117,108,121], [65,117,103,117,115,116], [83,101,112,116,101,109,98,101,114], [79,99,116,111,98,101,114], [78,111,118,101,109,98,101,114], [68,101,99,101,109,98,101,114]], ddd: [[77,111,110], [84,117,101], [87,101,100], [84,104,117], [70,114,105], [83,97,116], [83,117,110]], dddd: [[77,111,110,100,97,121], [84,117,101,115,100,97,121], [87,101,100,110,101,115,100,97,121], [84,104,117,114,115,100,97,121], [70,114,105,100,97,121], [83,97,116,117,114,100,97,121], [83,117,110,100,97,121]]};

function modInt64(a_33557088, b_33557089) {
        if (b_33557089 == 0n) raiseDivByZero();
    if (b_33557089 == -1n && a_33557088 == 9223372036854775807n) raiseOverflow();
    return a_33557088 % b_33557089;
  

  
}

function addInt64(a_33557072, b_33557073) {
        var result = a_33557072 + b_33557073;
    checkOverflowInt64(result);
    return result;
  

  
}

function subInt64(a_33557076, b_33557077) {
        var result = a_33557076 - b_33557077;
    checkOverflowInt64(result);
    return result;
  

  
}
    var daysUntilMonthLeap_754975004 = new Int32Array([0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335]);
      var daysUntilMonth_754975003 = new Int32Array([0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]);
var F = {procname: "module parseutils", prev: framePtr, filename: "/usr/lib/nim/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module parseutils", prev: framePtr, filename: "/usr/lib/nim/pure/parseutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "/usr/lib/nim/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module macros", prev: framePtr, filename: "/usr/lib/nim/core/macros.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/usr/lib/nim/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops_utils", prev: framePtr, filename: "/usr/lib/nim/std/private/bitops_utils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/usr/lib/nim/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module countbits_impl", prev: framePtr, filename: "/usr/lib/nim/system/countbits_impl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/usr/lib/nim/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module bitops", prev: framePtr, filename: "/usr/lib/nim/pure/bitops.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/usr/lib/nim/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module fenv", prev: framePtr, filename: "/usr/lib/nim/pure/fenv.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/usr/lib/nim/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module math", prev: framePtr, filename: "/usr/lib/nim/pure/math.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/usr/lib/nim/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module algorithm", prev: framePtr, filename: "/usr/lib/nim/pure/algorithm.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/usr/lib/nim/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module typetraits", prev: framePtr, filename: "/usr/lib/nim/pure/typetraits.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/usr/lib/nim/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module enumutils", prev: framePtr, filename: "/usr/lib/nim/std/enumutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/usr/lib/nim/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strbasics", prev: framePtr, filename: "/usr/lib/nim/std/strbasics.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/usr/lib/nim/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module unicode", prev: framePtr, filename: "/usr/lib/nim/pure/unicode.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/usr/lib/nim/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strimpl", prev: framePtr, filename: "/usr/lib/nim/std/private/strimpl.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module strutils", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module base64", prev: framePtr, filename: "/usr/lib/nim/pure/base64.nim", line: 0};
framePtr = F;
F.line = 70;
F.filename = "base64.nim";
var cb64_687865860 = new Uint8Array([65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47]);
F.line = 71;
var cb64safe_687865861 = new Uint8Array([65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 95]);
framePtr = F.prev;
var F = {procname: "module base64", prev: framePtr, filename: "/usr/lib/nim/pure/base64.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module htmlgen", prev: framePtr, filename: "/usr/lib/nim/pure/htmlgen.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module htmlgen", prev: framePtr, filename: "/usr/lib/nim/pure/htmlgen.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module dom", prev: framePtr, filename: "/usr/lib/nim/js/dom.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module dom", prev: framePtr, filename: "/usr/lib/nim/js/dom.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "/usr/lib/nim/pure/hashes.nim", line: 0};
framePtr = F;
F.line = 218;
F.filename = "hashes.nim";
var objectID_1056964785 = [0];
framePtr = F.prev;
var F = {procname: "module hashes", prev: framePtr, filename: "/usr/lib/nim/pure/hashes.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module outparams", prev: framePtr, filename: "/usr/lib/nim/std/outparams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module outparams", prev: framePtr, filename: "/usr/lib/nim/std/outparams.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "/usr/lib/nim/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module tables", prev: framePtr, filename: "/usr/lib/nim/pure/collections/tables.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module options", prev: framePtr, filename: "/usr/lib/nim/pure/options.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module options", prev: framePtr, filename: "/usr/lib/nim/pure/options.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jscore", prev: framePtr, filename: "/usr/lib/nim/js/jscore.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module jscore", prev: framePtr, filename: "/usr/lib/nim/js/jscore.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module times", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
framePtr = F;
F.line = 1371;
F.filename = "times.nim";
if (globalThis.utcInstance_754976373 === undefined) {
  globalThis.utcInstance_754976373 = [null];
}
F.line = 1372;
if (globalThis.localInstance_754976374 === undefined) {
  globalThis.localInstance_754976374 = [null];
}
framePtr = F.prev;
var F = {procname: "module times", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "/usr/lib/nim/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module sequtils", prev: framePtr, filename: "/usr/lib/nim/pure/collections/sequtils.nim", line: 0};
framePtr = F;
framePtr = F.prev;

function add_33556373(x_33556374, x_33556374_Idx, y_33556375) {
          if (x_33556374[x_33556374_Idx] === null) { x_33556374[x_33556374_Idx] = []; }
      var off = x_33556374[x_33556374_Idx].length;
      x_33556374[x_33556374_Idx].length += y_33556375.length;
      for (var i = 0; i < y_33556375.length; ++i) {
        x_33556374[x_33556374_Idx][off+i] = y_33556375.charCodeAt(i);
      }
    

  
}

function isFatPointer_33557259(ti_33557260) {
  var result_33557261 = false;

  BeforeRet: {
    result_33557261 = !((ConstSet1[ti_33557260.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557261;

}

function nimCopyAux(dest_33557272, src_33557273, n_33557274) {
    switch (n_33557274.kind) {
    case 0:
      break;
    case 1:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557274.sons.length; i++) {
      nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i]);
    }
    
      break;
    case 3:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
      for (var i = 0; i < n_33557274.sons.length; ++i) {
        nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i][1]);
      }
    
      break;
    }

  
}

function auxWriteStackTrace_33556508(f_33556509) {
  var result_33556510 = [[]];

    var it_33556518 = f_33556509;
    var i_33556519 = 0;
    var total_33556520 = 0;
    var tempFrames_33556521 = arrayConstr(64, {Field0: null, Field1: 0, Field2: null}, NTI33555835);
    Label1: {
        Label2: while (true) {
        if (!(!((it_33556518 == null)) && (i_33556519 <= 63))) break Label2;
          tempFrames_33556521[i_33556519].Field0 = it_33556518.procname;
          tempFrames_33556521[i_33556519].Field1 = it_33556518.line;
          tempFrames_33556521[i_33556519].Field2 = it_33556518.filename;
          i_33556519 += 1;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    Label3: {
        Label4: while (true) {
        if (!!((it_33556518 == null))) break Label4;
          total_33556520 += 1;
          it_33556518 = it_33556518.prev;
        }
    };
    result_33556510[0] = nimCopy(null, [], NTI33554449);
    if (!((total_33556520 == i_33556519))) {
    result_33556510[0].push.apply(result_33556510[0], [40]);;
    result_33556510[0].push.apply(result_33556510[0], HEX24_369098760((total_33556520 - i_33556519)));;
    result_33556510[0].push.apply(result_33556510[0], [32,99,97,108,108,115,32,111,109,105,116,116,101,100,41,32,46,46,46,10]);;
    }
    
    Label5: {
      var j_33556554 = 0;
      var colontmp__536874536 = 0;
      colontmp__536874536 = (i_33556519 - 1);
      var res_536874537 = colontmp__536874536;
      Label6: {
          Label7: while (true) {
          if (!(0 <= res_536874537)) break Label7;
            j_33556554 = res_536874537;
            result_33556510[0].push.apply(result_33556510[0], cstrToNimstr(tempFrames_33556521[j_33556554].Field2));;
            if ((0 < tempFrames_33556521[j_33556554].Field1)) {
            result_33556510[0].push.apply(result_33556510[0], [40]);;
            addInt_301990129(result_33556510, 0, tempFrames_33556521[j_33556554].Field1);
            if (false) {
            result_33556510[0].push.apply(result_33556510[0], [44,32]);;
            addInt_301990129(result_33556510, 0, 0);
            }
            
            result_33556510[0].push.apply(result_33556510[0], [41]);;
            }
            
            result_33556510[0].push.apply(result_33556510[0], [32,97,116,32]);;
            add_33556373(result_33556510, 0, tempFrames_33556521[j_33556554].Field0);
            result_33556510[0].push.apply(result_33556510[0], [10]);;
            res_536874537 -= 1;
          }
      };
    };

  return result_33556510[0];

}

function rawWriteStackTrace_33556604() {
  var result_33556605 = [];

    if (!((framePtr == null))) {
    result_33556605 = nimCopy(null, ([84,114,97,99,101,98,97,99,107,32,40,109,111,115,116,32,114,101,99,101,110,116,32,99,97,108,108,32,108,97,115,116,41,10] || []).concat(auxWriteStackTrace_33556508(framePtr) || []), NTI33554449);
    }
    else {
      result_33556605 = nimCopy(null, [78,111,32,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,32,97,118,97,105,108,97,98,108,101,10], NTI33554449);
    }
    

  return result_33556605;

}

function newSeq_33556919(len_33556921) {
  var result_33556922 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/usr/lib/nim/system.nim", line: 0};
  framePtr = F;
    F.line = 635;
    F.filename = "system.nim";
    result_33556922 = new Array(len_33556921); for (var i = 0 ; i < len_33556921 ; ++i) { result_33556922[i] = null; }  framePtr = F.prev;

  return result_33556922;

}

function unhandledException(e_33556649) {
    var buf_33556650 = [[]];
    if (!(((e_33556649.message).length == 0))) {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32]);;
    buf_33556650[0].push.apply(buf_33556650[0], e_33556649.message);;
    }
    else {
    buf_33556650[0].push.apply(buf_33556650[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110]);;
    }
    
    buf_33556650[0].push.apply(buf_33556650[0], [32,91]);;
    add_33556373(buf_33556650, 0, e_33556649.name);
    buf_33556650[0].push.apply(buf_33556650[0], [93,10]);;
    buf_33556650[0].push.apply(buf_33556650[0], rawWriteStackTrace_33556604());;
    var cbuf_33556651 = toJSStr(buf_33556650[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556651);
  }
  else {
    throw cbuf_33556651;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: [111,118,101,114,45,32,111,114,32,117,110,100,101,114,102,108,111,119], parent: null, m_type: NTI134217743, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33557048) {
        if (a_33557048 > 2147483647 || a_33557048 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: [118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101], parent: null, m_type: NTI134217751, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_301990090(result_301990092, result_301990092_Idx, x_301990093, start_301990094, n_301990095) {
    var Temporary1;

  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/usr/lib/nim/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 43;
    F.filename = "digitsutils.nim";
    var old_301990096 = (result_301990092[result_301990092_Idx]).length;
    F.line = 44;
    if (result_301990092[result_301990092_Idx].length < (Temporary1 = chckRange(addInt(old_301990096, n_301990095), 0, 2147483647), Temporary1)) { for (var i = result_301990092[result_301990092_Idx].length; i < Temporary1; ++i) result_301990092[result_301990092_Idx].push(0); }
         else {result_301990092[result_301990092_Idx].length = Temporary1; };
    Label2: {
      F.line = 46;
      var iHEX60gensym4_301990110 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536874531 = 0;
      Label3: {
        F.line = 120;
          Label4: while (true) {
          if (!(i_536874531 < n_301990095)) break Label4;
            F.line = 49;
            F.filename = "digitsutils.nim";
            iHEX60gensym4_301990110 = i_536874531;
            F.line = 49;
            result_301990092[result_301990092_Idx][chckIndx(addInt(old_301990096, iHEX60gensym4_301990110), 0, (result_301990092[result_301990092_Idx]).length - 1)] = x_301990093.charCodeAt(chckIndx(addInt(start_301990094, iHEX60gensym4_301990110), 0, (x_301990093).length - 1));
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536874531 = addInt(i_536874531, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function addChars_301990086(result_301990088, result_301990088_Idx, x_301990089) {
  var F = {procname: "addChars.addChars", prev: framePtr, filename: "/usr/lib/nim/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 55;
    F.filename = "digitsutils.nim";
    addChars_301990090(result_301990088, result_301990088_Idx, x_301990089, 0, ((x_301990089) == null ? 0 : (x_301990089).length));
  framePtr = F.prev;

  
}

function addInt_301990111(result_301990112, result_301990112_Idx, x_301990113) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/usr/lib/nim/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 111;
    F.filename = "digitsutils.nim";
    addChars_301990086(result_301990112, result_301990112_Idx, ((x_301990113) + ""));
  framePtr = F.prev;

  
}

function addInt_301990129(result_301990130, result_301990130_Idx, x_301990131) {
  var F = {procname: "digitsutils.addInt", prev: framePtr, filename: "/usr/lib/nim/std/private/digitsutils.nim", line: 0};
  framePtr = F;
    F.line = 115;
    F.filename = "digitsutils.nim";
    addInt_301990111(result_301990130, result_301990130_Idx, BigInt(x_301990131));
  framePtr = F.prev;

  
}

function HEX24_369098760(x_369098761) {
  var result_369098762 = [[]];

  var F = {procname: "dollars.$", prev: framePtr, filename: "/usr/lib/nim/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 18;
    F.filename = "dollars.nim";
    addInt_301990129(result_369098762, 0, x_369098761);
  framePtr = F.prev;

  return result_369098762[0];

}

function raiseIndexError(i_33556812, a_33556813, b_33556814) {
    var Temporary1;

    if ((b_33556814 < a_33556813)) {
    Temporary1 = [105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,44,32,116,104,101,32,99,111,110,116,97,105,110,101,114,32,105,115,32,101,109,112,116,121];
    }
    else {
    Temporary1 = ([105,110,100,101,120,32] || []).concat(HEX24_369098760(i_33556812) || [],[32,110,111,116,32,105,110,32] || [],HEX24_369098760(a_33556813) || [],[32,46,46,32] || [],HEX24_369098760(b_33556814) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554449), parent: null, m_type: NTI134217749, name: null, trace: [], up: null}, "IndexDefect");

  
}

function substr_33558079(s_33558080, first_33558081, last_33558082) {
  var result_33558083 = [];

  var F = {procname: "system.substr", prev: framePtr, filename: "/usr/lib/nim/system.nim", line: 0};
  framePtr = F;
    F.line = 2658;
    F.filename = "system.nim";
    var first_33558084 = nimMax(first_33558081, 0);
    F.line = 2659;
    var L_33558085 = nimMax(addInt(subInt(nimMin(last_33558082, (s_33558080).length - 1), first_33558084), 1), 0);
    F.line = 2660;
    result_33558083 = nimCopy(null, mnewString(chckRange(L_33558085, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 2661;
      var i_33558090 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536870970 = 0;
      F.line = 2661;
      F.filename = "system.nim";
      colontmp__536870970 = subInt(L_33558085, 1);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536870971 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_536870971 <= colontmp__536870970)) break Label3;
            F.line = 2661;
            F.filename = "system.nim";
            i_33558090 = res_536870971;
            F.line = 2661;
            result_33558083[chckIndx(i_33558090, 0, (result_33558083).length - 1)] = s_33558080[chckIndx(addInt(i_33558090, first_33558084), 0, (s_33558080).length - 1)];
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536870971 = addInt(res_536870971, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_33558083;

}

function nsuSplitLines(s_671089323, keepEol_671089324) {
            var Temporary6;

  var result_671089325 = [];

  var F = {procname: "strutils.splitLines", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 417;
    F.filename = "strutils.nim";
    result_671089325 = nimCopy(null, [], NTI671089159);
    Label1: {
      F.line = 418;
      var xHEX60gensym73_671089331 = [];
      F.line = 669;
      var first_536874553 = 0;
      F.line = 670;
      var last_536874554 = 0;
      F.line = 671;
      var eolpos_536874555 = 0;
      Label2: {
        F.line = 672;
          Label3: while (true) {
          if (!true) break Label3;
            Label4: {
              F.line = 673;
                Label5: while (true) {
                if (!((last_536874554 < (s_671089323).length) && !((ConstSet2[s_671089323[chckIndx(last_536874554, 0, (s_671089323).length - 1)]] != undefined)))) break Label5;
                  F.line = 673;
                  last_536874554 = addInt(last_536874554, 1);
                }
            };
            F.line = 675;
            eolpos_536874555 = last_536874554;
            if ((last_536874554 < (s_671089323).length)) {
            if ((s_671089323[chckIndx(last_536874554, 0, (s_671089323).length - 1)] == 10)) {
            F.line = 677;
            last_536874554 = addInt(last_536874554, 1);
            }
            else {
            if ((s_671089323[chckIndx(last_536874554, 0, (s_671089323).length - 1)] == 13)) {
            F.line = 679;
            last_536874554 = addInt(last_536874554, 1);
            if (((last_536874554 < (s_671089323).length) && (s_671089323[chckIndx(last_536874554, 0, (s_671089323).length - 1)] == 10))) {
            F.line = 680;
            last_536874554 = addInt(last_536874554, 1);
            }
            
            }
            }
            }
            
            F.line = 896;
            if (keepEol_671089324) {
            Temporary6 = subInt(last_536874554, 1);
            }
            else {
            Temporary6 = subInt(eolpos_536874555, 1);
            }
            
            xHEX60gensym73_671089331 = substr_33558079(s_671089323, first_536874553, Temporary6);
            F.line = 896;
            var Temporary7 = nimCopy(null, xHEX60gensym73_671089331, NTI33554449);
            result_671089325.push(Temporary7);;
            if ((eolpos_536874555 == last_536874554)) {
            F.line = 686;
            break Label2;
            }
            
            F.line = 688;
            first_536874553 = last_536874554;
          }
      };
    };
  framePtr = F.prev;

  return result_671089325;

}

function nsuSplitChar(s_671089185, sep_671089186, maxsplit_671089187) {
  var result_671089188 = [];

  var F = {procname: "strutils.split", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 417;
    F.filename = "strutils.nim";
    result_671089188 = nimCopy(null, [], NTI671089013);
    Label1: {
      F.line = 418;
      var xHEX60gensym67_671089194 = [];
      F.line = 389;
      var lastHEX60gensym34_536874561 = 0;
      F.line = 390;
      var splitsHEX60gensym34_536874562 = maxsplit_671089187;
      Label2: {
        F.line = 450;
          Label3: while (true) {
          if (!(lastHEX60gensym34_536874561 <= (s_671089185).length)) break Label3;
            F.line = 393;
            var firstHEX60gensym34_536874564 = lastHEX60gensym34_536874561;
            Label4: {
              F.line = 394;
                Label5: while (true) {
                if (!((lastHEX60gensym34_536874561 < (s_671089185).length) && !((s_671089185[chckIndx(lastHEX60gensym34_536874561, 0, (s_671089185).length - 1)] == sep_671089186)))) break Label5;
                  F.line = 395;
                  lastHEX60gensym34_536874561 = addInt(lastHEX60gensym34_536874561, 1);
                }
            };
            if ((splitsHEX60gensym34_536874562 == 0)) {
            F.line = 396;
            lastHEX60gensym34_536874561 = (s_671089185).length;
            }
            
            F.line = 743;
            xHEX60gensym67_671089194 = substr_33558079(s_671089185, firstHEX60gensym34_536874564, subInt(lastHEX60gensym34_536874561, 1));
            F.line = 743;
            var Temporary6 = nimCopy(null, xHEX60gensym67_671089194, NTI33554449);
            result_671089188.push(Temporary6);;
            if ((splitsHEX60gensym34_536874562 == 0)) {
            F.line = 398;
            break Label2;
            }
            
            F.line = 399;
            splitsHEX60gensym34_536874562 = subInt(splitsHEX60gensym34_536874562, 1);
            F.line = 400;
            lastHEX60gensym34_536874561 = addInt(lastHEX60gensym34_536874561, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_671089188;

}

function outputAndRaise_536870945(error_536870946) {
  var F = {procname: "rhd_screen.outputAndRaise", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    F.line = 49;
    F.filename = "rhd_screen.nim";
    document.getElementById("showcontent").innerHTML = toJSStr(([60,98,62,70,101,108,32,118,105,100,32,105,110,108,195,164,115,110,105,110,103,32,97,118,32,102,105,108,101,110,58,32,60,47,98,62] || []).concat(error_536870946 || []));
    F.line = 50;
    raiseException({message: nimCopy(null, error_536870946, NTI33554449), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
  framePtr = F.prev;

  
}

function nsuStrip(s_671091162, leading_671091163, trailing_671091164, chars_671091165) {
  var result_671091166 = [];

  var F = {procname: "strutils.strip", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2917;
    F.filename = "strutils.nim";
    var first_671091167 = 0;
    F.line = 2918;
    var last_671091168 = subInt((s_671091162).length, 1);
    if (leading_671091163) {
    Label1: {
      F.line = 2920;
        Label2: while (true) {
        if (!((first_671091167 <= last_671091168) && (chars_671091165[s_671091162[chckIndx(first_671091167, 0, (s_671091162).length - 1)]] != undefined))) break Label2;
          F.line = 2920;
          first_671091167 = addInt(first_671091167, 1);
        }
    };
    }
    
    if (trailing_671091164) {
    Label3: {
      F.line = 2922;
        Label4: while (true) {
        if (!((first_671091167 <= last_671091168) && (chars_671091165[s_671091162[chckIndx(last_671091168, 0, (s_671091162).length - 1)]] != undefined))) break Label4;
          F.line = 2922;
          last_671091168 = subInt(last_671091168, 1);
        }
    };
    }
    
    F.line = 2923;
    result_671091166 = nimCopy(null, substr_33558079(s_671091162, first_671091167, last_671091168), NTI33554449);
  framePtr = F.prev;

  return result_671091166;

}

function find_956301366(a_956301369, item_956301370) {
  var result_956301371 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "/usr/lib/nim/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1665;
    F.filename = "system.nim";
    result_956301371 = 0;
    Label1: {
      F.line = 1666;
      var i_956301375 = [];
      F.line = 13;
      F.filename = "iterators.nim";
      var i_536874570 = 0;
      Label2: {
        F.line = 14;
          Label3: while (true) {
          if (!(i_536874570 < (a_956301369).length)) break Label3;
            F.line = 1666;
            F.filename = "system.nim";
            i_956301375 = a_956301369[chckIndx(i_536874570, 0, (a_956301369).length - 1)];
            if (eqStrings(i_956301375, item_956301370)) {
            F.line = 1667;
            break BeforeRet;
            }
            
            F.line = 1666;
            result_956301371 = addInt(result_956301371, 1);
            F.line = 16;
            F.filename = "iterators.nim";
            i_536874570 = addInt(i_536874570, 1);
          }
      };
    };
    F.line = 1669;
    F.filename = "system.nim";
    result_956301371 = (-1);
  };
  framePtr = F.prev;

  return result_956301371;

}

function contains_956301361(a_956301363, item_956301364) {
  var result_956301365 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/usr/lib/nim/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1683;
    F.filename = "system.nim";
    result_956301365 = (0 <= find_956301366(a_956301363, item_956301364));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_956301365;

}

function parseFloatNative_33557428(a_33557429) {
  var result_33557430 = 0.0;

  var F = {procname: "system.parseFloatNative", prev: framePtr, filename: "/usr/lib/nim/system/jssys.nim", line: 0};
  framePtr = F;
    F.line = 707;
    F.filename = "jssys.nim";
    var str_33557431 = [];
    Label1: {
      F.line = 708;
      var x_33557445 = 0;
      F.line = 23;
      F.filename = "iterators.nim";
      var i_536874580 = 0;
      Label2: {
        F.line = 24;
          Label3: while (true) {
          if (!(i_536874580 < (a_33557429).length)) break Label3;
            F.line = 708;
            F.filename = "jssys.nim";
            x_33557445 = a_33557429[i_536874580];
            F.line = 708;
            addChar(str_33557431, x_33557445);;
            F.line = 26;
            F.filename = "iterators.nim";
            i_536874580 += 1;
          }
      };
    };
    F.line = 711;
    F.filename = "jssys.nim";
    var cstr_33557446 = toJSStr(str_33557431);
    F.line = 713;
      result_33557430 = Number(cstr_33557446);
  
  framePtr = F.prev;

  return result_33557430;

}

function npuParseFloat(s_822084150, number_822084151, number_822084151_Idx) {
  var result_822084152 = 0;

  var F = {procname: "parseutils.parseFloat", prev: framePtr, filename: "/usr/lib/nim/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 590;
    F.filename = "parseutils.nim";
    var bf_822084153 = [0.0];
    F.line = 591;
    result_822084152 = nimParseBiggestFloat(s_822084150, bf_822084153, 0);
    if (!((result_822084152 == 0))) {
    F.line = 593;
    number_822084151[number_822084151_Idx] = bf_822084153[0];
    }
    
  framePtr = F.prev;

  return result_822084152;

}

function parseFloat_822084552(s_822084553, number_822084554, number_822084554_Idx, start_822084555) {
  var result_822084556 = 0;

  var F = {procname: "parseutils.parseFloat", prev: framePtr, filename: "/usr/lib/nim/pure/parseutils.nim", line: 0};
  framePtr = F;
    F.line = 1055;
    F.filename = "parseutils.nim";
    result_822084556 = npuParseFloat((s_822084553.slice(start_822084555, (s_822084553).length - 1 + 1)), number_822084554, number_822084554_Idx);
  framePtr = F.prev;

  return result_822084556;

}

function nsuParseFloat(s_671089517) {
  var result_671089518 = [0.0];

  var F = {procname: "strutils.parseFloat", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1176;
    F.filename = "strutils.nim";
    result_671089518[0] = 0.0;
    F.line = 1177;
    var L_671089519 = parseFloat_822084552(s_671089517, result_671089518, 0, 0);
    if ((!((L_671089519 == (s_671089517).length)) || (L_671089519 == 0))) {
    F.line = 1179;
    raiseException({message: ([105,110,118,97,108,105,100,32,102,108,111,97,116,58,32] || []).concat(s_671089517 || []), parent: null, m_type: NTI134217746, name: null, trace: [], up: null}, "ValueError");
    }
    
  framePtr = F.prev;

  return result_671089518[0];

}

function raiseDivByZero() {
    raiseException({message: [100,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111], parent: null, m_type: NTI134217742, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}

function imul_1056964920(a_1056964921, b_1056964922) {
  var result_1056964923 = 0;

  var F = {procname: "hashes.imul", prev: framePtr, filename: "/usr/lib/nim/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 293;
    F.filename = "hashes.nim";
    var mask_1056964924 = 65535;
    F.line = 295;
    var aHi_1056964929 = (((a_1056964921 >>> 16) & mask_1056964924) >>> 0);
    F.line = 296;
    var aLo_1056964930 = ((a_1056964921 & mask_1056964924) >>> 0);
    F.line = 297;
    var bHi_1056964935 = (((b_1056964922 >>> 16) & mask_1056964924) >>> 0);
    F.line = 298;
    var bLo_1056964936 = ((b_1056964922 & mask_1056964924) >>> 0);
    F.line = 299;
    result_1056964923 = ((((aLo_1056964930 * bLo_1056964936) >>> 0) + ((((((aHi_1056964929 * bLo_1056964936) >>> 0) + ((aLo_1056964930 * bHi_1056964935) >>> 0)) >>> 0) << 16) >>> 0)) >>> 0);
  framePtr = F.prev;

  return result_1056964923;

}

function rotl32_1056964941(x_1056964942, r_1056964943) {
  var result_1056964944 = 0;

  var F = {procname: "hashes.rotl32", prev: framePtr, filename: "/usr/lib/nim/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 304;
    F.filename = "hashes.nim";
    result_1056964944 = ((((x_1056964942 << r_1056964943) >>> 0) | (x_1056964942 >>> subInt(32, r_1056964943))) >>> 0);
  framePtr = F.prev;

  return result_1056964944;

}

function murmurHash_1056964953(x_1056964954) {
  var result_1056964955 = 0;

  var F = {procname: "hashes.murmurHash", prev: framePtr, filename: "/usr/lib/nim/pure/hashes.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 315;
    F.filename = "hashes.nim";
    var size_1056964964 = (x_1056964954).length;
    F.line = 316;
    var stepSize_1056964965 = 4;
    F.line = 317;
    var n_1056964966 = divInt(size_1056964964, stepSize_1056964965);
    F.line = 319;
    var h1_1056964967 = 0;
    F.line = 320;
    var i_1056964968 = 0;
    Label1: {
      F.line = 323;
        Label2: while (true) {
        if (!(i_1056964968 < mulInt(n_1056964966, stepSize_1056964965))) break Label2;
          F.line = 324;
          var k1_1056964969 = 0;
          F.line = 326;
          var j_1056964970 = stepSize_1056964965;
          Label3: {
            F.line = 327;
              Label4: while (true) {
              if (!(0 < j_1056964970)) break Label4;
                F.line = 328;
                j_1056964970 = subInt(j_1056964970, 1);
                F.line = 329;
                k1_1056964969 = ((((k1_1056964969 << 8) >>> 0) | x_1056964954[chckIndx(addInt(i_1056964968, j_1056964970), 0, (x_1056964954).length - 1)]) >>> 0);
              }
          };
          F.line = 332;
          i_1056964968 = addInt(i_1056964968, stepSize_1056964965);
          F.line = 334;
          k1_1056964969 = imul_1056964920(k1_1056964969, 3432918353);
          F.line = 335;
          k1_1056964969 = rotl32_1056964941(k1_1056964969, 15);
          F.line = 336;
          k1_1056964969 = imul_1056964920(k1_1056964969, 461845907);
          F.line = 338;
          h1_1056964967 = ((h1_1056964967 ^ k1_1056964969) >>> 0);
          F.line = 339;
          h1_1056964967 = rotl32_1056964941(h1_1056964967, 13);
          F.line = 340;
          h1_1056964967 = ((((h1_1056964967 * 5) >>> 0) + 3864292196) >>> 0);
        }
    };
    F.line = 343;
    var k1_1056964989 = 0;
    F.line = 344;
    var rem_1056964990 = modInt(size_1056964964, stepSize_1056964965);
    Label5: {
      F.line = 345;
        Label6: while (true) {
        if (!(0 < rem_1056964990)) break Label6;
          F.line = 346;
          rem_1056964990 = subInt(rem_1056964990, 1);
          F.line = 347;
          k1_1056964989 = ((((k1_1056964989 << 8) >>> 0) | x_1056964954[chckIndx(addInt(i_1056964968, rem_1056964990), 0, (x_1056964954).length - 1)]) >>> 0);
        }
    };
    F.line = 348;
    k1_1056964989 = imul_1056964920(k1_1056964989, 3432918353);
    F.line = 349;
    k1_1056964989 = rotl32_1056964941(k1_1056964989, 15);
    F.line = 350;
    k1_1056964989 = imul_1056964920(k1_1056964989, 461845907);
    F.line = 351;
    h1_1056964967 = ((h1_1056964967 ^ k1_1056964989) >>> 0);
    F.line = 354;
    h1_1056964967 = ((h1_1056964967 ^ size_1056964964) >>> 0);
    F.line = 355;
    h1_1056964967 = ((h1_1056964967 ^ (h1_1056964967 >>> 16)) >>> 0);
    F.line = 356;
    h1_1056964967 = imul_1056964920(h1_1056964967, 2246822507);
    F.line = 357;
    h1_1056964967 = ((h1_1056964967 ^ (h1_1056964967 >>> 13)) >>> 0);
    F.line = 358;
    h1_1056964967 = imul_1056964920(h1_1056964967, 3266489909);
    F.line = 359;
    h1_1056964967 = ((h1_1056964967 ^ (h1_1056964967 >>> 16)) >>> 0);
    F.line = 360;
    result_1056964955 = Number(BigInt.asIntN(32, BigInt(h1_1056964967)));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_1056964955;

}

function hash_1056965055(x_1056965056) {
  var result_1056965057 = 0;

  var F = {procname: "hashes.hash", prev: framePtr, filename: "/usr/lib/nim/pure/hashes.nim", line: 0};
  framePtr = F;
    F.line = 386;
    F.filename = "hashes.nim";
    result_1056965057 = murmurHash_1056964953((x_1056965056.slice(0, (x_1056965056).length - 1 + 1)));
  framePtr = F.prev;

  return result_1056965057;

}

function isFilled_738197535(hcode_738197536) {
  var result_738197537 = false;

  var F = {procname: "tables.isFilled", prev: framePtr, filename: "/usr/lib/nim/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 27;
    F.filename = "hashcommon.nim";
    result_738197537 = !((hcode_738197536 == 0));
  framePtr = F.prev;

  return result_738197537;

}

function nextTry_738197538(h_738197539, maxHash_738197540) {
  var result_738197541 = 0;

  var F = {procname: "tables.nextTry", prev: framePtr, filename: "/usr/lib/nim/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 30;
    F.filename = "hashcommon.nim";
    result_738197541 = (addInt(h_738197539, 1) & maxHash_738197540);
  framePtr = F.prev;

  return result_738197541;

}

function rawGet_536871160(t_536871163, key_536871164, hc_536871165, hc_536871165_Idx) {
  var result_536871166 = 0;

  var F = {procname: "rawGet.rawGet", prev: framePtr, filename: "/usr/lib/nim/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 59;
    F.filename = "hashcommon.nim";
    hc_536871165[hc_536871165_Idx] = hash_1056965055(key_536871164);
    if ((hc_536871165[hc_536871165_Idx] == 0)) {
    F.line = 61;
    hc_536871165[hc_536871165_Idx] = 314159265;
    }
    
    if (((t_536871163.data).length == 0)) {
    F.line = 43;
    result_536871166 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_536871218 = (hc_536871165[hc_536871165_Idx] & (t_536871163.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_738197535(t_536871163.data[chckIndx(h_536871218, 0, (t_536871163.data).length - 1)].Field0)) break Label2;
          if (((t_536871163.data[chckIndx(h_536871218, 0, (t_536871163.data).length - 1)].Field0 == hc_536871165[hc_536871165_Idx]) && eqStrings(t_536871163.data[chckIndx(h_536871218, 0, (t_536871163.data).length - 1)].Field1, key_536871164))) {
          F.line = 51;
          result_536871166 = h_536871218;
          break BeforeRet;
          }
          
          F.line = 52;
          h_536871218 = nextTry_738197538(h_536871218, (t_536871163.data).length - 1);
        }
    };
    F.line = 53;
    result_536871166 = subInt((-1), h_536871218);
  };
  framePtr = F.prev;

  return result_536871166;

}

function hasKey_536871153(t_536871156, key_536871157) {
  var result_536871158 = false;

  var F = {procname: "hasKey.hasKey", prev: framePtr, filename: "/usr/lib/nim/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 372;
    F.filename = "tables.nim";
    var hc_536871159 = [0];
    F.line = 373;
    result_536871158 = (0 <= rawGet_536871160(t_536871156, key_536871157, hc_536871159, 0));
  framePtr = F.prev;

  return result_536871158;

}

function contains_536871147(t_536871150, key_536871151) {
  var result_536871152 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/usr/lib/nim/pure/collections/tables.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 383;
    F.filename = "tables.nim";
    result_536871152 = hasKey_536871153(t_536871150, key_536871151);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_536871152;

}

function nextPowerOfTwo_805306615(x_805306616) {
  var result_805306617 = 0;

    result_805306617 = (x_805306616 - 1);
    result_805306617 = (result_805306617 | (result_805306617 >> 16));
    result_805306617 = (result_805306617 | (result_805306617 >> 8));
    result_805306617 = (result_805306617 | (result_805306617 >> 4));
    result_805306617 = (result_805306617 | (result_805306617 >> 2));
    result_805306617 = (result_805306617 | (result_805306617 >> 1));
    result_805306617 += (1 + ((x_805306616 <= 0) ? 1 : 0));

  return result_805306617;

}

function slotsNeeded_738197546(count_738197547) {
  var result_738197548 = 0;

  var F = {procname: "tables.slotsNeeded", prev: framePtr, filename: "/usr/lib/nim/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    F.line = 39;
    F.filename = "hashcommon.nim";
    result_738197548 = nextPowerOfTwo_805306615(addInt(divInt(mulInt(count_738197547, 3), 2), 4));
  framePtr = F.prev;

  return result_738197548;

}

function sysFatal_268435501(message_268435504) {
  var F = {procname: "sysFatal.sysFatal", prev: framePtr, filename: "/usr/lib/nim/system/fatal.nim", line: 0};
  framePtr = F;
    F.line = 53;
    F.filename = "fatal.nim";
    raiseException({message: nimCopy(null, message_268435504, NTI33554449), m_type: NTI134217745, parent: null, name: null, trace: [], up: null}, "AssertionDefect");
  framePtr = F.prev;

  
}

function raiseAssert_268435499(msg_268435500) {
  var F = {procname: "assertions.raiseAssert", prev: framePtr, filename: "/usr/lib/nim/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 36;
    F.filename = "assertions.nim";
    sysFatal_268435501(msg_268435500);
  framePtr = F.prev;

  
}

function failedAssertImpl_268435541(msg_268435542) {
  var F = {procname: "assertions.failedAssertImpl", prev: framePtr, filename: "/usr/lib/nim/std/assertions.nim", line: 0};
  framePtr = F;
    F.line = 41;
    F.filename = "assertions.nim";
    raiseAssert_268435499(msg_268435542);
  framePtr = F.prev;

  
}

function mustRehash_536871633(t_536871635) {
  var result_536871636 = false;

  var F = {procname: "mustRehash.mustRehash", prev: framePtr, filename: "/usr/lib/nim/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
    if (!((t_536871635.counter < (t_536871635.data).length))) {
    F.line = 34;
    F.filename = "hashcommon.nim";
    failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/pure/collections/hashcommon.nim(34, 9) `\x0At.counter < t.dataLen` "));
    }
    
    F.line = 35;
    result_536871636 = ((mulInt((t_536871635.data).length, 2) < mulInt(t_536871635.counter, 3)) || (subInt((t_536871635.data).length, t_536871635.counter) < 4));
  framePtr = F.prev;

  return result_536871636;

}

function rawInsert_536872082(t_536872086, data_536872087, data_536872087_Idx, key_536872088, val_536872089, hc_536872090, h_536872091) {
  var F = {procname: "rawInsert.rawInsert", prev: framePtr, filename: "/usr/lib/nim/pure/collections/tableimpl.nim", line: 0};
  framePtr = F;
    F.line = 25;
    F.filename = "tableimpl.nim";
    data_536872087[data_536872087_Idx][chckIndx(h_536872091, 0, (data_536872087[data_536872087_Idx]).length - 1)].Field1 = nimCopy(null, key_536872088, NTI33554449);
    F.line = 26;
    data_536872087[data_536872087_Idx][chckIndx(h_536872091, 0, (data_536872087[data_536872087_Idx]).length - 1)].Field2 = nimCopy(data_536872087[data_536872087_Idx][chckIndx(h_536872091, 0, (data_536872087[data_536872087_Idx]).length - 1)].Field2, val_536872089, NTI536870916);
    F.line = 27;
    data_536872087[data_536872087_Idx][chckIndx(h_536872091, 0, (data_536872087[data_536872087_Idx]).length - 1)].Field0 = hc_536872090;
  framePtr = F.prev;

  
}

function enlarge_536871788(t_536871791) {
  var F = {procname: "enlarge.enlarge", prev: framePtr, filename: "/usr/lib/nim/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 250;
    F.filename = "tables.nim";
    var n_536871794 = [];
    F.line = 251;
    n_536871794 = new Array(chckRange(mulInt((t_536871791.data).length, 2), 0, 2147483647)); for (var i = 0 ; i < chckRange(mulInt((t_536871791.data).length, 2), 0, 2147483647) ; ++i) { n_536871794[i] = {Field0: 0, Field1: [], Field2: ({sampleId: [], rhdCts: [], gapdhCts: []})}; }    F.line = 252;
    var Temporary1 = t_536871791.data; t_536871791.data = n_536871794; n_536871794 = Temporary1;    Label2: {
      F.line = 253;
      var i_536871858 = 0;
      F.line = 43;
      F.filename = "iterators_1.nim";
      var colontmp__536874588 = 0;
      F.line = 253;
      F.filename = "tables.nim";
      colontmp__536874588 = (n_536871794).length - 1;
      F.line = 65;
      F.filename = "iterators_1.nim";
      var res_536874590 = 0;
      Label3: {
        F.line = 66;
          Label4: while (true) {
          if (!(res_536874590 <= colontmp__536874588)) break Label4;
            F.line = 253;
            F.filename = "tables.nim";
            i_536871858 = res_536874590;
            F.line = 254;
            var eh_536871912 = n_536871794[chckIndx(i_536871858, 0, (n_536871794).length - 1)].Field0;
            if (isFilled_738197535(eh_536871912)) {
            F.line = 256;
            var j_536871916 = (eh_536871912 & (t_536871791.data).length - 1);
            Label5: {
              F.line = 257;
                Label6: while (true) {
                if (!isFilled_738197535(t_536871791.data[chckIndx(j_536871916, 0, (t_536871791.data).length - 1)].Field0)) break Label6;
                  F.line = 258;
                  j_536871916 = nextTry_738197538(j_536871916, (t_536871791.data).length - 1);
                }
            };
            F.line = 260;
            rawInsert_536872082(t_536871791, t_536871791, "data", n_536871794[chckIndx(i_536871858, 0, (n_536871794).length - 1)].Field1, n_536871794[chckIndx(i_536871858, 0, (n_536871794).length - 1)].Field2, eh_536871912, j_536871916);
            }
            
            F.line = 68;
            F.filename = "iterators_1.nim";
            res_536874590 = addInt(res_536874590, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function rawGetKnownHC_536872269(t_536872272, key_536872273, hc_536872274) {
  var result_536872275 = 0;

  var F = {procname: "rawGetKnownHC.rawGetKnownHC", prev: framePtr, filename: "/usr/lib/nim/pure/collections/hashcommon.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (((t_536872272.data).length == 0)) {
    F.line = 43;
    F.filename = "hashcommon.nim";
    result_536872275 = (-1);
    break BeforeRet;
    }
    
    F.line = 44;
    var h_536872326 = (hc_536872274 & (t_536872272.data).length - 1);
    Label1: {
      F.line = 45;
        Label2: while (true) {
        if (!isFilled_738197535(t_536872272.data[chckIndx(h_536872326, 0, (t_536872272.data).length - 1)].Field0)) break Label2;
          if (((t_536872272.data[chckIndx(h_536872326, 0, (t_536872272.data).length - 1)].Field0 == hc_536872274) && eqStrings(t_536872272.data[chckIndx(h_536872326, 0, (t_536872272.data).length - 1)].Field1, key_536872273))) {
          F.line = 51;
          result_536872275 = h_536872326;
          break BeforeRet;
          }
          
          F.line = 52;
          h_536872326 = nextTry_738197538(h_536872326, (t_536872272.data).length - 1);
        }
    };
    F.line = 53;
    result_536872275 = subInt((-1), h_536872326);
  };
  framePtr = F.prev;

  return result_536872275;

}

function HEX5BHEX5DHEX3D_536871460(t_536871463, key_536871464, val_536871465) {
  var F = {procname: "[]=.[]=", prev: framePtr, filename: "/usr/lib/nim/pure/collections/tables.nim", line: 0};
  framePtr = F;
    if (((t_536871463.data).length == 0)) {
    F.line = 165;
    F.filename = "tableimpl.nim";
    var correctSizeHEX60gensym9_536871514 = slotsNeeded_738197546(32);
    F.line = 169;
    t_536871463.counter = 0;
    F.line = 170;
    t_536871463.data = new Array(chckRange(correctSizeHEX60gensym9_536871514, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym9_536871514, 0, 2147483647) ; ++i) { t_536871463.data[i] = {Field0: 0, Field1: [], Field2: ({sampleId: [], rhdCts: [], gapdhCts: []})}; }    }
    
    F.line = 59;
    var hc_536871519 = [0];
    F.line = 60;
    var index_536871526 = rawGet_536871160(t_536871463, key_536871464, hc_536871519, 0);
    if ((0 <= index_536871526)) {
    F.line = 61;
    t_536871463.data[chckIndx(index_536871526, 0, (t_536871463.data).length - 1)].Field2 = nimCopy(t_536871463.data[chckIndx(index_536871526, 0, (t_536871463.data).length - 1)].Field2, val_536871465, NTI536870916);
    }
    else {
      if (((t_536871463.data).length == 0)) {
      F.line = 165;
      var correctSizeHEX60gensym12_536871628 = slotsNeeded_738197546(32);
      F.line = 169;
      t_536871463.counter = 0;
      F.line = 170;
      t_536871463.data = new Array(chckRange(correctSizeHEX60gensym12_536871628, 0, 2147483647)); for (var i = 0 ; i < chckRange(correctSizeHEX60gensym12_536871628, 0, 2147483647) ; ++i) { t_536871463.data[i] = {Field0: 0, Field1: [], Field2: ({sampleId: [], rhdCts: [], gapdhCts: []})}; }      }
      
      if (mustRehash_536871633(t_536871463)) {
      F.line = 51;
      enlarge_536871788(t_536871463);
      F.line = 52;
      index_536871526 = rawGetKnownHC_536872269(t_536871463, key_536871464, hc_536871519[0]);
      }
      
      F.line = 53;
      index_536871526 = subInt((-1), index_536871526);
      F.line = 54;
      rawInsert_536872082(t_536871463, t_536871463, "data", key_536871464, val_536871465, hc_536871519[0], index_536871526);
      F.line = 62;
      t_536871463.counter = addInt(t_536871463.counter, 1);
    }
    
  framePtr = F.prev;

  
}

function raiseKeyError_536872627(key_536872629) {
  var F = {procname: "raiseKeyError.raiseKeyError", prev: framePtr, filename: "/usr/lib/nim/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 235;
    F.filename = "tables.nim";
    raiseException({message: ([107,101,121,32,110,111,116,32,102,111,117,110,100,58,32] || []).concat(key_536872629 || []), parent: null, m_type: NTI134217747, name: null, trace: [], up: null}, "KeyError");
  framePtr = F.prev;

  
}

function HEX5BHEX5D_536872560(t_536872563, key_536872564) {
  var result_536872565 = null;

  var F = {procname: "[].[]", prev: framePtr, filename: "/usr/lib/nim/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 243;
    F.filename = "tables.nim";
    var hcHEX60gensym22_536872566 = [0];
    F.line = 244;
    var indexHEX60gensym22_536872573 = rawGet_536871160(t_536872563, key_536872564, hcHEX60gensym22_536872566, 0);
    if ((0 <= indexHEX60gensym22_536872573)) {
    F.line = 245;
    result_536872565 = t_536872563.data[chckIndx(indexHEX60gensym22_536872573, 0, (t_536872563.data).length - 1)].Field2;
    }
    else {
      F.line = 247;
    raiseKeyError_536872627(key_536872564);
    }
    
  framePtr = F.prev;

  return result_536872565;

}

function parseExportFile_536870996(contents_536870997) {
              var Temporary5;

  var result_536871005 = [({data: [], counter: 0})];

  var F = {procname: "rhd_screen.parseExportFile", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 57;
      F.filename = "rhd_screen.nim";
      var i_536871046 = 0;
      F.line = 57;
      var line_536871047 = [];
      F.line = 172;
      F.filename = "iterators.nim";
      var colontmp__536874543 = [];
      F.line = 57;
      F.filename = "rhd_screen.nim";
      colontmp__536874543 = nsuSplitLines(contents_536870997, false);
      F.line = 174;
      F.filename = "iterators.nim";
      var i_536874545 = 0;
      F.line = 175;
      var L_536874546 = (colontmp__536874543).length;
      Label2: {
        F.line = 176;
          Label3: while (true) {
          if (!(i_536874545 < L_536874546)) break Label3;
            F.line = 57;
            F.filename = "rhd_screen.nim";
            var colontmp__536874549 = nimCopy(null, {Field0: i_536874545, Field1: nimCopy(null, colontmp__536874543[chckIndx(i_536874545, 0, (colontmp__536874543).length - 1)], NTI33554449)}, NTI536870973);
            F.line = 57;
            i_536871046 = colontmp__536874549["Field0"];
            F.line = 57;
            line_536871047 = colontmp__536874549["Field1"];
            Label4: {
              if (((line_536871047).length == 0)) {
              F.line = 59;
              break Label4;
              }
              
              if ((line_536871047[chckIndx(0, 0, (line_536871047).length - 1)] == 35)) {
              F.line = 63;
              rawEcho(line_536871047);
              F.line = 64;
              break Label4;
              }
              
              F.line = 66;
              var fields_536871048 = nsuSplitChar(line_536871047, 44, (-1));
              if (eqStrings(fields_536871048[chckIndx(0, 0, (fields_536871048).length - 1)], [34,87,101,108,108,32,80,111,115,105,116,105,111,110,34])) {
              F.line = 70;
              break Label4;
              }
              
              if (!(((fields_536871048).length == 4))) {
              F.line = 74;
              outputAndRaise_536870945(([102,101,108,32,97,110,116,97,108,32,102,195,164,108,116,32,40] || []).concat(HEX24_369098760((fields_536871048).length) || [],[41,32,112,195,165,32,114,97,100,32] || [],HEX24_369098760(i_536871046) || [],[58,32] || [],line_536871047 || []));
              }
              
              F.line = 78;
              var sampleId_536871055 = nsuStrip(fields_536871048[chckIndx(1, 0, (fields_536871048).length - 1)], true, true, ConstSet3);
              F.line = 79;
              var gene_536871056 = nsuStrip(fields_536871048[chckIndx(2, 0, (fields_536871048).length - 1)], true, true, ConstSet4);
              if (!(contains_956301361([[82,72,68], [71,65,80,68,72]], gene_536871056))) {
              F.line = 82;
              outputAndRaise_536870945(([111,107,195,164,110,100,32,103,101,110,32,34] || []).concat(gene_536871056 || [],[34,32,112,195,165,32,114,97,100,32] || [],HEX24_369098760(i_536871046) || [],[58,32] || [],line_536871047 || []));
              }
              
              F.line = 85;
              var ctRaw_536871103 = nsuStrip(fields_536871048[chckIndx(3, 0, (fields_536871048).length - 1)], true, true, ConstSet5);
              F.line = 86;
              if (eqStrings(ctRaw_536871103, [85,110,100,101,116,101,114,109,105,110,101,100])) {
              Temporary5 = NaN;
              }
              else {
              Temporary5 = nsuParseFloat(ctRaw_536871103);
              }
              
              var ct_536871104 = Temporary5;
              if (!(contains_536871147(result_536871005[0], sampleId_536871055))) {
              F.line = 89;
              HEX5BHEX5DHEX3D_536871460(result_536871005[0], sampleId_536871055, {sampleId: nimCopy(null, sampleId_536871055, NTI33554449), rhdCts: [], gapdhCts: []});
              }
              
              F.line = 92;
              switch (toJSStr(gene_536871056)) {
              case "RHD":
                F.line = 94;
                HEX5BHEX5D_536872560(result_536871005[0], sampleId_536871055).rhdCts.push(ct_536871104);;
                break;
              case "GAPDH":
                F.line = 96;
                HEX5BHEX5D_536872560(result_536871005[0], sampleId_536871055).gapdhCts.push(ct_536871104);;
                break;
              default: 
                F.line = 98;
                outputAndRaise_536870945(([105,110,116,101,114,110,116,32,102,101,108,58,32,111,107,195,164,110,100,32,103,101,110,32,34] || []).concat(gene_536871056 || [],[34,32,112,195,165,32,114,97,100,32] || [],HEX24_369098760(i_536871046) || [],[58,32] || [],line_536871047 || []));
                break;
              }
            };
            F.line = 178;
            F.filename = "iterators.nim";
            i_536874545 = addInt(i_536874545, 1);
            if (!(((colontmp__536874543).length == L_536874546))) {
            F.line = 179;
            failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/system/iterators.nim(179, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    if (!(contains_536871147(result_536871005[0], [78,84,67]))) {
    F.line = 102;
    F.filename = "rhd_screen.nim";
    outputAndRaise_536870945(makeNimstrLit("f\xC3\xB6rv\xC3\xA4ntades en negativ kontroll \"NTC\" men det fanns ingen i filen"));
    }
    else {
    if (!(contains_536871147(result_536871005[0], [80,67]))) {
    F.line = 104;
    outputAndRaise_536870945(makeNimstrLit("f\xC3\xB6rv\xC3\xA4ntades en positiv kontroll \"PC\" men det fanns ingen i filen"));
    }
    }
  framePtr = F.prev;

  return result_536871005[0];

}

function sum_536874107(x_536874109) {
  var result_536874110 = 0.0;

  var F = {procname: "sum.sum", prev: framePtr, filename: "/usr/lib/nim/pure/math.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 1132;
      F.filename = "math.nim";
      var i_536874124 = 0.0;
      F.line = 13;
      F.filename = "iterators.nim";
      var i_536874627 = 0;
      Label2: {
        F.line = 14;
          Label3: while (true) {
          if (!(i_536874627 < (x_536874109).length)) break Label3;
            F.line = 1132;
            F.filename = "math.nim";
            i_536874124 = x_536874109[chckIndx(i_536874627, 0, (x_536874109).length - 1)];
            F.line = 1132;
            result_536874110 = (result_536874110 + i_536874124);
            F.line = 16;
            F.filename = "iterators.nim";
            i_536874627 = addInt(i_536874627, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_536874110;

}

function HEX5BHEX5D_536873910(t_536873913, key_536873914) {
  var result_536873915 = ({sampleId: [], rhdCts: [], gapdhCts: []});

  var F = {procname: "[].[]", prev: framePtr, filename: "/usr/lib/nim/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 243;
    F.filename = "tables.nim";
    var hcHEX60gensym20_536873916 = [0];
    F.line = 244;
    var indexHEX60gensym20_536873923 = rawGet_536871160(t_536873913, key_536873914, hcHEX60gensym20_536873916, 0);
    if ((0 <= indexHEX60gensym20_536873923)) {
    F.line = 245;
    result_536873915 = nimCopy(result_536873915, t_536873913.data[chckIndx(indexHEX60gensym20_536873923, 0, (t_536873913.data).length - 1)].Field2, NTI536870916);
    }
    else {
      F.line = 247;
    raiseKeyError_536872627(key_536873914);
    }
    
  framePtr = F.prev;

  return result_536873915;

}

function nimFloatToString_385876121(a_385876122) {
  var result_385876123 = null;

  var F = {procname: "formatfloat.nimFloatToString", prev: framePtr, filename: "/usr/lib/nim/std/formatfloat.nim", line: 0};
  framePtr = F;
    F.line = 106;
    F.filename = "formatfloat.nim";
        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_385876122))
      result_385876123 = a_385876122 === 0 && 1 / a_385876122 < 0 ? "-0.0" : a_385876122+".0"
    else {
      result_385876123 = a_385876122+""
      if(nimOnlyDigitsOrMinus(result_385876123)){
        result_385876123 = a_385876122+".0"
      }
    }
  
  framePtr = F.prev;

  return result_385876123;

}

function addFloat_33557563(result_33557565, result_33557565_Idx, x_33557566) {
  var F = {procname: "addFloat.addFloat", prev: framePtr, filename: "/usr/lib/nim/std/formatfloat.nim", line: 0};
  framePtr = F;
    F.line = 136;
    F.filename = "formatfloat.nim";
    add_33556373(result_33557565, result_33557565_Idx, nimFloatToString_385876121(x_33557566));
  framePtr = F.prev;

  
}

function HEX24_33557559(x_33557561) {
  var result_33557562 = [[]];

  var F = {procname: "$.$", prev: framePtr, filename: "/usr/lib/nim/system/dollars.nim", line: 0};
  framePtr = F;
    F.line = 14;
    F.filename = "dollars.nim";
    addFloat_33557563(result_33557562, 0, x_33557561);
  framePtr = F.prev;

  return result_33557562[0];

}

function verifyNegativeControl_536874028(ntcsample_536874029) {
  var F = {procname: "rhd_screen.verifyNegativeControl", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 194;
      F.filename = "rhd_screen.nim";
      var res_536874033 = 0.0;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536874631 = 0;
      F.line = 242;
      var L_536874632 = (ntcsample_536874029.rhdCts).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536874631 < L_536874632)) break Label3;
            F.line = 194;
            F.filename = "rhd_screen.nim";
            res_536874033 = ntcsample_536874029.rhdCts[chckIndx(i_536874631, 0, (ntcsample_536874029.rhdCts).length - 1)];
            if (!(isNaN(res_536874033))) {
            F.line = 196;
            outputAndRaise_536870945(([110,101,103,97,116,105,118,32,82,72,68,45,107,111,110,116,114,111,108,108,32,195,164,114,32,112,111,115,105,116,105,118,58,32] || []).concat(HEX24_33557559(res_536874033) || []));
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_536874631 = addInt(i_536874631, 1);
            if (!(((ntcsample_536874029.rhdCts).length == L_536874632))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    Label4: {
      F.line = 197;
      F.filename = "rhd_screen.nim";
      var res_536874040 = 0.0;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536874635 = 0;
      F.line = 242;
      var L_536874636 = (ntcsample_536874029.gapdhCts).length;
      Label5: {
        F.line = 243;
          Label6: while (true) {
          if (!(i_536874635 < L_536874636)) break Label6;
            F.line = 197;
            F.filename = "rhd_screen.nim";
            res_536874040 = ntcsample_536874029.gapdhCts[chckIndx(i_536874635, 0, (ntcsample_536874029.gapdhCts).length - 1)];
            if (!(isNaN(res_536874040))) {
            F.line = 199;
            outputAndRaise_536870945(([110,101,103,97,116,105,118,32,71,65,80,68,72,45,107,111,110,116,114,111,108,108,32,195,164,114,32,112,111,115,105,116,105,118,58,32] || []).concat(HEX24_33557559(res_536874040) || []));
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_536874635 = addInt(i_536874635, 1);
            if (!(((ntcsample_536874029.gapdhCts).length == L_536874636))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
  framePtr = F.prev;

  
}

function newSeq_503317028(len_503317030) {
  var result_503317031 = [];

  var F = {procname: "newSeq.newSeq", prev: framePtr, filename: "/usr/lib/nim/system.nim", line: 0};
  framePtr = F;
    F.line = 635;
    F.filename = "system.nim";
    result_503317031 = new Array(len_503317030); for (var i = 0 ; i < len_503317030 ; ++i) { result_503317031[i] = []; }  framePtr = F.prev;

  return result_503317031;

}

function HEX2A_771751944(x_771751945, order_771751946) {
  var result_771751947 = 0;

  var F = {procname: "algorithm.*", prev: framePtr, filename: "/usr/lib/nim/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 68;
    F.filename = "algorithm.nim";
    var y_771751952 = subInt(order_771751946, 1);
    F.line = 69;
    result_771751947 = subInt((x_771751945 ^ y_771751952), y_771751952);
  framePtr = F.prev;

  return result_771751947;

}

function mergeAlt_536873792(a_536873794, b_536873795, lo_536873796, m_536873797, hi_536873798, cmp_536873801, order_536873802) {
  var F = {procname: "mergeAlt.mergeAlt", prev: framePtr, filename: "/usr/lib/nim/pure/algorithm.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((HEX2A_771751944(cmp_536873801(a_536873794[chckIndx(m_536873797, 0, (a_536873794).length - 1)], a_536873794[chckIndx(addInt(m_536873797, 1), 0, (a_536873794).length - 1)]), order_536873802) <= 0)) {
    F.line = 335;
    F.filename = "algorithm.nim";
    break BeforeRet;
    }
    
    F.line = 336;
    var j_536873803 = lo_536873796;
    if (!((j_536873803 <= m_536873797))) {
    F.line = 338;
    failedAssertImpl_268435541([47,117,115,114,47,108,105,98,47,110,105,109,47,112,117,114,101,47,97,108,103,111,114,105,116,104,109,46,110,105,109,40,51,51,56,44,32,51,41,32,96,106,32,60,61,32,109,96,32]);
    }
    
    F.line = 340;
    var bb_536873809 = 0;
    Label1: {
      F.line = 341;
        Label2: while (true) {
        if (!(j_536873803 <= m_536873797)) break Label2;
          F.line = 342;
          b_536873795[chckIndx(bb_536873809, 0, (b_536873795).length - 1)] = a_536873794[chckIndx(j_536873803, 0, (a_536873794).length - 1)];
          F.line = 343;
          bb_536873809 = addInt(bb_536873809, 1);
          F.line = 344;
          j_536873803 = addInt(j_536873803, 1);
        }
    };
    F.line = 348;
    var i_536873820 = 0;
    F.line = 349;
    var k_536873821 = lo_536873796;
    Label3: {
      F.line = 351;
        Label4: while (true) {
        if (!((k_536873821 < j_536873803) && (j_536873803 <= hi_536873798))) break Label4;
          if ((HEX2A_771751944(cmp_536873801(b_536873795[chckIndx(i_536873820, 0, (b_536873795).length - 1)], a_536873794[chckIndx(j_536873803, 0, (a_536873794).length - 1)]), order_536873802) <= 0)) {
          F.line = 353;
          a_536873794[chckIndx(k_536873821, 0, (a_536873794).length - 1)] = b_536873795[chckIndx(i_536873820, 0, (b_536873795).length - 1)];
          F.line = 354;
          i_536873820 = addInt(i_536873820, 1);
          }
          else {
            F.line = 356;
            a_536873794[chckIndx(k_536873821, 0, (a_536873794).length - 1)] = a_536873794[chckIndx(j_536873803, 0, (a_536873794).length - 1)];
            F.line = 357;
            j_536873803 = addInt(j_536873803, 1);
          }
          
          F.line = 358;
          k_536873821 = addInt(k_536873821, 1);
        }
    };
    Label5: {
      F.line = 361;
        Label6: while (true) {
        if (!(k_536873821 < j_536873803)) break Label6;
          F.line = 362;
          a_536873794[chckIndx(k_536873821, 0, (a_536873794).length - 1)] = b_536873795[chckIndx(i_536873820, 0, (b_536873795).length - 1)];
          F.line = 363;
          k_536873821 = addInt(k_536873821, 1);
          F.line = 364;
          i_536873820 = addInt(i_536873820, 1);
        }
    };
  };
  framePtr = F.prev;

  
}

function sort_536873775(a_536873777, cmp_536873780, order_536873781) {
  var F = {procname: "sort.sort", prev: framePtr, filename: "/usr/lib/nim/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 411;
    F.filename = "algorithm.nim";
    var n_536873785 = (a_536873777).length;
    F.line = 412;
    var b_536873789 = newSeq_503317028(chckRange(divInt(n_536873785, 2), 0, 2147483647));
    F.line = 413;
    var s_536873790 = 1;
    Label1: {
      F.line = 414;
        Label2: while (true) {
        if (!(s_536873790 < n_536873785)) break Label2;
          F.line = 415;
          var m_536873791 = subInt(subInt(n_536873785, 1), s_536873790);
          Label3: {
            F.line = 416;
              Label4: while (true) {
              if (!(0 <= m_536873791)) break Label4;
                F.line = 417;
                mergeAlt_536873792(a_536873777, b_536873789, nimMax(addInt(subInt(m_536873791, s_536873790), 1), 0), m_536873791, addInt(m_536873791, s_536873790), cmp_536873780, order_536873781);
                F.line = 418;
                m_536873791 = subInt(m_536873791, mulInt(s_536873790, 2));
              }
          };
          F.line = 419;
          s_536873790 = mulInt(s_536873790, 2);
        }
    };
  framePtr = F.prev;

  
}

function sorted_536873753(a_536873755, cmp_536873758, order_536873759) {
  var result_536873760 = [];

  var F = {procname: "sorted.sorted", prev: framePtr, filename: "/usr/lib/nim/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 448;
    F.filename = "algorithm.nim";
    result_536873760 = nimCopy(null, newSeq_503317028(chckRange((a_536873755).length, 0, 2147483647)), NTI503316800);
    Label1: {
      F.line = 449;
      var i_536873774 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536874639 = 0;
      F.line = 449;
      F.filename = "algorithm.nim";
      colontmp__536874639 = (a_536873755).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536874640 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_536874640 <= colontmp__536874639)) break Label3;
            F.line = 449;
            F.filename = "algorithm.nim";
            i_536873774 = res_536874640;
            F.line = 449;
            result_536873760[chckIndx(i_536873774, 0, (result_536873760).length - 1)] = nimCopy(null, a_536873755[chckIndx(i_536873774, 0, (a_536873755).length - 1)], NTI33554449);
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536874640 = addInt(res_536874640, 1);
          }
      };
    };
    F.line = 451;
    F.filename = "algorithm.nim";
    sort_536873775(result_536873760, cmp_536873758, order_536873759);
  framePtr = F.prev;

  return result_536873760;

}

function len_536873568(t_536873571) {
  var result_536873572 = 0;

  var F = {procname: "len.len", prev: framePtr, filename: "/usr/lib/nim/pure/collections/tables.nim", line: 0};
  framePtr = F;
    F.line = 486;
    F.filename = "tables.nim";
    result_536873572 = t_536873571.counter;
  framePtr = F.prev;

  return result_536873572;

}

function cmpStrings(a_33557033, b_33557034) {
        if (a_33557033 == b_33557034) return 0;
    if (!a_33557033) return -1;
    if (!b_33557034) return 1;
    for (var i = 0; i < a_33557033.length && i < b_33557034.length; i++) {
      var result = a_33557033[i] - b_33557034[i];
      if (result != 0) return result;
    }
    return a_33557033.length - b_33557034.length;
  

  
}

function cmp_33555881(x_33555882, y_33555883) {
  var result_33557039 = 0;

    result_33557039 = cmpStrings(x_33555882, y_33555883);

  return result_33557039;

}

function HEX5BHEX5D_671089919(s_671089922, x_671089923) {
  var result_671089924 = [];

  var F = {procname: "[].[]", prev: framePtr, filename: "/usr/lib/nim/system/indices.nim", line: 0};
  framePtr = F;
    F.line = 83;
    F.filename = "indices.nim";
    var a_671089926 = x_671089923.a;
    F.line = 84;
    var L_671089928 = addInt(subInt(x_671089923.b, a_671089926), 1);
    F.line = 85;
    result_671089924 = nimCopy(null, mnewString(chckRange(L_671089928, 0, 2147483647)), NTI33554449);
    Label1: {
      F.line = 86;
      var i_671089933 = 0;
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536874648 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_536874648 < L_671089928)) break Label3;
            F.line = 86;
            F.filename = "indices.nim";
            i_671089933 = i_536874648;
            F.line = 86;
            result_671089924[chckIndx(i_671089933, 0, (result_671089924).length - 1)] = s_671089922[chckIndx(addInt(i_671089933, a_671089926), 0, (s_671089922).length - 1)];
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536874648 = addInt(i_536874648, 1);
          }
      };
    };
  framePtr = F.prev;

  return result_671089924;

}

function HEX2EHEX2E_1006633008(a_1006633011, b_1006633012) {
  var result_1006633013 = ({a: 0, b: 0});

  var F = {procname: ".....", prev: framePtr, filename: "/usr/lib/nim/system.nim", line: 0};
  framePtr = F;
    F.line = 416;
    F.filename = "system.nim";
    result_1006633013 = nimCopy(result_1006633013, {a: a_1006633011, b: b_1006633012}, NTI838860869);
  framePtr = F.prev;

  return result_1006633013;

}

function cmpSampleId_536873238(s1_536873239, s2_536873240) {
  var result_536873241 = 0;

  var F = {procname: "rhd_screen.cmpSampleId", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    F.line = 181;
    F.filename = "rhd_screen.nim";
    result_536873241 = cmp_33555881(HEX5BHEX5D_671089919(s1_536873239, HEX2EHEX2E_1006633008(1, subInt((s1_536873239).length, 1))), HEX5BHEX5D_671089919(s2_536873240, HEX2EHEX2E_1006633008(1, subInt((s2_536873240).length, 1))));
  framePtr = F.prev;

  return result_536873241;

}

function checkPosNeg_536872910(sample_536872911, rawSample_536872912) {
  var F = {procname: "rhd_screen.checkPosNeg", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    F.line = 124;
    F.filename = "rhd_screen.nim";
    var npos_536872913 = 0;
    Label1: {
      F.line = 125;
      var res_536872936 = 0.0;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536874651 = 0;
      F.line = 242;
      var L_536874652 = (rawSample_536872912.rhdCts).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536874651 < L_536874652)) break Label3;
            F.line = 125;
            F.filename = "rhd_screen.nim";
            res_536872936 = rawSample_536872912.rhdCts[chckIndx(i_536874651, 0, (rawSample_536872912.rhdCts).length - 1)];
            if ((isNaN(res_536872936) || (45.0 <= res_536872936))) {
            F.line = 127;
            sample_536872911.pattern.push.apply(sample_536872911.pattern, [45,32]);;
            }
            else {
            if ((res_536872936 < 45.0)) {
            F.line = 129;
            npos_536872913 = addInt(npos_536872913, 1);
            F.line = 130;
            sample_536872911.pattern.push.apply(sample_536872911.pattern, [43,32]);;
            }
            }
            F.line = 245;
            F.filename = "iterators.nim";
            i_536874651 = addInt(i_536874651, 1);
            if (!(((rawSample_536872912.rhdCts).length == L_536874652))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 131;
    F.filename = "rhd_screen.nim";
    sample_536872911.pattern = nimCopy(null, HEX5BHEX5D_671089919(sample_536872911.pattern, HEX2EHEX2E_1006633008(0, 4)), NTI33554449);
    if ((npos_536872913 == 0)) {
    F.line = 133;
    sample_536872911.status = 1;
    }
    else {
    if ((npos_536872913 == 1)) {
    F.line = 135;
    sample_536872911.status = 2;
    }
    else {
    if ((1 < npos_536872913)) {
    F.line = 137;
    sample_536872911.status = 0;
    }
    }}
  framePtr = F.prev;

  
}

function find_536873050(a_536873053, item_536873054) {
  var result_536873055 = 0;

  var F = {procname: "find.find", prev: framePtr, filename: "/usr/lib/nim/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1665;
    F.filename = "system.nim";
    result_536873055 = 0;
    Label1: {
      F.line = 1666;
      var i_536873069 = 0;
      F.line = 13;
      F.filename = "iterators.nim";
      var i_536874660 = 0;
      Label2: {
        F.line = 14;
          Label3: while (true) {
          if (!(i_536874660 < (a_536873053).length)) break Label3;
            F.line = 1666;
            F.filename = "system.nim";
            i_536873069 = a_536873053[chckIndx(i_536874660, 0, (a_536873053).length - 1)];
            if ((i_536873069 == item_536873054)) {
            F.line = 1667;
            break BeforeRet;
            }
            
            F.line = 1666;
            result_536873055 = addInt(result_536873055, 1);
            F.line = 16;
            F.filename = "iterators.nim";
            i_536874660 = addInt(i_536874660, 1);
          }
      };
    };
    F.line = 1669;
    F.filename = "system.nim";
    result_536873055 = (-1);
  };
  framePtr = F.prev;

  return result_536873055;

}

function contains_536873045(a_536873047, item_536873048) {
  var result_536873049 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/usr/lib/nim/system.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1683;
    F.filename = "system.nim";
    result_536873049 = (0 <= find_536873050(a_536873047, item_536873048));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_536873049;

}

function checkDnaIsLow_536872998(sample_536872999, rawSample_536873000, gapdhMax_536873001) {
  var result_536873002 = false;

  var F = {procname: "rhd_screen.checkDnaIsLow", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (contains_536873045(new Uint8Array([1, 2]), sample_536872999.status)) {
    Label1: {
      F.line = 142;
      F.filename = "rhd_screen.nim";
      var ct_536873099 = 0.0;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536874655 = 0;
      F.line = 242;
      var L_536874656 = (rawSample_536873000.gapdhCts).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536874655 < L_536874656)) break Label3;
            F.line = 142;
            F.filename = "rhd_screen.nim";
            ct_536873099 = rawSample_536873000.gapdhCts[chckIndx(i_536874655, 0, (rawSample_536873000.gapdhCts).length - 1)];
            if ((gapdhMax_536873001 < ct_536873099)) {
            F.line = 144;
            sample_536872999.status = 3;
            F.line = 145;
            result_536873002 = true;
            break BeforeRet;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_536874655 = addInt(i_536874655, 1);
            if (!(((rawSample_536873000.gapdhCts).length == L_536874656))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    }
    
  };
  framePtr = F.prev;

  return result_536873002;

}

function checkDnaIsHigh_536873131(sample_536873132, rawSample_536873133, gapdhMin_536873134) {
  var result_536873135 = false;

  var F = {procname: "rhd_screen.checkDnaIsHigh", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if (contains_536873045(new Uint8Array([1, 2]), sample_536873132.status)) {
    Label1: {
      F.line = 150;
      F.filename = "rhd_screen.nim";
      var ct_536873185 = 0.0;
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536874663 = 0;
      F.line = 242;
      var L_536874664 = (rawSample_536873133.gapdhCts).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536874663 < L_536874664)) break Label3;
            F.line = 150;
            F.filename = "rhd_screen.nim";
            ct_536873185 = rawSample_536873133.gapdhCts[chckIndx(i_536874663, 0, (rawSample_536873133.gapdhCts).length - 1)];
            if ((ct_536873185 < gapdhMin_536873134)) {
            F.line = 152;
            sample_536873132.status = 4;
            F.line = 153;
            result_536873135 = true;
            break BeforeRet;
            }
            
            F.line = 245;
            F.filename = "iterators.nim";
            i_536874663 = addInt(i_536874663, 1);
            if (!(((rawSample_536873133.gapdhCts).length == L_536874664))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    }
    
  };
  framePtr = F.prev;

  return result_536873135;

}

function min_536873194(x_536873196) {
  var result_536873197 = 0.0;

    result_536873197 = x_536873196[chckIndx(0, 0, (x_536873196).length - 1)];
    Label1: {
      var i_536873205 = 0;
      var colontmp__536874667 = 0;
      colontmp__536874667 = (x_536873196).length - 1;
      var res_536874668 = 1;
      Label2: {
          Label3: while (true) {
          if (!(res_536874668 <= colontmp__536874667)) break Label3;
            i_536873205 = res_536874668;
            if ((x_536873196[chckIndx(i_536873205, 0, (x_536873196).length - 1)] < result_536873197)) {
            result_536873197 = x_536873196[chckIndx(i_536873205, 0, (x_536873196).length - 1)];
            }
            
            res_536874668 = addInt(res_536874668, 1);
          }
      };
    };

  return result_536873197;

}

function max_536873206(x_536873208) {
  var result_536873209 = 0.0;

    result_536873209 = x_536873208[chckIndx(0, 0, (x_536873208).length - 1)];
    Label1: {
      var i_536873217 = 0;
      var colontmp__536874671 = 0;
      colontmp__536874671 = (x_536873208).length - 1;
      var res_536874672 = 1;
      Label2: {
          Label3: while (true) {
          if (!(res_536874672 <= colontmp__536874671)) break Label3;
            i_536873217 = res_536874672;
            if ((result_536873209 < x_536873208[chckIndx(i_536873217, 0, (x_536873208).length - 1)])) {
            result_536873209 = x_536873208[chckIndx(i_536873217, 0, (x_536873208).length - 1)];
            }
            
            res_536874672 = addInt(res_536874672, 1);
          }
      };
    };

  return result_536873209;

}

function checkRhdHigh_536873186(sample_536873187, rawSample_536873188) {
  var result_536873189 = false;

  var F = {procname: "rhd_screen.checkRhdHigh", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    if ((sample_536873187.status == 0)) {
    if ((min_536873194(rawSample_536873188.rhdCts) < max_536873206(rawSample_536873188.gapdhCts))) {
    F.line = 160;
    F.filename = "rhd_screen.nim";
    sample_536873187.status = 5;
    F.line = 161;
    result_536873189 = true;
    break BeforeRet;
    }
    
    }
    
  };
  framePtr = F.prev;

  return result_536873189;

}

function analyzeSample_536873233(rawSample_536873234, gapdhMin_536873235, gapdhMax_536873236) {
  var result_536873237 = [({sampleId: [], pattern: [], status: 0})];

  var F = {procname: "rhd_screen.analyzeSample", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 165;
    F.filename = "rhd_screen.nim";
    result_536873237[0].sampleId = nimCopy(null, rawSample_536873234.sampleId, NTI33554449);
    F.line = 168;
    checkPosNeg_536872910(result_536873237[0], rawSample_536873234);
    if (checkDnaIsLow_536872998(result_536873237[0], rawSample_536873234, gapdhMax_536873236)) {
    F.line = 172;
    break BeforeRet;
    }
    
    if (checkDnaIsHigh_536873131(result_536873237[0], rawSample_536873234, gapdhMin_536873235)) {
    F.line = 174;
    break BeforeRet;
    }
    
    if (checkRhdHigh_536873186(result_536873237[0], rawSample_536873234)) {
    F.line = 176;
    break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_536873237[0];

}

function analyzeResults_536874044(samples_536874047) {
  var result_536874048 = [];

  var F = {procname: "rhd_screen.analyzeResults", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    F.line = 207;
    F.filename = "rhd_screen.nim";
    var gapdhSum_536874125 = sum_536874107(HEX5BHEX5D_536873910(samples_536874047, [80,67]).gapdhCts);
    F.line = 208;
    var gapdhMean_536874126 = (gapdhSum_536874125 / 2.0);
    F.line = 209;
    var gapdhMin_536874127 = (gapdhMean_536874126 - 1.5);
    F.line = 210;
    var gapdhMax_536874128 = (gapdhMean_536874126 + 6.4);
    F.line = 215;
    verifyNegativeControl_536874028(HEX5BHEX5D_536873910(samples_536874047, [78,84,67]));
    Label1: {
      F.line = 218;
      var sample_536874187 = ({sampleId: [], rhdCts: [], gapdhCts: []});
      F.line = 187;
      F.line = 863;
      F.filename = "sequtils.nim";
      var resultHEX60gensym33_536874611 = [];
      Label2: {
        F.line = 864;
        var xHEX60gensym33_536874613 = [];
        F.line = 738;
        F.filename = "tables.nim";
        var L_536874614 = len_536873568(samples_536874047);
        Label3: {
          F.line = 739;
          var h_536874616 = 0;
          F.line = 75;
          F.filename = "iterators_1.nim";
          var colontmp__536874617 = 0;
          F.line = 739;
          F.filename = "tables.nim";
          colontmp__536874617 = (samples_536874047.data).length - 1;
          F.line = 90;
          F.filename = "iterators_1.nim";
          var res_536874618 = 0;
          Label4: {
            F.line = 91;
              Label5: while (true) {
              if (!(res_536874618 <= colontmp__536874617)) break Label5;
                F.line = 739;
                F.filename = "tables.nim";
                h_536874616 = res_536874618;
                if (isFilled_738197535(samples_536874047.data[chckIndx(h_536874616, 0, (samples_536874047.data).length - 1)].Field0)) {
                F.line = 864;
                F.filename = "sequtils.nim";
                xHEX60gensym33_536874613 = samples_536874047.data[chckIndx(h_536874616, 0, (samples_536874047.data).length - 1)]["Field1"];
                F.line = 864;
                var Temporary6 = nimCopy(null, xHEX60gensym33_536874613, NTI33554449);
                resultHEX60gensym33_536874611.push(Temporary6);;
                if (!((len_536873568(samples_536874047) == L_536874614))) {
                F.line = 742;
                F.filename = "tables.nim";
                failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/pure/collections/tables.nim(742, 13) `len(t) == L` the length of the table changed while iterating over it"));
                }
                
                }
                
                F.line = 93;
                F.filename = "iterators_1.nim";
                res_536874618 = addInt(res_536874618, 1);
              }
          };
        };
      };
      var sampleIds_536874610 = sorted_536873753(resultHEX60gensym33_536874611, cmpSampleId_536873238, 1);
      Label7: {
        F.line = 188;
        F.filename = "rhd_screen.nim";
        var sampleId_536874621 = [];
        F.line = 241;
        F.filename = "iterators.nim";
        var i_536874622 = 0;
        F.line = 242;
        var L_536874623 = (sampleIds_536874610).length;
        Label8: {
          F.line = 243;
            Label9: while (true) {
            if (!(i_536874622 < L_536874623)) break Label9;
              F.line = 188;
              F.filename = "rhd_screen.nim";
              sampleId_536874621 = sampleIds_536874610[chckIndx(i_536874622, 0, (sampleIds_536874610).length - 1)];
              F.line = 218;
              sample_536874187 = nimCopy(sample_536874187, HEX5BHEX5D_536873910(samples_536874047, sampleId_536874621), NTI536870916);
              Label10: {
                if ((eqStrings(sample_536874187.sampleId, [78,84,67]) || eqStrings(sample_536874187.sampleId, [80,67]))) {
                F.line = 221;
                break Label10;
                }
                
                F.line = 222;
                var final_536874188 = analyzeSample_536873233(sample_536874187, gapdhMin_536874127, gapdhMax_536874128);
                F.line = 223;
                var Temporary11 = nimCopy(null, final_536874188, NTI536870917);
                result_536874048.push(Temporary11);;
              };
              F.line = 245;
              F.filename = "iterators.nim";
              i_536874622 = addInt(i_536874622, 1);
              if (!(((sampleIds_536874610).length == L_536874623))) {
              F.line = 246;
              failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        };
      };
    };
  framePtr = F.prev;

  return result_536874048;

}

function nsuJoinSep(a_671090219, sep_671090220) {
  var result_671090221 = [];

  var F = {procname: "strutils.join", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
    if ((0 < (a_671090219).length)) {
    F.line = 1845;
    F.filename = "strutils.nim";
    var L_671090228 = mulInt((sep_671090220).length, subInt((a_671090219).length, 1));
    Label1: {
      F.line = 1846;
      var i_671090236 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536874680 = 0;
      F.line = 1846;
      F.filename = "strutils.nim";
      colontmp__536874680 = (a_671090219).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536874681 = 0;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_536874681 <= colontmp__536874680)) break Label3;
            F.line = 1846;
            F.filename = "strutils.nim";
            i_671090236 = res_536874681;
            F.line = 1846;
            L_671090228 = addInt(L_671090228, (a_671090219[chckIndx(i_671090236, 0, (a_671090219).length - 1)]).length);
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536874681 = addInt(res_536874681, 1);
          }
      };
    };
    F.line = 1847;
    F.filename = "strutils.nim";
    result_671090221 = nimCopy(null, mnewString(0), NTI33554449);
    F.line = 1848;
    result_671090221.push.apply(result_671090221, a_671090219[chckIndx(0, 0, (a_671090219).length - 1)]);;
    Label4: {
      F.line = 1849;
      var i_671090249 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536874684 = 0;
      F.line = 1849;
      F.filename = "strutils.nim";
      colontmp__536874684 = (a_671090219).length - 1;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536874685 = 1;
      Label5: {
        F.line = 91;
          Label6: while (true) {
          if (!(res_536874685 <= colontmp__536874684)) break Label6;
            F.line = 1849;
            F.filename = "strutils.nim";
            i_671090249 = res_536874685;
            F.line = 1849;
            result_671090221.push.apply(result_671090221, sep_671090220);;
            F.line = 1849;
            result_671090221.push.apply(result_671090221, a_671090219[chckIndx(i_671090249, 0, (a_671090219).length - 1)]);;
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536874685 = addInt(res_536874685, 1);
          }
      };
    };
    }
    else {
      F.line = 1853;
      F.filename = "strutils.nim";
      result_671090221 = nimCopy(null, [], NTI33554449);
    }
    
  framePtr = F.prev;

  return result_671090221;

}

function toResultTable_536874212(samples_536874213) {
  var result_536874214 = [];

  var F = {procname: "rhd_screen.toResultTable", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    F.line = 230;
    F.filename = "rhd_screen.nim";
    result_536874214 = nimCopy(null, nsuJoinSep(header_536874211, [9]), NTI33554449);
    F.line = 231;
    result_536874214.push.apply(result_536874214, [10]);;
    Label1: {
      F.line = 232;
      var sample_536874237 = ({sampleId: [], pattern: [], status: 0});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536874676 = 0;
      F.line = 242;
      var L_536874677 = (samples_536874213).length;
      Label2: {
        F.line = 243;
          Label3: while (true) {
          if (!(i_536874676 < L_536874677)) break Label3;
            F.line = 232;
            F.filename = "rhd_screen.nim";
            sample_536874237 = samples_536874213[chckIndx(i_536874676, 0, (samples_536874213).length - 1)];
            F.line = 232;
            result_536874214.push.apply(result_536874214, sample_536874237.sampleId);;
            F.line = 232;
            result_536874214.push.apply(result_536874214, [9]);;
            F.line = 232;
            result_536874214.push.apply(result_536874214, sample_536874237.pattern);;
            F.line = 232;
            result_536874214.push.apply(result_536874214, [9]);;
            F.line = 232;
            result_536874214.push.apply(result_536874214, reprEnum(sample_536874237.status, NTI536870915));;
            F.line = 232;
            result_536874214.push.apply(result_536874214, [9]);;
            F.line = 232;
            result_536874214.push.apply(result_536874214, codes_536870942[chckIndx(sample_536874237.status, 0, (codes_536870942).length - 1)]);;
            F.line = 232;
            result_536874214.push.apply(result_536874214, [10]);;
            F.line = 245;
            F.filename = "iterators.nim";
            i_536874676 = addInt(i_536874676, 1);
            if (!(((samples_536874213).length == L_536874677))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
  framePtr = F.prev;

  return result_536874214;

}

function encode_687865908(s_687865910, safe_687865911) {
      var Temporary2;
      var Temporary3;

  var result_687865912 = [];

  var F = {procname: "encode.encode", prev: framePtr, filename: "/usr/lib/nim/pure/base64.nim", line: 0};
  framePtr = F;
    Label1: {
      F.line = 143;
      F.filename = "base64.nim";
      if (safe_687865911) {
      Temporary2 = cb64safe_687865861;
      }
      else {
      Temporary2 = cb64_687865860;
      }
      
      var lookupTable_687866094 = Temporary2;
      F.line = 85;
      if (result_687865912.length < (Temporary3 = chckRange(addInt(divInt(mulInt((s_687865910).length, 4), 3), 6), 0, 2147483647), Temporary3)) { for (var i = result_687865912.length; i < Temporary3; ++i) result_687865912.push(0); }
         else {result_687865912.length = Temporary3; };
      F.line = 88;
      var paddingHEX60gensym39_687866110 = modInt((s_687865910).length, 3);
      F.line = 89;
      var inputEndsHEX60gensym39_687866114 = subInt((s_687865910).length, paddingHEX60gensym39_687866110);
      F.line = 92;
      var inputIndexHEX60gensym39_687866115 = 0;
      F.line = 93;
      var outputIndexHEX60gensym39_687866116 = 0;
      F.line = 94;
      var nHEX60gensym39_687866117 = 0;
      F.line = 95;
      var bHEX60gensym39_687866118 = 0;
      Label4: {
        F.line = 110;
          Label5: while (true) {
          if (!!((inputIndexHEX60gensym39_687866115 == inputEndsHEX60gensym39_687866114))) break Label5;
            F.line = 98;
            bHEX60gensym39_687866118 = s_687865910[chckIndx(inputIndexHEX60gensym39_687866115, 0, (s_687865910).length - 1)];
            F.line = 111;
            nHEX60gensym39_687866117 = ((bHEX60gensym39_687866118 << 16) >>> 0);
            F.line = 111;
            inputIndexHEX60gensym39_687866115 = addInt(inputIndexHEX60gensym39_687866115, 1);
            F.line = 98;
            bHEX60gensym39_687866118 = s_687865910[chckIndx(inputIndexHEX60gensym39_687866115, 0, (s_687865910).length - 1)];
            F.line = 112;
            nHEX60gensym39_687866117 = ((nHEX60gensym39_687866117 | ((bHEX60gensym39_687866118 << 8) >>> 0)) >>> 0);
            F.line = 112;
            inputIndexHEX60gensym39_687866115 = addInt(inputIndexHEX60gensym39_687866115, 1);
            F.line = 98;
            bHEX60gensym39_687866118 = s_687865910[chckIndx(inputIndexHEX60gensym39_687866115, 0, (s_687865910).length - 1)];
            F.line = 113;
            nHEX60gensym39_687866117 = ((nHEX60gensym39_687866117 | ((bHEX60gensym39_687866118 << 0) >>> 0)) >>> 0);
            F.line = 113;
            inputIndexHEX60gensym39_687866115 = addInt(inputIndexHEX60gensym39_687866115, 1);
            F.line = 103;
            result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = lookupTable_687866094[chckIndx((((nHEX60gensym39_687866117 >>> 18) & 63) >>> 0), 0, (lookupTable_687866094).length - 1)];
            F.line = 114;
            outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
            F.line = 103;
            result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = lookupTable_687866094[chckIndx((((nHEX60gensym39_687866117 >>> 12) & 63) >>> 0), 0, (lookupTable_687866094).length - 1)];
            F.line = 115;
            outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
            F.line = 103;
            result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = lookupTable_687866094[chckIndx((((nHEX60gensym39_687866117 >>> 6) & 63) >>> 0), 0, (lookupTable_687866094).length - 1)];
            F.line = 116;
            outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
            F.line = 103;
            result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = lookupTable_687866094[chckIndx((((nHEX60gensym39_687866117 >>> 0) & 63) >>> 0), 0, (lookupTable_687866094).length - 1)];
            F.line = 117;
            outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
          }
      };
      if ((paddingHEX60gensym39_687866110 == 1)) {
      F.line = 98;
      bHEX60gensym39_687866118 = s_687865910[chckIndx(inputIndexHEX60gensym39_687866115, 0, (s_687865910).length - 1)];
      F.line = 120;
      nHEX60gensym39_687866117 = ((bHEX60gensym39_687866118 << 16) >>> 0);
      F.line = 120;
      inputIndexHEX60gensym39_687866115 = addInt(inputIndexHEX60gensym39_687866115, 1);
      F.line = 103;
      result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = lookupTable_687866094[chckIndx((((nHEX60gensym39_687866117 >>> 18) & 63) >>> 0), 0, (lookupTable_687866094).length - 1)];
      F.line = 121;
      outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
      F.line = 103;
      result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = lookupTable_687866094[chckIndx((((nHEX60gensym39_687866117 >>> 12) & 63) >>> 0), 0, (lookupTable_687866094).length - 1)];
      F.line = 122;
      outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
      F.line = 123;
      result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = 61;
      F.line = 123;
      outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
      F.line = 124;
      result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = 61;
      F.line = 124;
      outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
      }
      else {
      if ((paddingHEX60gensym39_687866110 == 2)) {
      F.line = 98;
      bHEX60gensym39_687866118 = s_687865910[chckIndx(inputIndexHEX60gensym39_687866115, 0, (s_687865910).length - 1)];
      F.line = 127;
      nHEX60gensym39_687866117 = ((bHEX60gensym39_687866118 << 16) >>> 0);
      F.line = 127;
      inputIndexHEX60gensym39_687866115 = addInt(inputIndexHEX60gensym39_687866115, 1);
      F.line = 98;
      bHEX60gensym39_687866118 = s_687865910[chckIndx(inputIndexHEX60gensym39_687866115, 0, (s_687865910).length - 1)];
      F.line = 128;
      nHEX60gensym39_687866117 = ((nHEX60gensym39_687866117 | ((bHEX60gensym39_687866118 << 8) >>> 0)) >>> 0);
      F.line = 128;
      inputIndexHEX60gensym39_687866115 = addInt(inputIndexHEX60gensym39_687866115, 1);
      F.line = 103;
      result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = lookupTable_687866094[chckIndx((((nHEX60gensym39_687866117 >>> 18) & 63) >>> 0), 0, (lookupTable_687866094).length - 1)];
      F.line = 129;
      outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
      F.line = 103;
      result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = lookupTable_687866094[chckIndx((((nHEX60gensym39_687866117 >>> 12) & 63) >>> 0), 0, (lookupTable_687866094).length - 1)];
      F.line = 130;
      outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
      F.line = 103;
      result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = lookupTable_687866094[chckIndx((((nHEX60gensym39_687866117 >>> 6) & 63) >>> 0), 0, (lookupTable_687866094).length - 1)];
      F.line = 131;
      outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
      F.line = 132;
      result_687865912[chckIndx(outputIndexHEX60gensym39_687866116, 0, (result_687865912).length - 1)] = 61;
      F.line = 132;
      outputIndexHEX60gensym39_687866116 = addInt(outputIndexHEX60gensym39_687866116, 1);
      }
      }
      F.line = 134;
      if (result_687865912.length < chckRange(outputIndexHEX60gensym39_687866116, 0, 2147483647)) { for (var i = result_687865912.length; i < chckRange(outputIndexHEX60gensym39_687866116, 0, 2147483647); ++i) result_687865912.push(0); }
         else {result_687865912.length = chckRange(outputIndexHEX60gensym39_687866116, 0, 2147483647); };
    };
  framePtr = F.prev;

  return result_687865912;

}

function toDataUrl_536872891(contents_536872892) {
  var result_536872893 = [];

  var F = {procname: "rhd_screen.toDataUrl", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    F.line = 111;
    F.filename = "rhd_screen.nim";
    result_536872893 = nimCopy(null, ([100,97,116,97,58,116,101,120,116,47,112,108,97,105,110,59,98,97,115,101,54,52,44] || []).concat(encode_687865908(contents_536872892, false) || []), NTI33554449);
  framePtr = F.prev;

  return result_536872893;

}

function nsuEndsWith(s_671090114, suffix_671090115) {
  var result_671090116 = false;

  var F = {procname: "strutils.endsWith", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 65;
    F.filename = "strimpl.nim";
    var suffixLenHEX60gensym153_671090122 = (suffix_671090115).length;
    F.line = 66;
    var sLenHEX60gensym153_671090123 = (s_671090114).length;
    F.line = 67;
    var iHEX60gensym153_671090124 = 0;
    F.line = 68;
    var jHEX60gensym153_671090125 = subInt(sLenHEX60gensym153_671090123, suffixLenHEX60gensym153_671090122);
    Label1: {
      F.line = 69;
        Label2: while (true) {
        if (!((0 <= addInt(iHEX60gensym153_671090124, jHEX60gensym153_671090125)) && (addInt(iHEX60gensym153_671090124, jHEX60gensym153_671090125) < sLenHEX60gensym153_671090123))) break Label2;
          if (!((s_671090114[chckIndx(addInt(iHEX60gensym153_671090124, jHEX60gensym153_671090125), 0, (s_671090114).length - 1)] == suffix_671090115[chckIndx(iHEX60gensym153_671090124, 0, (suffix_671090115).length - 1)]))) {
          F.line = 70;
          result_671090116 = false;
          break BeforeRet;
          }
          
          F.line = 71;
          iHEX60gensym153_671090124 = addInt(iHEX60gensym153_671090124, 1);
        }
    };
    if ((suffixLenHEX60gensym153_671090122 <= iHEX60gensym153_671090124)) {
    F.line = 72;
    result_671090116 = true;
    break BeforeRet;
    }
    
  };
  framePtr = F.prev;

  return result_671090116;

}

function nsuRemoveSuffixString(s_671090186, s_671090186_Idx, suffix_671090187) {
  var F = {procname: "strutils.removeSuffix", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1778;
    F.filename = "strutils.nim";
    var newLen_671090188 = (s_671090186[s_671090186_Idx]).length;
    if (nsuEndsWith(s_671090186[s_671090186_Idx], suffix_671090187)) {
    F.line = 1780;
    newLen_671090188 = subInt(newLen_671090188, (suffix_671090187).length);
    F.line = 1781;
    if (s_671090186[s_671090186_Idx].length < chckRange(newLen_671090188, 0, 2147483647)) { for (var i = s_671090186[s_671090186_Idx].length; i < chckRange(newLen_671090188, 0, 2147483647); ++i) s_671090186[s_671090186_Idx].push(0); }
         else {s_671090186[s_671090186_Idx].length = chckRange(newLen_671090188, 0, 2147483647); };
    }
    
  framePtr = F.prev;

  
}

function monthday_754976075(dt_754976076) {
  var result_754976077 = 0;

  var F = {procname: "times.monthday", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1077;
    F.filename = "times.nim";
    if (!(!((dt_754976076.monthdayZero == 0)))) {
    F.line = 1078;
    failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/pure/times.nim(1078, 28) `dt.monthdayZero != 0` Uninitialized datetime"));
    }
    
    result_754976077 = dt_754976076.monthdayZero;
  framePtr = F.prev;

  return result_754976077;

}

function nsuIntToStr(x_671089488, minchars_671089489) {
  var result_671089490 = [];

  var F = {procname: "strutils.intToStr", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1122;
    F.filename = "strutils.nim";
    result_671089490 = nimCopy(null, HEX24_369098760(absInt(x_671089488)), NTI33554449);
    Label1: {
      F.line = 1123;
      var i_671089495 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536874698 = 0;
      F.line = 1123;
      F.filename = "strutils.nim";
      colontmp__536874698 = subInt(minchars_671089489, (result_671089490).length);
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536874699 = 1;
      Label2: {
        F.line = 91;
          Label3: while (true) {
          if (!(res_536874699 <= colontmp__536874698)) break Label3;
            F.line = 1123;
            F.filename = "strutils.nim";
            i_671089495 = res_536874699;
            F.line = 1123;
            result_671089490 = nimCopy(null, [48].concat(result_671089490 || []), NTI33554449);
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536874699 = addInt(res_536874699, 1);
          }
      };
    };
    if ((x_671089488 < 0)) {
    F.line = 1126;
    F.filename = "strutils.nim";
    result_671089490 = nimCopy(null, [45].concat(result_671089490 || []), NTI33554449);
    }
    
  framePtr = F.prev;

  return result_671089490;

}

function HEX2B_754974742(a_754974743, b_754974744) {
  var result_754974745 = 0;

  var F = {procname: "times.+", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 227;
    F.filename = "times.nim";
    result_754974745 = (a_754974743 + b_754974744);
  framePtr = F.prev;

  return result_754974745;

}

function HEX2D_754974750(a_754974751, b_754974752) {
  var result_754974753 = 0;

  var F = {procname: "times.-", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 231;
    F.filename = "times.nim";
    result_754974753 = (a_754974751 - b_754974752);
  framePtr = F.prev;

  return result_754974753;

}

function getWeeksInIsoYear_754975084(y_754975085) {
    var Temporary1;
    var Temporary2;

  var result_754975086 = 0;

  var F = {procname: "times.getWeeksInIsoYear", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 563;
    F.filename = "times.nim";
    F.line = 569;
    var y_754975087 = y_754975085;
    F.line = 572;
    if ((y_754975087 < 0)) {
    Temporary1 = HEX2B_754974742(400, modInt(y_754975087, 400));
    }
    else {
    Temporary1 = y_754975087;
    }
    
    y_754975087 = Temporary1;
    F.line = 575;
    var p_754975088 = modInt(HEX2B_754974742(HEX2D_754974750(HEX2B_754974742(y_754975087, divInt(y_754975087, 4)), divInt(y_754975087, 100)), divInt(y_754975087, 400)), 7);
    F.line = 576;
    var y1_754975089 = HEX2D_754974750(y_754975087, 1);
    F.line = 577;
    var p1_754975090 = modInt(HEX2B_754974742(HEX2D_754974750(HEX2B_754974742(y1_754975089, divInt(y1_754975089, 4)), divInt(y1_754975089, 100)), divInt(y1_754975089, 400)), 7);
    if (((p_754975088 == 4) || (p1_754975090 == 3))) {
    Temporary2 = 53;
    }
    else {
    Temporary2 = 52;
    }
    
    result_754975086 = Temporary2;
  framePtr = F.prev;

  return result_754975086;

}

function getIsoWeekAndYear_754975126(dt_754975127) {
    var Temporary1;

  var result_754975130 = {Field0: 0, Field1: 0};

  var F = {procname: "times.getIsoWeekAndYear", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 582;
    F.filename = "times.nim";
    F.line = 599;
    var w_754975131 = divInt(HEX2B_754974742(HEX2D_754974750(dt_754975127.yearday, ((dt_754975127.weekday) | 0)), 10), 7);
    if ((w_754975131 < 1)) {
    Temporary1 = {Field0: getWeeksInIsoYear_754975084(HEX2D_754974750(dt_754975127.year, 1)), Field1: HEX2D_754974750(dt_754975127.year, 1)};
    }
    else {
    if ((getWeeksInIsoYear_754975084(dt_754975127.year) < w_754975131)) {
    Temporary1 = {Field0: 1, Field1: HEX2B_754974742(dt_754975127.year, 1)};
    }
    else {
    Temporary1 = {Field0: nimCopy(null, chckRange(w_754975131, 1, 53), NTI754974750), Field1: dt_754975127.year};
    }
    }
    result_754975130 = nimCopy(result_754975130, Temporary1, NTI754975034);
  framePtr = F.prev;

  return result_754975130;

}

function month_754976083(dt_754976084) {
  var result_754976085 = 0;

  var F = {procname: "times.month", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1083;
    F.filename = "times.nim";
    if (!(!((dt_754976084.monthdayZero == 0)))) {
    F.line = 1085;
    failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/pure/times.nim(1085, 28) `dt.monthdayZero != 0` Uninitialized datetime"));
    }
    
    result_754976085 = dt_754976084.monthZero;
  framePtr = F.prev;

  return result_754976085;

}

function HEX2A_754974730(a_754974731, b_754974732) {
  var result_754974733 = 0n;

  var F = {procname: "times.*", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 221;
    F.filename = "times.nim";
    result_754974733 = (a_754974731 * b_754974732);
  framePtr = F.prev;

  return result_754974733;

}

function convert_754975528(unitFrom_754975530, unitTo_754975531, quantity_754975532) {
    var Temporary1;

  var result_754975533 = 0;

  var F = {procname: "convert.convert", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 435;
    F.filename = "times.nim";
    if ((unitFrom_754975530 < unitTo_754975531)) {
    Temporary1 = chckRange(Number(divInt64(BigInt(quantity_754975532), divInt64(unitWeights_754974870[chckIndx(unitTo_754975531, 0, (unitWeights_754974870).length - 1)], unitWeights_754974870[chckIndx(unitFrom_754975530, 0, (unitWeights_754974870).length - 1)]))), 0, 999999999);
    }
    else {
    Temporary1 = chckRange(Number(HEX2A_754974730(divInt64(unitWeights_754974870[chckIndx(unitFrom_754975530, 0, (unitWeights_754974870).length - 1)], unitWeights_754974870[chckIndx(unitTo_754975531, 0, (unitWeights_754974870).length - 1)]), BigInt(quantity_754975532))), 0, 999999999);
    }
    
    result_754975533 = Temporary1;
  framePtr = F.prev;

  return result_754975533;

}

function HEX3DHEX3D_754976314(zone1_754976315, zone2_754976316) {
  var result_754976317 = false;

  var F = {procname: "times.==", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1251;
    F.filename = "times.nim";
    if ((zone1_754976315 == zone2_754976316)) {
    F.line = 1256;
    result_754976317 = true;
    break BeforeRet;
    }
    
    if (((zone1_754976315 == null) || (zone2_754976316 == null))) {
    F.line = 1258;
    result_754976317 = false;
    break BeforeRet;
    }
    
    result_754976317 = eqStrings(zone1_754976315.name, zone2_754976316.name);
  };
  framePtr = F.prev;

  return result_754976317;

}

function formatPattern_754976913(dt_754976914, pattern_754976915, result_754976916, result_754976916_Idx, loc_754976917) {
      var Temporary1;
      var Temporary2;
      var Temporary3;
      var Temporary4;
      var Temporary5;
      var Temporary6;
        var Temporary7;
          var Temporary8;
          var Temporary9;
      var Temporary10;

  var F = {procname: "times.formatPattern", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1790;
    F.filename = "times.nim";
    switch (pattern_754976915) {
    case 0:
      F.line = 1792;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], HEX24_369098760(monthday_754976075(dt_754976914)));;
      break;
    case 1:
      F.line = 1794;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(monthday_754976075(dt_754976914), 2));;
      break;
    case 2:
      F.line = 1796;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], loc_754976917.ddd[chckIndx(dt_754976914.weekday, 0, (loc_754976917.ddd).length - 1)]);;
      break;
    case 3:
      F.line = 1798;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], loc_754976917.dddd[chckIndx(dt_754976914.weekday, 0, (loc_754976917.dddd).length - 1)]);;
      break;
    case 4:
      F.line = 1800;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(modInt(getIsoWeekAndYear_754975126(dt_754976914).Field1, 100), 2));;
      break;
    case 5:
      F.line = 1802;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], HEX24_369098760(getIsoWeekAndYear_754975126(dt_754976914).Field1));;
      break;
    case 6:
      F.line = 1804;
      if ((dt_754976914.hour == 0)) {
      Temporary1 = [49,50];
      }
      else {
      if ((12 < dt_754976914.hour)) {
      Temporary1 = HEX24_369098760(HEX2D_754974750(dt_754976914.hour, 12));
      }
      else {
      Temporary1 = HEX24_369098760(dt_754976914.hour);
      }
      }
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], Temporary1);;
      break;
    case 7:
      F.line = 1810;
      if ((dt_754976914.hour == 0)) {
      Temporary2 = [49,50];
      }
      else {
      if ((12 < dt_754976914.hour)) {
      Temporary2 = nsuIntToStr(HEX2D_754974750(dt_754976914.hour, 12), 2);
      }
      else {
      Temporary2 = nsuIntToStr(dt_754976914.hour, 2);
      }
      }
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], Temporary2);;
      break;
    case 8:
      F.line = 1816;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], HEX24_369098760(dt_754976914.hour));;
      break;
    case 9:
      F.line = 1818;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(dt_754976914.hour, 2));;
      break;
    case 10:
      F.line = 1820;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], HEX24_369098760(dt_754976914.minute));;
      break;
    case 11:
      F.line = 1822;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(dt_754976914.minute, 2));;
      break;
    case 12:
      F.line = 1824;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], HEX24_369098760(month_754976083(dt_754976914)));;
      break;
    case 13:
      F.line = 1826;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(month_754976083(dt_754976914), 2));;
      break;
    case 14:
      F.line = 1828;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], loc_754976917.MMM[chckIndx(month_754976083(dt_754976914), 1, (loc_754976917.MMM).length + (1) - 1) - (1)]);;
      break;
    case 15:
      F.line = 1830;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], loc_754976917.MMMM[chckIndx(month_754976083(dt_754976914), 1, (loc_754976917.MMMM).length + (1) - 1) - (1)]);;
      break;
    case 16:
      F.line = 1832;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], HEX24_369098760(dt_754976914.second));;
      break;
    case 17:
      F.line = 1834;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(dt_754976914.second, 2));;
      break;
    case 18:
      F.line = 1836;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(convert_754975528(0, 2, dt_754976914.nanosecond), 3));;
      break;
    case 19:
      F.line = 1838;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(convert_754975528(0, 1, dt_754976914.nanosecond), 6));;
      break;
    case 20:
      F.line = 1840;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(dt_754976914.nanosecond, 9));;
      break;
    case 21:
      F.line = 1842;
      if ((12 <= dt_754976914.hour)) {
      Temporary3 = [80];
      }
      else {
      Temporary3 = [65];
      }
      
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], Temporary3);;
      break;
    case 22:
      F.line = 1844;
      if ((12 <= dt_754976914.hour)) {
      Temporary4 = [80,77];
      }
      else {
      Temporary4 = [65,77];
      }
      
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], Temporary4);;
      break;
    case 23:
      F.line = 1846;
      if ((dt_754976914.year <= 0)) {
      Temporary5 = HEX2B_754974742(absInt(dt_754976914.year), 1);
      }
      else {
      Temporary5 = dt_754976914.year;
      }
      
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(modInt(Temporary5, 100), 2));;
      break;
    case 24:
      F.line = 1848;
      if ((dt_754976914.year <= 0)) {
      Temporary6 = HEX2B_754974742(absInt(dt_754976914.year), 1);
      }
      else {
      Temporary6 = dt_754976914.year;
      }
      
      var year_754976936 = Temporary6;
      if ((year_754976936 < 10000)) {
      F.line = 1850;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(year_754976936, 4));;
      }
      else {
        F.line = 1852;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], [43].concat(HEX24_369098760(year_754976936) || []));;
      }
      
      break;
    case 25:
      if ((dt_754976914.year < 1)) {
      F.line = 1855;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], HEX24_369098760(HEX2B_754974742(absInt(dt_754976914.year), 1)));;
      }
      else {
        F.line = 1857;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], HEX24_369098760(dt_754976914.year));;
      }
      
      break;
    case 26:
      F.line = 1859;
      var year_754976937 = dt_754976914.year;
      if (((year_754976937 < 10000) || (year_754976937 < 0))) {
      F.line = 1861;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(year_754976937, 4));;
      }
      else {
        F.line = 1863;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], [43].concat(HEX24_369098760(year_754976937) || []));;
      }
      
      break;
    case 27:
      F.line = 1865;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], HEX24_369098760(dt_754976914.year));;
      break;
    case 28:
      F.line = 1867;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], HEX24_369098760(getIsoWeekAndYear_754975126(dt_754976914).Field0));;
      break;
    case 29:
      F.line = 1869;
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(getIsoWeekAndYear_754975126(dt_754976914).Field0, 2));;
      break;
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      if ((!(HEX3DHEX3D_754976314(dt_754976914.timezone, null)) && eqStrings(dt_754976914.timezone.name, [69,116,99,47,85,84,67]))) {
      F.line = 1872;
      addChar(result_754976916[result_754976916_Idx], 90);;
      }
      else {
        F.line = 1874;
        if ((0 <= negInt(dt_754976914.utcOffset))) {
        Temporary7 = 43;
        }
        else {
        Temporary7 = 45;
        }
        
        addChar(result_754976916[result_754976916_Idx], Temporary7);;
        F.line = 1875;
        var absOffset_754976938 = absInt(dt_754976914.utcOffset);
        F.line = 1876;
        switch (pattern_754976915) {
        case 30:
          F.line = 1878;
          result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], HEX24_369098760(divInt(absOffset_754976938, 3600)));;
          break;
        case 31:
          F.line = 1880;
          result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], nsuIntToStr(divInt(absOffset_754976938, 3600), 2));;
          break;
        case 32:
        case 34:
          F.line = 1882;
          var h_754976939 = nsuIntToStr(divInt(absOffset_754976938, 3600), 2);
          F.line = 1883;
          var m_754976940 = nsuIntToStr(modInt(divInt(absOffset_754976938, 60), 60), 2);
          F.line = 1884;
          if ((pattern_754976915 == 32)) {
          Temporary8 = [58];
          }
          else {
          Temporary8 = [];
          }
          
          var sep_754976946 = nimCopy(null, Temporary8, NTI33554449);
          F.line = 1885;
          result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], (h_754976939 || []).concat(sep_754976946 || [],m_754976940 || []));;
          break;
        case 33:
        case 35:
          F.line = 1887;
          var absOffset_754976947 = absInt(dt_754976914.utcOffset);
          F.line = 1888;
          var h_754976948 = nsuIntToStr(divInt(absOffset_754976947, 3600), 2);
          F.line = 1889;
          var m_754976949 = nsuIntToStr(modInt(divInt(absOffset_754976947, 60), 60), 2);
          F.line = 1890;
          var s_754976950 = nsuIntToStr(modInt(absOffset_754976947, 60), 2);
          F.line = 1891;
          if ((pattern_754976915 == 33)) {
          Temporary9 = [58];
          }
          else {
          Temporary9 = [];
          }
          
          var sep_754976955 = nimCopy(null, Temporary9, NTI33554449);
          F.line = 1892;
          result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], (h_754976948 || []).concat(sep_754976955 || [],m_754976949 || [],sep_754976955 || [],s_754976950 || []));;
          break;
        default: 
          if (true) {
          F.line = 1893;
          failedAssertImpl_268435541([47,117,115,114,47,108,105,98,47,110,105,109,47,112,117,114,101,47,116,105,109,101,115,46,110,105,109,40,49,56,57,51,44,32,49,51,41,32,96,102,97,108,115,101,96,32]);
          }
          
          break;
        }
      }
      
      break;
    case 36:
      F.line = 1895;
      if ((dt_754976914.year < 1)) {
      Temporary10 = [66,67];
      }
      else {
      Temporary10 = [65,68];
      }
      
      result_754976916[result_754976916_Idx].push.apply(result_754976916[result_754976916_Idx], Temporary10);;
      break;
    case 37:
      if (true) {
      F.line = 1896;
      failedAssertImpl_268435541([47,117,115,114,47,108,105,98,47,110,105,109,47,112,117,114,101,47,116,105,109,101,115,46,110,105,109,40,49,56,57,54,44,32,49,49,41,32,96,102,97,108,115,101,96,32]);
      }
      
      break;
    }
  framePtr = F.prev;

  
}

function format_754978328(dt_754978329, f_754978330, loc_754978331) {
  var result_754978332 = [[]];

  var F = {procname: "times.format", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    if (!(!((dt_754978329.monthdayZero == 0)))) {
    F.line = 2186;
    F.filename = "times.nim";
    failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/pure/times.nim(2186, 3) `dt.monthdayZero != 0` Uninitialized datetime"));
    }
    
    F.line = 2187;
    result_754978332[0] = nimCopy(null, [], NTI33554449);
    F.line = 2188;
    var idx_754978338 = 0;
    Label1: {
      F.line = 2189;
        Label2: while (true) {
        if (!(idx_754978338 <= (f_754978330.patterns).length - 1)) break Label2;
          F.line = 2190;
          switch (chckRange(f_754978330.patterns[chckIndx(idx_754978338, 0, (f_754978330.patterns).length - 1)], 0, 37)) {
          case 37:
            F.line = 2192;
            idx_754978338 = addInt(idx_754978338, 1);
            F.line = 2193;
            var len_754978347 = f_754978330.patterns[chckIndx(idx_754978338, 0, (f_754978330.patterns).length - 1)];
            Label3: {
              F.line = 2194;
              var i_754978359 = 0;
              F.line = 90;
              F.filename = "iterators_1.nim";
              var res_536874695 = 1;
              Label4: {
                F.line = 91;
                  Label5: while (true) {
                  if (!(res_536874695 <= ((len_754978347) | 0))) break Label5;
                    F.line = 2194;
                    F.filename = "times.nim";
                    i_754978359 = res_536874695;
                    F.line = 2194;
                    idx_754978338 = addInt(idx_754978338, 1);
                    F.line = 2194;
                    addChar(result_754978332[0], f_754978330.patterns[chckIndx(idx_754978338, 0, (f_754978330.patterns).length - 1)]);;
                    F.line = 93;
                    F.filename = "iterators_1.nim";
                    res_536874695 = addInt(res_536874695, 1);
                  }
              };
            };
            F.line = 2197;
            F.filename = "times.nim";
            idx_754978338 = addInt(idx_754978338, 1);
            break;
          default: 
            F.line = 2199;
            formatPattern_754976913(dt_754978329, chckRange(f_754978330.patterns[chckIndx(idx_754978338, 0, (f_754978330.patterns).length - 1)], 0, 37), result_754978332, 0, loc_754978331);
            F.line = 2200;
            idx_754978338 = addInt(idx_754978338, 1);
            break;
          }
        }
    };
  framePtr = F.prev;

  return result_754978332[0];

}

function format_536872903(dt_536872905) {
  var result_536872907 = [];

  var F = {procname: "format.format", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 2217;
    F.filename = "times.nim";
    result_536872907 = nimCopy(null, format_754978328(dt_536872905, f2_536872908, DefaultLocale_754976617), NTI33554449);
  framePtr = F.prev;

  return result_536872907;

}

function HEX2B_754974738(a_754974739, b_754974740) {
  var result_754974741 = 0n;

  var F = {procname: "times.+", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 225;
    F.filename = "times.nim";
    result_754974741 = (a_754974739 + b_754974740);
  framePtr = F.prev;

  return result_754974741;

}

function convert_754975222(unitFrom_754975224, unitTo_754975225, quantity_754975226) {
    var Temporary1;

  var result_754975227 = 0n;

  var F = {procname: "convert.convert", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 435;
    F.filename = "times.nim";
    if ((unitFrom_754975224 < unitTo_754975225)) {
    Temporary1 = divInt64(quantity_754975226, divInt64(unitWeights_754974870[chckIndx(unitTo_754975225, 0, (unitWeights_754974870).length - 1)], unitWeights_754974870[chckIndx(unitFrom_754975224, 0, (unitWeights_754974870).length - 1)]));
    }
    else {
    Temporary1 = HEX2A_754974730(divInt64(unitWeights_754974870[chckIndx(unitFrom_754975224, 0, (unitWeights_754974870).length - 1)], unitWeights_754974870[chckIndx(unitTo_754975225, 0, (unitWeights_754974870).length - 1)]), quantity_754975226);
    }
    
    result_754975227 = Temporary1;
  framePtr = F.prev;

  return result_754975227;

}

function convert_754975289(unitFrom_754975291, unitTo_754975292, quantity_754975293) {
    var Temporary1;

  var result_754975294 = 0;

  var F = {procname: "convert.convert", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 435;
    F.filename = "times.nim";
    if ((unitFrom_754975291 < unitTo_754975292)) {
    Temporary1 = chckRange(Number(divInt64(BigInt(quantity_754975293), divInt64(unitWeights_754974870[chckIndx(unitTo_754975292, 0, (unitWeights_754974870).length - 1)], unitWeights_754974870[chckIndx(unitFrom_754975291, 0, (unitWeights_754974870).length - 1)]))), (-2147483648), 2147483647);
    }
    else {
    Temporary1 = chckRange(Number(HEX2A_754974730(divInt64(unitWeights_754974870[chckIndx(unitFrom_754975291, 0, (unitWeights_754974870).length - 1)], unitWeights_754974870[chckIndx(unitTo_754975292, 0, (unitWeights_754974870).length - 1)]), BigInt(quantity_754975293))), (-2147483648), 2147483647);
    }
    
    result_754975294 = Temporary1;
  framePtr = F.prev;

  return result_754975294;

}

function checkOverflowInt64(a_33557070) {
        if (a_33557070 > 9223372036854775807n || a_33557070 < -9223372036854775808n) raiseOverflow();
  

  
}

function normalize_754975937(seconds_754975939, nanoseconds_754975940) {
  var result_754975941 = ({seconds: 0n, nanosecond: 0});

  var F = {procname: "normalize.normalize", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 450;
    F.filename = "times.nim";
    result_754975941.seconds = HEX2B_754974738(seconds_754975939, convert_754975222(0, 3, nanoseconds_754975940));
    F.line = 451;
    var nanosecond_754975952 = modInt64(nanoseconds_754975940, BigInt(convert_754975289(3, 0, 1)));
    if ((nanosecond_754975952 < 0n)) {
    F.line = 453;
    nanosecond_754975952 = addInt64(nanosecond_754975952, BigInt(BigInt(convert_754975289(3, 0, 1))));
    F.line = 454;
    result_754975941.seconds = subInt64(result_754975941.seconds, BigInt(1));
    }
    
    F.line = 455;
    result_754975941.nanosecond = chckRange(chckRange(Number(nanosecond_754975952), (-2147483648), 2147483647), 0, 999999999);
  framePtr = F.prev;

  return result_754975941;

}

function HEX2D_754974746(a_754974747, b_754974748) {
  var result_754974749 = 0n;

  var F = {procname: "times.-", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 229;
    F.filename = "times.nim";
    result_754974749 = (a_754974747 - b_754974748);
  framePtr = F.prev;

  return result_754974749;

}

function ntSubTime(a_754975967, b_754975968) {
  var result_754975969 = ({seconds: 0n, nanosecond: 0});

  var F = {procname: "times.-", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1014;
    F.filename = "times.nim";
    result_754975969 = nimCopy(result_754975969, normalize_754975937(HEX2D_754974746(a_754975967.seconds, b_754975968.seconds), BigInt(HEX2D_754974750(a_754975967.nanosecond, b_754975968.nanosecond))), NTI754974752);
  framePtr = F.prev;

  return result_754975969;

}

function normalize_754975279(seconds_754975281, nanoseconds_754975282) {
  var result_754975283 = ({seconds: 0n, nanosecond: 0});

  var F = {procname: "normalize.normalize", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 450;
    F.filename = "times.nim";
    result_754975283.seconds = HEX2B_754974738(seconds_754975281, convert_754975222(0, 3, nanoseconds_754975282));
    F.line = 451;
    var nanosecond_754975299 = modInt64(nanoseconds_754975282, BigInt(convert_754975289(3, 0, 1)));
    if ((nanosecond_754975299 < 0n)) {
    F.line = 453;
    nanosecond_754975299 = addInt64(nanosecond_754975299, BigInt(BigInt(convert_754975289(3, 0, 1))));
    F.line = 454;
    result_754975283.seconds = subInt64(result_754975283.seconds, BigInt(1));
    }
    
    F.line = 455;
    result_754975283.nanosecond = chckRange(chckRange(Number(nanosecond_754975299), (-2147483648), 2147483647), 0, 999999999);
  framePtr = F.prev;

  return result_754975283;

}

function initDuration_754975212(nanoseconds_754975213, microseconds_754975214, milliseconds_754975215, seconds_754975216, minutes_754975217, hours_754975218, days_754975219, weeks_754975220) {
  var result_754975221 = ({seconds: 0n, nanosecond: 0});

  var F = {procname: "times.initDuration", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 669;
    F.filename = "times.nim";
    var seconds_754975267 = HEX2B_754974738(HEX2B_754974738(HEX2B_754974738(HEX2B_754974738(HEX2B_754974738(HEX2B_754974738(HEX2B_754974738(convert_754975222(7, 3, weeks_754975220), convert_754975222(6, 3, days_754975219)), convert_754975222(4, 3, minutes_754975217)), convert_754975222(5, 3, hours_754975218)), convert_754975222(3, 3, seconds_754975216)), convert_754975222(2, 3, milliseconds_754975215)), convert_754975222(1, 3, microseconds_754975214)), convert_754975222(0, 3, nanoseconds_754975213));
    F.line = 677;
    var nanoseconds_754975278 = chckRange(Number(HEX2B_754974738(HEX2B_754974738(convert_754975222(2, 0, modInt64(milliseconds_754975215, 1000n)), convert_754975222(1, 0, modInt64(microseconds_754975214, 1000000n))), modInt64(nanoseconds_754975213, 1000000000n))), (-2147483648), 2147483647);
    F.line = 681;
    result_754975221 = nimCopy(result_754975221, normalize_754975279(seconds_754975267, BigInt(nanoseconds_754975278)), NTI754974754);
  framePtr = F.prev;

  return result_754975221;

}

function floorDiv_754975043(x_754975045, y_754975046) {
  var result_754975047 = 0n;

    result_754975047 = x_754975045 / y_754975046;
    var r_754975048 = x_754975045 % y_754975046;
    if ((((0n < r_754975048) && (y_754975046 < 0n)) || ((r_754975048 < 0n) && (0n < y_754975046)))) {
    result_754975047 = BigInt.asIntN(64, result_754975047 - BigInt(1));
    }
    

  return result_754975047;

}

function inc_754974762(a_754974763, a_754974763_Idx, b_754974764) {
  var F = {procname: "times.inc", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 235;
    F.filename = "times.nim";
    a_754974763[a_754974763_Idx] = BigInt.asIntN(64, a_754974763[a_754974763_Idx] + BigInt(b_754974764));
  framePtr = F.prev;

  
}

function fromEpochDay_754974946(epochday_754974947) {
    var Temporary1;
    var Temporary2;

  var result_754974951 = {Field0: 0, Field1: 0, Field2: 0};

  var F = {procname: "times.fromEpochDay", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 503;
    F.filename = "times.nim";
    var z_754974952 = [epochday_754974947];
    F.line = 504;
    inc_754974762(z_754974952, 0, 719468);
    F.line = 505;
    if ((0n <= z_754974952[0])) {
    Temporary1 = z_754974952[0];
    }
    else {
    Temporary1 = HEX2D_754974746(z_754974952[0], 146096n);
    }
    
    var era_754974953 = divInt64(Temporary1, 146097n);
    F.line = 506;
    var doe_754974954 = HEX2D_754974746(z_754974952[0], HEX2A_754974730(era_754974953, 146097n));
    F.line = 507;
    var yoe_754974955 = divInt64(HEX2D_754974746(HEX2B_754974738(HEX2D_754974746(doe_754974954, divInt64(doe_754974954, 1460n)), divInt64(doe_754974954, 36524n)), divInt64(doe_754974954, 146096n)), 365n);
    F.line = 508;
    var y_754974956 = HEX2B_754974738(yoe_754974955, HEX2A_754974730(era_754974953, 400n));
    F.line = 509;
    var doy_754974957 = HEX2D_754974746(doe_754974954, HEX2D_754974746(HEX2B_754974738(HEX2A_754974730(365n, yoe_754974955), divInt64(yoe_754974955, 4n)), divInt64(yoe_754974955, 100n)));
    F.line = 510;
    var mp_754974958 = divInt64(HEX2B_754974738(HEX2A_754974730(5n, doy_754974957), 2n), 153n);
    F.line = 511;
    var d_754974959 = HEX2B_754974738(HEX2D_754974746(doy_754974957, divInt64(HEX2B_754974738(HEX2A_754974730(153n, mp_754974958), 2n), 5n)), 1n);
    F.line = 512;
    if ((mp_754974958 < 10n)) {
    Temporary2 = 3;
    }
    else {
    Temporary2 = (-9);
    }
    
    var m_754974960 = HEX2B_754974738(mp_754974958, BigInt(Temporary2));
    F.line = 513;
    var colontmp__536874701 = chckRange(Number(d_754974959), 1, 31);
    F.line = 513;
    var colontmp__536874702 = chckRange(Number(m_754974960), 1, 12);
    F.line = 513;
    var colontmp__536874703 = chckRange(Number(HEX2B_754974738(y_754974956, BigInt(((m_754974960 <= 2n) ? 1 : 0)))), (-2147483648), 2147483647);
    F.line = 513;
    result_754974951 = nimCopy(result_754974951, {Field0: nimCopy(null, colontmp__536874701, NTI754974744), Field1: colontmp__536874702, Field2: colontmp__536874703}, NTI754974913);
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_754974951;

}

function isLeapYear_754974890(year_754974891) {
  var result_754974892 = false;

  var F = {procname: "times.isLeapYear", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 458;
    F.filename = "times.nim";
    result_754974892 = ((modInt(year_754974891, 4) == 0) && (!((modInt(year_754974891, 100) == 0)) || (modInt(year_754974891, 400) == 0)));
  framePtr = F.prev;

  return result_754974892;

}

function getDaysInMonth_754974893(month_754974894, year_754974895) {
      var Temporary1;

  var result_754974896 = 0;

  var F = {procname: "times.getDaysInMonth", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 470;
    F.filename = "times.nim";
    switch (month_754974894) {
    case 2:
      F.line = 471;
      if (isLeapYear_754974890(year_754974895)) {
      Temporary1 = 29;
      }
      else {
      Temporary1 = 28;
      }
      
      result_754974896 = Temporary1;
      break;
    case 4:
    case 6:
    case 9:
    case 11:
      F.line = 472;
      result_754974896 = 30;
      break;
    default: 
      F.line = 473;
      result_754974896 = 31;
      break;
    }
  framePtr = F.prev;

  return result_754974896;

}

function assertValidDate_754974897(monthday_754974898, month_754974899, year_754974900) {
  var F = {procname: "times.assertValidDate", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    if (!((monthday_754974898 <= getDaysInMonth_754974893(month_754974899, year_754974900)))) {
    F.line = 477;
    F.filename = "times.nim";
    failedAssertImpl_268435541((makeNimstrLit("/usr/lib/nim/pure/times.nim(477, 3) `monthday <= getDaysInMonth(month, year)` ") || []).concat(HEX24_369098760(year_754974900) || [],[45] || [],nsuIntToStr(month_754974899, 2) || [],[45] || [],HEX24_369098760(monthday_754974898) || [],[32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,100,97,116,101] || []));
    }
    
  framePtr = F.prev;

  
}

function HEX2A_754974734(a_754974735, b_754974736) {
  var result_754974737 = 0;

  var F = {procname: "times.*", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 223;
    F.filename = "times.nim";
    result_754974737 = (a_754974735 * b_754974736);
  framePtr = F.prev;

  return result_754974737;

}

function toEpochDay_754974926(monthday_754974927, month_754974928, year_754974929) {
    var Temporary1;
    var Temporary2;

  var result_754974930 = 0n;

  var F = {procname: "times.toEpochDay", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 486;
    F.filename = "times.nim";
    assertValidDate_754974897(monthday_754974927, month_754974928, year_754974929);
    F.line = 487;
    var y_754974934 = year_754974929;
    F.line = 487;
    var m_754974935 = month_754974928;
    F.line = 487;
    var d_754974936 = monthday_754974927;
    if ((m_754974935 <= 2)) {
    F.line = 489;
    y_754974934 = subInt(y_754974934, 1);
    }
    
    F.line = 491;
    if ((0 <= y_754974934)) {
    Temporary1 = y_754974934;
    }
    else {
    Temporary1 = HEX2D_754974750(y_754974934, 399);
    }
    
    var era_754974942 = divInt(Temporary1, 400);
    F.line = 492;
    var yoe_754974943 = HEX2D_754974750(y_754974934, HEX2A_754974734(era_754974942, 400));
    F.line = 493;
    if ((2 < m_754974935)) {
    Temporary2 = (-3);
    }
    else {
    Temporary2 = 9;
    }
    
    var doy_754974944 = HEX2D_754974750(HEX2B_754974742(divInt(HEX2B_754974742(HEX2A_754974734(153, HEX2B_754974742(m_754974935, Temporary2)), 2), 5), d_754974936), 1);
    F.line = 494;
    var doe_754974945 = HEX2B_754974742(HEX2D_754974750(HEX2B_754974742(HEX2A_754974734(yoe_754974943, 365), divInt(yoe_754974943, 4)), divInt(yoe_754974943, 100)), doy_754974944);
    F.line = 495;
    result_754974930 = BigInt(HEX2D_754974750(HEX2B_754974742(HEX2A_754974734(era_754974942, 146097), doe_754974945), 719468));
    break BeforeRet;
  };
  framePtr = F.prev;

  return result_754974930;

}

function getDayOfWeek_754975037(monthday_754975038, month_754975039, year_754975040) {
    var Temporary1;

  var result_754975041 = 0;

  var F = {procname: "times.getDayOfWeek", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 543;
    F.filename = "times.nim";
    assertValidDate_754974897(monthday_754975038, month_754975039, year_754975040);
    F.line = 545;
    var days_754975042 = HEX2D_754974746(toEpochDay_754974926(monthday_754975038, month_754975039, year_754975040), 3n);
    F.line = 546;
    var weeks_754975054 = floorDiv_754975043(days_754975042, 7n);
    F.line = 547;
    var wd_754975055 = HEX2D_754974746(days_754975042, HEX2A_754974730(weeks_754975054, 7n));
    F.line = 550;
    if ((wd_754975055 == 0n)) {
    Temporary1 = 6;
    }
    else {
    Temporary1 = chckRange(Number(HEX2D_754974746(wd_754975055, 1n)), 0, 6);
    }
    
    result_754975041 = Temporary1;
  framePtr = F.prev;

  return result_754975041;

}

function getDayOfYear_754974998(monthday_754974999, month_754975000, year_754975001) {
  var result_754975002 = 0;

  var F = {procname: "times.getDayOfYear", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 524;
    F.filename = "times.nim";
    assertValidDate_754974897(monthday_754974999, month_754975000, year_754975001);
    if (isLeapYear_754974890(year_754975001)) {
    F.line = 531;
    result_754975002 = chckRange(HEX2D_754974750(HEX2B_754974742(daysUntilMonthLeap_754975004[chckIndx(month_754975000, 1, (daysUntilMonthLeap_754975004).length + (1) - 1) - (1)], monthday_754974999), 1), 0, 365);
    }
    else {
      F.line = 533;
      result_754975002 = chckRange(HEX2D_754974750(HEX2B_754974742(daysUntilMonth_754975003[chckIndx(month_754975000, 1, (daysUntilMonth_754975003).length + (1) - 1) - (1)], monthday_754974999), 1), 0, 365);
    }
    
  framePtr = F.prev;

  return result_754975002;

}

function initDateTime_754976189(zt_754976190, zone_754976191) {
  var result_754976192 = ({m_type: NTI754974753, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

  var F = {procname: "times.initDateTime", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1166;
    F.filename = "times.nim";
    F.line = 1167;
    var adjTime_754976193 = ntSubTime(zt_754976190.time, initDuration_754975212(0n, 0n, 0n, BigInt(zt_754976190.utcOffset), 0n, 0n, 0n, 0n));
    F.line = 1168;
    var s_754976194 = adjTime_754976193.seconds;
    F.line = 1169;
    var epochday_754976199 = floorDiv_754975043(s_754976194, 86400n);
    F.line = 1170;
    var rem_754976200 = HEX2D_754974746(s_754976194, HEX2A_754974730(epochday_754976199, 86400n));
    F.line = 1171;
    var hour_754976201 = divInt64(rem_754976200, 3600n);
    F.line = 1172;
    rem_754976200 = HEX2D_754974746(rem_754976200, HEX2A_754974730(hour_754976201, 3600n));
    F.line = 1173;
    var minute_754976202 = divInt64(rem_754976200, 60n);
    F.line = 1174;
    rem_754976200 = HEX2D_754974746(rem_754976200, HEX2A_754974730(minute_754976202, 60n));
    F.line = 1175;
    var second_754976203 = rem_754976200;
    F.line = 1177;
    var tmpTuple_754976204 = fromEpochDay_754974946(epochday_754976199);
    F.line = 1177;
    var d_754976205 = tmpTuple_754976204["Field0"];
    F.line = 1177;
    var m_754976206 = tmpTuple_754976204["Field1"];
    F.line = 1177;
    var y_754976207 = tmpTuple_754976204["Field2"];
    result_754976192 = nimCopy(result_754976192, {year: y_754976207, monthZero: ((m_754976206) | 0), monthdayZero: d_754976205, hour: nimCopy(null, chckRange(Number(hour_754976201), 0, 23), NTI754974745), minute: nimCopy(null, chckRange(Number(minute_754976202), 0, 59), NTI754974746), second: nimCopy(null, chckRange(Number(second_754976203), 0, 60), NTI754974747), nanosecond: nimCopy(null, zt_754976190.time.nanosecond, NTI754974749), weekday: getDayOfWeek_754975037(d_754976205, m_754976206, y_754976207), yearday: getDayOfYear_754974998(d_754976205, m_754976206, y_754976207), isDst: zt_754976190.isDst, timezone: zone_754976191, utcOffset: zt_754976190.utcOffset, m_type: NTI754974753}, NTI754974753);
  framePtr = F.prev;

  return result_754976192;

}

function zonedTimeFromTime_754976278(zone_754976279, time_754976280) {
  var result_754976281 = ({time: ({seconds: 0n, nanosecond: 0}), utcOffset: 0, isDst: false});

  var F = {procname: "times.zonedTimeFromTime", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1235;
    F.filename = "times.nim";
    result_754976281 = nimCopy(result_754976281, zone_754976279.zonedTimeFromTimeImpl(time_754976280), NTI754974759);
  framePtr = F.prev;

  return result_754976281;

}

function inZone_754976328(time_754976329, zone_754976330) {
  var result_754976331 = ({m_type: NTI754974753, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

  var F = {procname: "times.inZone", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1264;
    F.filename = "times.nim";
    result_754976331 = nimCopy(result_754976331, initDateTime_754976189(zonedTimeFromTime_754976278(zone_754976330, time_754976329), zone_754976330), NTI754974753);
  framePtr = F.prev;

  return result_754976331;

}

function newTimezone_754976235(name_754976236, zonedTimeFromTimeImpl_754976239, zonedTimeFromAdjTimeImpl_754976242) {
  var result_754976243 = null;

  var F = {procname: "times.newTimezone", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1201;
    F.filename = "times.nim";
    result_754976243 = {name: nimCopy(null, name_754976236, NTI33554449), zonedTimeFromTimeImpl: zonedTimeFromTimeImpl_754976239, zonedTimeFromAdjTimeImpl: zonedTimeFromAdjTimeImpl_754976242};
  framePtr = F.prev;

  return result_754976243;

}

function localZonedTimeFromTime_754976346(time_754976347) {
  var result_754976348 = ({time: ({seconds: 0n, nanosecond: 0}), utcOffset: 0, isDst: false});

  var F = {procname: "times.localZonedTimeFromTime", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1283;
    F.filename = "times.nim";
    var jsDate_754976349 = new Date(Number(HEX2A_754974730(time_754976347.seconds, 1000n)));
    F.line = 1284;
    var offset_754976350 = HEX2A_754974734(jsDate_754976349.getTimezoneOffset(), 60);
    F.line = 1285;
    result_754976348.time = nimCopy(result_754976348.time, time_754976347, NTI754974752);
    F.line = 1286;
    result_754976348.utcOffset = offset_754976350;
    F.line = 1287;
    result_754976348.isDst = false;
  framePtr = F.prev;

  return result_754976348;

}

function contains_754976363(s_754976367, value_754976368) {
  var result_754976369 = false;

  var F = {procname: "contains.contains", prev: framePtr, filename: "/usr/lib/nim/system.nim", line: 0};
  framePtr = F;
    F.line = 756;
    F.filename = "system.nim";
    result_754976369 = ((s_754976367.a <= value_754976368) && (value_754976368 <= s_754976367.b));
  framePtr = F.prev;

  return result_754976369;

}

function ntAddTime(a_754975931, b_754975932) {
  var result_754975933 = ({seconds: 0n, nanosecond: 0});

  var F = {procname: "times.+", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1008;
    F.filename = "times.nim";
    result_754975933 = nimCopy(result_754975933, normalize_754975937(HEX2B_754974738(a_754975931.seconds, b_754975932.seconds), BigInt(HEX2B_754974742(a_754975931.nanosecond, b_754975932.nanosecond))), NTI754974752);
  framePtr = F.prev;

  return result_754975933;

}

function localZonedTimeFromAdjTime_754976351(adjTime_754976352) {
  var result_754976353 = ({time: ({seconds: 0n, nanosecond: 0}), utcOffset: 0, isDst: false});

  var F = {procname: "times.localZonedTimeFromAdjTime", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1290;
    F.filename = "times.nim";
    var utcDate_754976354 = new Date(Number(HEX2A_754974730(adjTime_754976352.seconds, 1000n)));
    F.line = 1291;
    var localDate_754976355 = new Date(utcDate_754976354.getUTCFullYear(),utcDate_754976354.getUTCMonth(),utcDate_754976354.getUTCDate(),utcDate_754976354.getUTCHours(),utcDate_754976354.getUTCMinutes(),utcDate_754976354.getUTCSeconds(),0);
    if (contains_754976363(HEX2EHEX2E_1006633008(0, 99), utcDate_754976354.getUTCFullYear())) {
    F.line = 1300;
    localDate_754976355.setFullYear(utcDate_754976354.getUTCFullYear());
    }
    
    F.line = 1302;
    result_754976353.utcOffset = HEX2A_754974734(localDate_754976355.getTimezoneOffset(), 60);
    F.line = 1303;
    result_754976353.time = nimCopy(result_754976353.time, ntAddTime(adjTime_754976352, initDuration_754975212(0n, 0n, 0n, BigInt(result_754976353.utcOffset), 0n, 0n, 0n, 0n)), NTI754974752);
    F.line = 1304;
    result_754976353.isDst = false;
  framePtr = F.prev;

  return result_754976353;

}

function local_754976396() {
  var result_754976397 = null;

  var F = {procname: "times.local", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    if ((localInstance_754976374[0] == null)) {
    F.line = 1389;
    F.filename = "times.nim";
    localInstance_754976374[0] = newTimezone_754976235([76,79,67,65,76], localZonedTimeFromTime_754976346, localZonedTimeFromAdjTime_754976351);
    }
    
    F.line = 1391;
    result_754976397 = localInstance_754976374[0];
  framePtr = F.prev;

  return result_754976397;

}

function local_754976410(t_754976411) {
  var result_754976412 = ({m_type: NTI754974753, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

  var F = {procname: "times.local", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1406;
    F.filename = "times.nim";
    result_754976412 = nimCopy(result_754976412, inZone_754976328(t_754976411, local_754976396()), NTI754974753);
  framePtr = F.prev;

  return result_754976412;

}

function initTime_754975801(unix_754975802, nanosecond_754975803) {
  var result_754975804 = ({seconds: 0n, nanosecond: 0});

  var F = {procname: "times.initTime", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 913;
    F.filename = "times.nim";
    result_754975804.seconds = unix_754975802;
    F.line = 914;
    result_754975804.nanosecond = nanosecond_754975803;
  framePtr = F.prev;

  return result_754975804;

}

function getTime_754975879() {
  var result_754975880 = ({seconds: 0n, nanosecond: 0});

  var F = {procname: "times.getTime", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 981;
    F.filename = "times.nim";
    var millis_754975885 = new Date().getTime();
    F.line = 982;
    var seconds_754975891 = convert_754975289(2, 3, millis_754975885);
    F.line = 983;
    var nanos_754975902 = convert_754975289(2, 0, modInt(millis_754975885, convert_754975289(3, 2, 1)));
    F.line = 985;
    result_754975880 = nimCopy(result_754975880, initTime_754975801(BigInt(seconds_754975891), chckRange(nanos_754975902, 0, 999999999)), NTI754974752);
  framePtr = F.prev;

  return result_754975880;

}

function now_754976413() {
  var result_754976414 = ({m_type: NTI754974753, nanosecond: 0, second: 0, minute: 0, hour: 0, monthdayZero: 0, monthZero: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0});

  var F = {procname: "times.now", prev: framePtr, filename: "/usr/lib/nim/pure/times.nim", line: 0};
  framePtr = F;
    F.line = 1410;
    F.filename = "times.nim";
    result_754976414 = nimCopy(result_754976414, local_754976410(getTime_754975879()), NTI754974753);
  framePtr = F.prev;

  return result_754976414;

}

function linkFileName_536872899(file_536872900) {
  var result_536872901 = [];

  var F = {procname: "rhd_screen.linkFileName", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    F.line = 117;
    F.filename = "rhd_screen.nim";
    var trimmed_536872902 = [nimCopy(null, file_536872900, NTI33554449)];
    F.line = 118;
    nsuRemoveSuffixString(trimmed_536872902, 0, [46,99,115,118]);
    F.line = 120;
    var currTime_536872909 = format_536872903(now_754976413());
    F.line = 121;
    result_536872901 = nimCopy(null, (trimmed_536872902[0] || []).concat([95] || [],currTime_536872909 || [],[46,116,120,116] || []), NTI33554449);
  framePtr = F.prev;

  return result_536872901;

}

function nsuFindChar(s_671090324, sub_671090325, start_671090326, last_671090327) {
    var Temporary1;

  var result_671090328 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1945;
    F.filename = "strutils.nim";
    result_671090328 = (-1);
    F.line = 1946;
    if ((last_671090327 < 0)) {
    Temporary1 = (s_671090324).length - 1;
    }
    else {
    Temporary1 = last_671090327;
    }
    
    var last_671090329 = Temporary1;
    Label2: {
      F.line = 1949;
      var iHEX60gensym176_671090343 = 0;
      F.line = 75;
      F.filename = "iterators_1.nim";
      var colontmp__536874719 = 0;
      F.line = 1949;
      F.filename = "strutils.nim";
      colontmp__536874719 = start_671090326;
      F.line = 90;
      F.filename = "iterators_1.nim";
      var res_536874720 = colontmp__536874719;
      Label3: {
        F.line = 91;
          Label4: while (true) {
          if (!(res_536874720 <= last_671090329)) break Label4;
            F.line = 1963;
            F.filename = "strutils.nim";
            iHEX60gensym176_671090343 = res_536874720;
            if ((s_671090324[chckIndx(iHEX60gensym176_671090343, 0, (s_671090324).length - 1)] == sub_671090325)) {
            F.line = 1951;
            result_671090328 = iHEX60gensym176_671090343;
            break BeforeRet;
            }
            
            F.line = 93;
            F.filename = "iterators_1.nim";
            res_536874720 = addInt(res_536874720, 1);
          }
      };
    };
  };
  framePtr = F.prev;

  return result_671090328;

}

function substr_33558091(s_33558092, first_33558093) {
  var result_33558094 = [];

  var F = {procname: "system.substr", prev: framePtr, filename: "/usr/lib/nim/system.nim", line: 0};
  framePtr = F;
    F.line = 2665;
    F.filename = "system.nim";
    result_33558094 = nimCopy(null, substr_33558079(s_33558092, first_33558093, (s_33558092).length - 1), NTI33554449);
  framePtr = F.prev;

  return result_33558094;

}

function fill_671090262(a_671090264, value_671090265) {
  var F = {procname: "fill.fill", prev: framePtr, filename: "/usr/lib/nim/pure/algorithm.nim", line: 0};
  framePtr = F;
    F.line = 72;
    F.filename = "algorithm.nim";
    var xHEX60gensym172_671090271 = 0;
    Label1: {
      F.line = 98;
        Label2: while (true) {
        if (!(xHEX60gensym172_671090271 <= (a_671090264).length - 1)) break Label2;
          F.line = 98;
          a_671090264[chckIndx(xHEX60gensym172_671090271, 0, (a_671090264).length - 1)] = value_671090265;
          F.line = 75;
          xHEX60gensym172_671090271 = addInt(xHEX60gensym172_671090271, 1);
        }
    };
  framePtr = F.prev;

  
}

function nsuInitSkipTable(a_671090259, sub_671090260) {
  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1878;
    F.filename = "strutils.nim";
    var m_671090261 = (sub_671090260).length;
    F.line = 1879;
    fill_671090262(a_671090259, m_671090261);
    Label1: {
      F.line = 1881;
      var i_671090281 = 0;
      F.line = 117;
      F.filename = "iterators_1.nim";
      var colontmp__536874723 = 0;
      F.line = 1881;
      F.filename = "strutils.nim";
      colontmp__536874723 = subInt(m_671090261, 1);
      F.line = 119;
      F.filename = "iterators_1.nim";
      var i_536874724 = 0;
      Label2: {
        F.line = 120;
          Label3: while (true) {
          if (!(i_536874724 < colontmp__536874723)) break Label3;
            F.line = 1881;
            F.filename = "strutils.nim";
            i_671090281 = i_536874724;
            F.line = 1881;
            a_671090259[chckIndx(sub_671090260[chckIndx(i_671090281, 0, (sub_671090260).length - 1)], 0, (a_671090259).length - 1)] = subInt(subInt(m_671090261, 1), i_671090281);
            F.line = 122;
            F.filename = "iterators_1.nim";
            i_536874724 = addInt(i_536874724, 1);
          }
      };
    };
  framePtr = F.prev;

  
}

function nsuInitNewSkipTable(sub_671090299) {
  var result_671090300 = [new Int32Array(256)];

  var F = {procname: "strutils.initSkipTable", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 1891;
    F.filename = "strutils.nim";
    nsuInitSkipTable(result_671090300[0], sub_671090299);
  framePtr = F.prev;

  return result_671090300[0];

}

function nsuFindStrA(a_671090302, s_671090303, sub_671090304, start_671090305, last_671090306) {
    var Temporary1;

  var result_671090307 = 0;

  var F = {procname: "strutils.find", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 1905;
    F.filename = "strutils.nim";
    if ((last_671090306 < 0)) {
    Temporary1 = (s_671090303).length - 1;
    }
    else {
    Temporary1 = last_671090306;
    }
    
    var last_671090308 = Temporary1;
    F.line = 1906;
    var subLast_671090309 = subInt((sub_671090304).length, 1);
    if ((subLast_671090309 == (-1))) {
    F.line = 1911;
    result_671090307 = start_671090305;
    break BeforeRet;
    }
    
    F.line = 1915;
    result_671090307 = (-1);
    F.line = 1916;
    var skip_671090310 = start_671090305;
    Label2: {
      F.line = 1918;
        Label3: while (true) {
        if (!(subLast_671090309 <= subInt(last_671090308, skip_671090310))) break Label3;
          F.line = 1919;
          var i_671090311 = subLast_671090309;
          Label4: {
            F.line = 1920;
              Label5: while (true) {
              if (!(s_671090303[chckIndx(addInt(skip_671090310, i_671090311), 0, (s_671090303).length - 1)] == sub_671090304[chckIndx(i_671090311, 0, (sub_671090304).length - 1)])) break Label5;
                if ((i_671090311 == 0)) {
                F.line = 1922;
                result_671090307 = skip_671090310;
                break BeforeRet;
                }
                
                F.line = 1923;
                i_671090311 = subInt(i_671090311, 1);
              }
          };
          F.line = 1924;
          skip_671090310 = addInt(skip_671090310, a_671090302[chckIndx(s_671090303[chckIndx(addInt(skip_671090310, subLast_671090309), 0, (s_671090303).length - 1)], 0, (a_671090302).length - 1)]);
        }
    };
  };
  framePtr = F.prev;

  return result_671090307;

}

function nsuReplaceStr(s_671090512, sub_671090513, by_671090514) {
  var result_671090515 = [];

  var F = {procname: "strutils.replace", prev: framePtr, filename: "/usr/lib/nim/pure/strutils.nim", line: 0};
  framePtr = F;
    F.line = 2180;
    F.filename = "strutils.nim";
    result_671090515 = nimCopy(null, [], NTI33554449);
    F.line = 2181;
    var subLen_671090516 = (sub_671090513).length;
    if ((subLen_671090516 == 0)) {
    F.line = 2183;
    result_671090515 = nimCopy(null, s_671090512, NTI33554449);
    }
    else {
    if ((subLen_671090516 == 1)) {
    F.line = 2187;
    var c_671090517 = sub_671090513[chckIndx(0, 0, (sub_671090513).length - 1)];
    F.line = 2188;
    var last_671090518 = (s_671090512).length - 1;
    F.line = 2189;
    var i_671090519 = 0;
    Label1: {
      F.line = 2190;
        Label2: while (true) {
        if (!true) break Label2;
          F.line = 2191;
          var j_671090520 = nsuFindChar(s_671090512, c_671090517, chckRange(i_671090519, 0, 2147483647), last_671090518);
          if ((j_671090520 < 0)) {
          F.line = 2192;
          break Label1;
          }
          
          F.line = 2193;
          result_671090515.push.apply(result_671090515, substr_33558079(s_671090512, i_671090519, subInt(j_671090520, 1)));;
          F.line = 2194;
          result_671090515.push.apply(result_671090515, by_671090514);;
          F.line = 2195;
          i_671090519 = addInt(j_671090520, subLen_671090516);
        }
    };
    F.line = 2197;
    result_671090515.push.apply(result_671090515, substr_33558091(s_671090512, i_671090519));;
    }
    else {
      F.line = 2199;
      var a_671090521 = nsuInitNewSkipTable(sub_671090513);
      F.line = 2200;
      var last_671090522 = (s_671090512).length - 1;
      F.line = 2201;
      var i_671090523 = 0;
      Label3: {
        F.line = 2202;
          Label4: while (true) {
          if (!true) break Label4;
            F.line = 2203;
            var j_671090524 = nsuFindStrA(a_671090521, s_671090512, sub_671090513, chckRange(i_671090523, 0, 2147483647), last_671090522);
            if ((j_671090524 < 0)) {
            F.line = 2204;
            break Label3;
            }
            
            F.line = 2205;
            result_671090515.push.apply(result_671090515, substr_33558079(s_671090512, i_671090523, subInt(j_671090524, 1)));;
            F.line = 2206;
            result_671090515.push.apply(result_671090515, by_671090514);;
            F.line = 2207;
            i_671090523 = addInt(j_671090524, subLen_671090516);
          }
      };
      F.line = 2209;
      result_671090515.push.apply(result_671090515, substr_33558091(s_671090512, i_671090523));;
    }
    }
  framePtr = F.prev;

  return result_671090515;

}

function sampleHtml_536874289(sample_536874290) {
  var result_536874291 = [];

  var F = {procname: "rhd_screen.sampleHtml", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    F.line = 245;
    F.filename = "rhd_screen.nim";
    var pattern_536874292 = nsuReplaceStr(sample_536874290.pattern, [45], [38,109,105,110,117,115,59]);
    F.line = 246;
    result_536874291 = nimCopy(null, ([60,116,114,62,60,116,100,62] || []).concat(sample_536874290.sampleId || [],[60,47,116,100,62,60,116,100,62] || [],pattern_536874292 || [],[60,47,116,100,62,60,116,100,62] || [],reprEnum(sample_536874290.status, NTI536870915) || [],[60,47,116,100,62,60,116,100,62] || [],codes_536870942[chckIndx(sample_536874290.status, 0, (codes_536870942).length - 1)] || [],[60,47,116,100,62,60,47,116,114,62] || []), NTI33554449);
  framePtr = F.prev;

  return result_536874291;

}

function toHtmlTable_536874296(samples_536874297) {
  var result_536874298 = [];

  var F = {procname: "rhd_screen.toHtmlTable", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    F.line = 257;
    F.filename = "rhd_screen.nim";
    var body_536874299 = [];
    F.line = 258;
    var row_536874300 = [];
    Label1: {
      F.line = 259;
      var field_536874383 = [];
      F.line = 38;
      F.filename = "iterators.nim";
      var i_536874706 = 0;
      Label2: {
        F.line = 39;
          Label3: while (true) {
          if (!true) break Label3;
            F.line = 259;
            F.filename = "rhd_screen.nim";
            field_536874383 = header_536874211[chckIndx(i_536874706, 0, (header_536874211).length - 1)];
            F.line = 259;
            row_536874300.push.apply(row_536874300, ([60,116,104,62] || []).concat(field_536874383 || [],[60,47,116,104,62] || []));;
            if ((3 <= i_536874706)) {
            F.line = 41;
            F.filename = "iterators.nim";
            break Label2;
            }
            
            F.line = 42;
            i_536874706 = addInt(i_536874706, 1);
          }
      };
    };
    F.line = 261;
    F.filename = "rhd_screen.nim";
    body_536874299 = nimCopy(null, ([60,116,114,62] || []).concat(row_536874300 || [],[60,47,116,114,62] || []), NTI33554449);
    Label4: {
      F.line = 262;
      var sample_536874387 = ({sampleId: [], pattern: [], status: 0});
      F.line = 241;
      F.filename = "iterators.nim";
      var i_536874709 = 0;
      F.line = 242;
      var L_536874710 = (samples_536874297).length;
      Label5: {
        F.line = 243;
          Label6: while (true) {
          if (!(i_536874709 < L_536874710)) break Label6;
            F.line = 262;
            F.filename = "rhd_screen.nim";
            sample_536874387 = samples_536874297[chckIndx(i_536874709, 0, (samples_536874297).length - 1)];
            F.line = 262;
            body_536874299.push.apply(body_536874299, sampleHtml_536874289(sample_536874387));;
            F.line = 245;
            F.filename = "iterators.nim";
            i_536874709 = addInt(i_536874709, 1);
            if (!(((samples_536874297).length == L_536874710))) {
            F.line = 246;
            failedAssertImpl_268435541(makeNimstrLit("/usr/lib/nim/system/iterators.nim(246, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    F.line = 264;
    F.filename = "rhd_screen.nim";
    result_536874298 = nimCopy(null, ([60,116,97,98,108,101,62] || []).concat(body_536874299 || [],[60,47,116,97,98,108,101,62] || []), NTI33554449);
  framePtr = F.prev;

  return result_536874298;

}

function htmlResult_536874388(contents_536874389, file_536874390) {
  var result_536874391 = null;

  var F = {procname: "rhd_screen.htmlResult", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    F.line = 269;
    F.filename = "rhd_screen.nim";
    var sampleTable_536874392 = parseExportFile_536870996(contents_536874389);
    F.line = 270;
    var samples_536874393 = analyzeResults_536874044(sampleTable_536874392);
    F.line = 272;
    var resultTable_536874394 = toResultTable_536874212(samples_536874393);
    F.line = 273;
    var dataUrl_536874395 = toDataUrl_536872891(resultTable_536874394);
    F.line = 274;
    var linkText_536874396 = linkFileName_536872899(file_536874390);
    F.line = 276;
    var htmlTable_536874397 = toHtmlTable_536874296(samples_536874393);
    F.line = 280;
    var s_536874398 = [];
    F.line = 282;
    s_536874398.push.apply(s_536874398, ([60,112,62] || []).concat(htmlTable_536874397 || [],[60,47,112,62] || []));;
    F.line = 286;
    s_536874398.push.apply(s_536874398, [60,104,51,62,76,195,164,110,107,32,116,105,108,108,32,114,101,115,117,108,116,97,116,102,105,108,60,47,104,51,62]);;
    F.line = 287;
    s_536874398.push.apply(s_536874398, ([60,112,62,60,97,32,104,114,101,102,61,34] || []).concat(dataUrl_536874395 || [],[34,32,100,111,119,110,108,111,97,100,61,34] || [],linkText_536874396 || [],[34,62] || [],linkText_536874396 || [],[60,47,97,62,60,47,112,62] || []));;
    F.line = 289;
    s_536874398.push.apply(s_536874398, ([60,112,62,60,100,101,116,97,105,108,115,62,60,115,117,109,109,97,114,121,62,86,105,115,97,32,102,105,108,101,110,115,32,105,110,110,101,104,195,165,108,108,60,47,115,117,109,109,97,114,121,62,60,112,114,101,62,60,99,111,100,101,62] || []).concat(resultTable_536874394 || [],[60,47,99,111,100,101,62,60,47,112,114,101,62,60,47,100,101,116,97,105,108,115,62,60,47,112,62] || []));;
    F.line = 295;
    result_536874391 = toJSStr(s_536874398);
  framePtr = F.prev;

  return result_536874391;

}

function parseAndOutput_536874413(c_536874414, file_536874415) {
  var F = {procname: "rhd_screen.parseAndOutput", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
    F.line = 299;
    F.filename = "rhd_screen.nim";
    document.getElementById("showcontent").innerHTML = htmlResult_536874388(c_536874414, file_536874415);
  framePtr = F.prev;

  
}

function fileLoaded() {
    
function HEX3Aanonymous_536874424(ev_536874425) {
      var F = {procname: "fileLoaded.:anonymous", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
      framePtr = F;
        F.line = 312;
        F.filename = "rhd_screen.nim";
        parseAndOutput_536874413(cstrToNimstr(reader_536874423.result), cstrToNimstr(file_536874422.name));
      framePtr = F.prev;

      
    }

  var F = {procname: "rhd_screen.fileLoaded", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
  framePtr = F;
  BeforeRet: {
    F.line = 304;
    F.filename = "rhd_screen.nim";
    var fileInput_536874417 = document.getElementById("fileInput");
    if (((fileInput_536874417.files).length == 0)) {
    F.line = 306;
    break BeforeRet;
    }
    
    F.line = 307;
    var file_536874422 = fileInput_536874417.files[chckIndx(0, 0, (fileInput_536874417.files).length - 1)];
    F.line = 309;
    var reader_536874423 = new FileReader();
    F.line = 310;
    reader_536874423.addEventListener("load", HEX3Aanonymous_536874424, false);
    F.line = 315;
    reader_536874423.readAsText(file_536874422, "UTF-8");
  };
  framePtr = F.prev;

  
}
var F = {procname: "module rhd_screen", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
framePtr = F;
framePtr = F.prev;
var F = {procname: "module rhd_screen", prev: framePtr, filename: "/home/med-mjo/git/kitcalc.github.io/js/src/rhd_screen.nim", line: 0};
framePtr = F;
framePtr = F.prev;
